Reference

Edit this page

________________________________________
The Expo SDK provides access to device and system functionality such as contacts, camera, gyroscope, GPS location, and so on, in the form of packages. You can install any Expo SDK package using the npx expo install command. For example, three different packages are installed using the following command:
Terminal
Copy
- npx expo install expo-camera expo-contacts expo-sensors
After installing one or more packages, you can import them into your JavaScript code:
import { CameraView } from 'expo-camera';
import * as Contacts from 'expo-contacts';
import { Gyroscope } from 'expo-sensors';
This allows you to write Contacts.getContactsAsync() and read the contacts from the device, read the gyroscope sensor to detect device movement, or start the phone's camera and take photos.
All Expo SDK packages work in any React Native app
Expo apps are React Native apps, so all Expo SDK packages work in any React Native app with the expo package installed and configured. The easiest way to create a React Native app with support for Expo SDK packages is to use create-expo-app. However, you can also add Expo SDK support to an existing React Native app with the npx install-expo-modules command.
Terminal
Copy
# Create a project named my-app
- npx create-expo-app my-app --template bare-minimum

Install Expo SDK packages in existing React Native apps
Learn more about configuring projects created with npx @react-native-community/cli@latest init to Expo SDK packages.

Use libraries
Learn how to install Expo SDK packages in your project.

Using pre-release versions
New Expo SDK versions are released three times each year. Between these releases, we publish pre-release versions of the expo package and all of the Expo SDK packages. Pre-releases are not considered stable and should only be used if you are comfortable with the risk of encountering bugs or other issues.
Canary releases
Canary releases represent a snapshot of the state of the main branch at the time they are published. Canary package versions include -canary in the name, along with the date and commit hash, such as 51.0.0-canary-20240418-8d74597. To install the latest canary release:
Terminal
Copy
# Install the alpha version of expo and its related packages
- npm install expo@canary && npx expo install --fix
You can often use pre-release versions of individual packages with stable releases of the Expo SDK. There may occasionally be incompatibilities or other issues that arise in canary-quality releases. You may want to silence dependency validation warnings if you opt in to the canary package and once you have verified that it works well for your use cases.
Beta releases
Before each Expo SDK release, we publish beta versions of the expo package and all of the Expo SDK packages. Beta releases are considered much more stable than canary releases, and we encourage developers to try them out on their apps and share their feedback. Beta releases use the beta tag on npm and follow the instructions in the related changelog post.
Each Expo SDK version depends on a React Native version
Expo SDK version	React Native version	React Native Web version
53.0.0	0.79	0.20.0
52.0.0	0.76	0.19.13
51.0.0	0.74	0.19.10
Additional information
Expo SDK policy for tracking React Native releases
•	
•	
•	
Why not release a new Expo SDK version immediately for every React Native release?
What if I need a change from the latest React Native version and it's not yet in an Expo SDK release?
1.	
2.	
Can I use an older version of React Native with the latest Expo SDK?
Support for Android and iOS versions
Each version of Expo SDK supports a minimum OS version of Android and iOS. For Android, the compileSdkVersion is defined which tells the Gradle which Android SDK version to use to compile the app. This also means that you can use the Android API features included in that SDK version and from the previous versions. For iOS, the Xcode tells the minimum Xcode SDK version to use to compile the app.
Expo SDK version	Android version	compileSdkVersion	iOS version	Xcode version
53.0.0	7+	35	15.1+	16.0+
52.0.0	7+	35	15.1+	16.0+
51.0.0	6+	34	13.4+	15.4 - 16.2
When deciding whether to upgrade your Expo SDK version, consider both Expo's SDK version and app store submission requirements, as described in the above table. Google Play Store and Apple App Store periodically increase their minimum required OS versions and API levels, which are required for new app submissions. Expo has no control over the app store requirements, and you should check Google and Apple for the current store submission requirements.


#1

app.json / app.config.js

Edit this page

A reference of available properties in Expo app config.
________________________________________
The following is a list of properties that are available for you under the "expo" key in app.json or app.config.json. These properties can be passed to the top level object of app.config.js or app.config.ts.

Configuration with app config
For information on app configuration, the differences between various app config files, and how to use them dynamically.

Properties
name
Type: string
The name of your app as it appears both within Expo Go and on your home screen as a standalone app.
Bare Workflow
description
Type: string
A short description of what your app is and why it is great.
slug
Type: string
A URL-friendly name for your project that is unique across your account.
owner
Type: string
The name of the Expo account that owns the project. This is useful for teams collaborating on a project. If not provided, the owner defaults to the username of the current user.
currentFullName
Type: string
The auto generated Expo account name and slug used for display purposes. It is not meant to be set directly. Formatted like @username/slug. When unauthenticated, the username is @anonymous. For published projects, this value may change when a project is transferred between accounts or renamed.
originalFullName
Type: string
The auto generated Expo account name and slug used for services like Notifications and AuthSession proxy. It is not meant to be set directly. Formatted like @username/slug. When unauthenticated, the username is @anonymous. For published projects, this value will not change when a project is transferred between accounts or renamed.
sdkVersion
Type: string
The Expo sdkVersion to run the project on. This should line up with the version specified in your package.json.
runtimeVersion
One of types:
•	string matching the following pattern: ^[a-zA-Z\d][a-zA-Z\d._+()-]{0,254}$
•	string matching the following pattern: ^exposdk:((\d+\.\d+\.\d+)|(UNVERSIONED))$
•	An object with the following properties:
policy
Type: enum • Path: runtimeVersion.policy
Valid values: nativeVersion, sdkVersion, appVersion, fingerprint.
Property indicating compatibility between a build's native code and an OTA update.
version
Type: string
Your app version. In addition to this field, you'll also use ios.buildNumber and android.versionCode — read more about how to version your app here. On iOS this corresponds to CFBundleShortVersionString, and on Android, this corresponds to versionName. The required format can be found here.
Bare Workflow
platforms
Type: array
Platforms that your project explicitly supports. If not specified, it defaults to ["ios", "android"].
Example
[
  "ios",
  "android",
  "web"
]
githubUrl
Type: string
If you would like to share the source code of your app on Github, enter the URL for the repository here and it will be linked to from your Expo project page.
Example
"https://github.com/expo/expo"
orientation
Type: enum
Locks your app to a specific orientation with portrait or landscape. Defaults to no lock. Valid values: default, portrait, landscape
userInterfaceStyle
Type: enum
Configuration to force the app to always use the light or dark user-interface appearance, such as "dark mode", or make it automatically adapt to the system preferences. If not provided, defaults to light. Requires expo-system-ui be installed in your project to work on Android.
backgroundColor
Type: string
The background color for your app, behind any of your React views. This is also known as the root view background color. Requires expo-system-ui be installed in your project to work on iOS.
6 character long hex color string, for example, '#000000'. Default is white: '#ffffff'
primaryColor
Type: string
On Android, this will determine the color of your app in the multitasker. Currently this is not used on iOS, but it may be used for other purposes in the future.
6 character long hex color string, for example, '#000000'
icon
Type: string
Local path or remote URL to an image to use for your app's icon. We recommend that you use a 1024x1024 png file. This icon will appear on the home screen and within the Expo Go app.
Bare Workflow
notification
Type: object
Configuration for remote (push) notifications.
icon
Type: string • Path: notification.icon
(Android only) Local path or remote URL to an image to use as the icon for push notifications. 96x96 png grayscale with transparency. We recommend following Google's design guidelines. If not provided, defaults to your app icon.
color
Type: string • Path: notification.color
(Android only) Tint color for the push notification image when it appears in the notification tray. Defaults to #ffffff
6 character long hex color string, for example, '#000000'
iosDisplayInForeground
Type: boolean • Path: notification.iosDisplayInForeground
Whether or not to display notifications when the app is in the foreground on iOS. _displayInForeground option in the individual push notification message overrides this option. Learn more. Defaults to false.
androidMode
Type: enum • Path: notification.androidMode
Show each push notification individually (default) or collapse into one (collapse).
androidCollapsedTitle
Type: string • Path: notification.androidCollapsedTitle
If androidMode is set to collapse, this title is used for the collapsed notification message. For example, '#{unread_notifications} new interactions'.
androidStatusBar
Type: object
Configuration for the status bar on Android. For more details please navigate to Configuring StatusBar.
barStyle
Type: enum • Path: androidStatusBar.barStyle
Configures the status bar icons to have a light or dark color. Valid values: light-content, dark-content. Defaults to dark-content
backgroundColor
Type: string • Path: androidStatusBar.backgroundColor
Specifies the background color of the status bar. Defaults to #00000000 (transparent) for dark-content bar style and #00000088 (semi-transparent black) for light-content bar style
6 character long hex color string '#RRGGBB', for example, '#000000' for black. Or 8 character long hex color string '#RRGGBBAA', for example, '#00000088' for semi-transparent black.
hidden
Type: boolean • Path: androidStatusBar.hidden
Instructs the system whether the status bar should be visible or not. Defaults to false
translucent
Type: boolean • Path: androidStatusBar.translucent
When false, the system status bar pushes the content of your app down (similar to position: relative). When true, the status bar floats above the content in your app (similar to position: absolute). Defaults to true to match the iOS status bar behavior (which can only float above content). Explicitly setting this property to true will add android:windowTranslucentStatus to styles.xml and may cause unexpected keyboard behavior on Android when using the softwareKeyboardLayoutMode set to resize. In this case you will have to use KeyboardAvoidingView to manage the keyboard layout.
androidNavigationBar
Type: object
Configuration for the bottom navigation bar on Android. Can be used to configure the expo-navigation-bar module in EAS Build.
visible
Type: enum • Path: androidNavigationBar.visible
Determines how and when the navigation bar is shown. Learn more. Requires expo-navigation-bar be installed in your project. Valid values: leanback, immersive, sticky-immersive
leanback results in the navigation bar being hidden until the first touch gesture is registered.
immersive results in the navigation bar being hidden until the user swipes up from the edge where the navigation bar is hidden.
sticky-immersive is identical to 'immersive' except that the navigation bar will be semi-transparent and will be hidden again after a short period of time.
barStyle
Type: enum • Path: androidNavigationBar.barStyle
Configure the navigation bar icons to have a light or dark color. Supported on Android Oreo and newer. Valid values: 'light-content', 'dark-content'
backgroundColor
Type: string • Path: androidNavigationBar.backgroundColor
Specifies the background color of the navigation bar.
6 character long hex color string, for example, '#000000'
developmentClient
Type: object
Settings that apply specifically to running this app in a development client
silentLaunch
Type: boolean • Path: developmentClient.silentLaunch
If true, the app will launch in a development client with no additional dialogs or progress indicators, just like in a standalone app.
scheme
One of types:
•	string matching the following pattern: ^[a-z][a-z0-9+.-]*$
{
  "type": "array",
  "items": {
    "type": "string",
    "pattern": "^[a-z][a-z0-9+.-]*$"
  }
}
URL scheme(s) to link into your app. For example, if we set this to 'demo', then demo:// URLs would open your app when tapped. This is a build-time configuration, it has no effect in Expo Go.
String beginning with a lowercase letter followed by any combination of lowercase letters, digits, "+", "." or "-"
Bare Workflow
extra
Type: object
Any extra fields you want to pass to your experience. Values are accessible via Constants.expoConfig.extra (Learn more)
updates
Type: object
Configuration for the expo-updates library
enabled
Type: boolean • Path: updates.enabled
Whether the updates system will run. Defaults to true. If set to false, builds will only use code and assets bundled at time of build.
checkAutomatically
Type: enum • Path: updates.checkAutomatically
By default, expo-updates will check for updates every time the app is loaded. Set this to ON_ERROR_RECOVERY to disable automatic checking unless recovering from an error. Set this to NEVER to disable automatic checking. Valid values: ON_LOAD (default value), ON_ERROR_RECOVERY, WIFI_ONLY, NEVER
useEmbeddedUpdate
Type: boolean • Path: updates.useEmbeddedUpdate
Whether to load the embedded update. Defaults to true. If set to false, an update will be fetched at launch. When set to false, ensure that checkAutomatically is set to ON_LOAD and fallbackToCacheTimeout is large enough for the initial remote update to download. This should not be used in production.
fallbackToCacheTimeout
Type: number • Path: updates.fallbackToCacheTimeout
How long (in ms) to wait for the app to check for and fetch a new update upon launch before falling back to the most recent update already present on the device. Defaults to 0. Must be between 0 and 300000 (5 minutes). If the startup update check takes longer than this value, any update downloaded during the check will be applied upon the next app launch.
url
Type: string • Path: updates.url
URL from which expo-updates will fetch update manifests
codeSigningCertificate
Type: string • Path: updates.codeSigningCertificate
Local path of a PEM-formatted X.509 certificate used for verifying codesigned updates. When provided, all updates downloaded by expo-updates must be signed.
codeSigningMetadata
Type: object • Path: updates.codeSigningMetadata
Metadata for codeSigningCertificate
alg
Type: enum • Path: updates.codeSigningMetadata.alg
Algorithm used to generate manifest code signing signature. Valid values: rsa-v1_5-sha256
keyid
Type: string • Path: updates.codeSigningMetadata.keyid
Identifier for the key in the certificate. Used to instruct signing mechanisms when signing or verifying signatures.
requestHeaders
Type: object • Path: updates.requestHeaders
Extra HTTP headers to include in HTTP requests made by expo-updates when fetching manifests or assets. These may override preset headers.
assetPatternsToBeBundled
Type: array • Path: updates.assetPatternsToBeBundled
Array of glob patterns specifying which files should be included in updates. Glob patterns are relative to the project root. A value of ['**'] will match all asset files within the project root. When not supplied all asset files will be included. Example: Given a value of ['app/images/**/*.png', 'app/fonts/**/*.woff'] all .png files in all subdirectories of app/images and all .woff files in all subdirectories of app/fonts will be included in updates.
disableAntiBrickingMeasures
Type: boolean • Path: updates.disableAntiBrickingMeasures
Whether to disable the built-in expo-updates anti-bricking measures. Defaults to false. If set to true, this will allow overriding certain configuration options from the JS API, which is liable to leave an app in a bricked state if not done carefully. This should not be used in production.
useNativeDebug
Type: boolean • Path: updates.useNativeDebug
Enable debugging of native code with updates enabled. Defaults to false. If set to true, the EX_UPDATES_NATIVE_DEBUG environment variable will be set in Podfile.properties.json and gradle.properties. This causes Xcode and Android Studio debug builds to be built with expo-updates enabled, and JS debugging (with dev client or packager) disabled. This should not be used in production.
locales
Type: object
Provide overrides by locale for System Dialog prompts like Permissions Boxes
Bare Workflow
plugins
Type: array
Config plugins for adding extra functionality to your project. Learn more.
Bare Workflow
splash
Type: object
Configuration for loading and splash screen for standalone apps.
Bare Workflow
backgroundColor
Type: string • Path: splash.backgroundColor
Color to fill the loading screen background
6 character long hex color string, for example, '#000000'
Bare Workflow
resizeMode
Type: enum • Path: splash.resizeMode
Determines how the image will be displayed in the splash loading screen. Must be one of cover or contain, defaults to contain.
image
Type: string • Path: splash.image
Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.
jsEngine
Type: enum
@deprecated This field will be removed in a future release. When it is removed, you can continue using JavaScriptCore instead of Hermes by following the instructions in @react-native-community/javascriptcore. Specifies the JavaScript engine for Android apps. Defaults to hermes. Valid values: hermes, jsc.
Bare Workflow
newArchEnabled
Type: boolean
A Boolean value that indicates whether the app should use the new architecture. Defaults to true.
ios
Type: object
Configuration that is specific to the iOS platform.
appleTeamId
Type: string • Path: ios.appleTeamId
The Apple development team ID to use for all native targets. You can find your team ID in the Apple Developer Portal.
publishManifestPath
Type: string • Path: ios.publishManifestPath
The manifest for the iOS version of your app will be written to this path during publish.
publishBundlePath
Type: string • Path: ios.publishBundlePath
The bundle for the iOS version of your app will be written to this path during publish.
bundleIdentifier
Type: string • Path: ios.bundleIdentifier
The bundle identifier for your iOS standalone app. You make it up, but it needs to be unique on the App Store. See this StackOverflow question.
iOS bundle identifier notation unique name for your app. For example, host.exp.expo, where exp.host is our domain and expo is our app name.
Bare Workflow
buildNumber
Type: string • Path: ios.buildNumber
Build number for your iOS standalone app. Corresponds to CFBundleVersion and must match Apple's specified format. (Note: Transporter will pull the value for Version Number from expo.version and NOT from expo.ios.buildNumber.)
Bare Workflow
backgroundColor
Type: string • Path: ios.backgroundColor
The background color for your iOS app, behind any of your React views. Overrides the top-level backgroundColor key if it is present. Requires expo-system-ui be installed in your project to work on iOS.
6 character long hex color string, for example, '#000000'
scheme
One of types:
•	string matching the following pattern: ^[a-z][a-z0-9+.-]*$
{
  "type": "array",
  "items": {
    "type": "string",
    "pattern": "^[a-z][a-z0-9+.-]*$"
  }
}
URL scheme(s) to link into your iOS app. Schemes added to this field will be merged with the schemes in the scheme key at the top level of the config.
String beginning with a lowercase letter followed by any combination of lowercase letters, digits, "+", "." or "-"
Bare Workflow
icon
One of types:
•	string
•	An object with the following properties:
light
Type: string • Path: ios.icon.light
The light icon. It will appear when neither dark nor tinted icons are used, or if they are not provided.
dark
Type: string • Path: ios.icon.dark
The dark icon. It will appear for the app when the user's system appearance is dark. See Apple's Human Interface Guidelines for more information.
tinted
Type: string • Path: ios.icon.tinted
The tinted icon. It will appear for the app when the user's system appearance is tinted. See Apple's Human Interface Guidelines for more information.
Local path or remote URL to an image to use for your app's icon on iOS. Alternatively, an object specifying different icons for various system appearances (e.g., dark, tinted) can be provided. If specified, this overrides the top-level icon key. Use a 1024x1024 icon which follows Apple's interface guidelines for icons, including color profile and transparency.
Expo will generate the other required sizes. This icon will appear on the home screen and within the Expo Go app.
appStoreUrl
Type: string • Path: ios.appStoreUrl
URL to your app on the Apple App Store, if you have deployed it there. This is used to link to your store page from your Expo project page if your app is public.
Example
"https://apps.apple.com/us/app/expo-client/id982107779"
bitcode
Type: undefined • Path: ios.bitcode
Enable iOS Bitcode optimizations in the native build. Accepts the name of an iOS build configuration to enable for a single configuration and disable for all others, e.g. Debug, Release. Not available in Expo Go. Defaults to undefined which uses the template's predefined settings.
config
Type: object • Path: ios.config
Note: This property key is not included in the production manifest and will evaluate to undefined. It is used internally only in the build process, because it contains API keys that some may want to keep private.
branch
Type: object • Path: ios.config.branch
Branch key to hook up Branch linking services.
apiKey
Type: string • Path: ios.config.branch.apiKey
Your Branch API key
usesNonExemptEncryption
Type: boolean • Path: ios.config.usesNonExemptEncryption
Sets ITSAppUsesNonExemptEncryption in the standalone ipa's Info.plist to the given boolean value.
googleMapsApiKey
Type: string • Path: ios.config.googleMapsApiKey
Google Maps iOS SDK key for your standalone app.
googleMobileAdsAppId
Type: string • Path: ios.config.googleMobileAdsAppId
Google Mobile Ads App ID Google AdMob App ID.
googleMobileAdsAutoInit
Type: boolean • Path: ios.config.googleMobileAdsAutoInit
A boolean indicating whether to initialize Google App Measurement and begin sending user-level event data to Google immediately when the app starts. The default in Expo (Go and in standalone apps) is false. Sets the opposite of the given value to the following key in Info.plist.
googleServicesFile
Type: string • Path: ios.googleServicesFile
Firebase Configuration File Location of the GoogleService-Info.plist file for configuring Firebase.
supportsTablet
Type: boolean • Path: ios.supportsTablet
Whether your standalone iOS app supports tablet screen sizes. Defaults to false.
Bare Workflow
isTabletOnly
Type: boolean • Path: ios.isTabletOnly
If true, indicates that your standalone iOS app does not support handsets, and only supports tablets.
Bare Workflow
requireFullScreen
Type: boolean • Path: ios.requireFullScreen
If true, indicates that your standalone iOS app does not support Slide Over and Split View on iPad. Defaults to false
Bare Workflow
userInterfaceStyle
Type: enum • Path: ios.userInterfaceStyle
Configuration to force the app to always use the light or dark user-interface appearance, such as "dark mode", or make it automatically adapt to the system preferences. If not provided, defaults to light.
infoPlist
Type: object • Path: ios.infoPlist
Dictionary of arbitrary configuration to add to your standalone app's native Info.plist. Applied prior to all other Expo-specific configuration. No other validation is performed, so use this at your own risk of rejection from the App Store.
entitlements
Type: object • Path: ios.entitlements
Dictionary of arbitrary configuration to add to your standalone app's native *.entitlements (plist). Applied prior to all other Expo-specific configuration. No other validation is performed, so use this at your own risk of rejection from the App Store.
privacyManifests
Type: object • Path: ios.privacyManifests
Dictionary of privacy manifest definitions to add to your app's native PrivacyInfo.xcprivacy file. Learn more
NSPrivacyAccessedAPITypes
Type: array • Path: ios.privacyManifests.NSPrivacyAccessedAPITypes
A list of required reasons of why your app uses restricted API categories. Learn more
NSPrivacyAccessedAPIType
Type: string • Path: ios.privacyManifests.NSPrivacyAccessedAPITypes.NSPrivacyAccessedAPIType
A string that identifies the category of required reason APIs your app uses
NSPrivacyAccessedAPITypeReasons
Type: array • Path: ios.privacyManifests.NSPrivacyAccessedAPITypes.NSPrivacyAccessedAPITypeReasons
A list of reasons for a specific category.
NSPrivacyTrackingDomains
Type: array • Path: ios.privacyManifests.NSPrivacyTrackingDomains
A list of domains that your app uses for tracking.
NSPrivacyTracking
Type: boolean • Path: ios.privacyManifests.NSPrivacyTracking
A Boolean that indicates whether your app or third-party SDK uses data for tracking.
NSPrivacyCollectedDataTypes
Type: array • Path: ios.privacyManifests.NSPrivacyCollectedDataTypes
A list of collected data types that your app uses.
NSPrivacyCollectedDataType
Type: string • Path: ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataType
NSPrivacyCollectedDataTypeLinked
Type: boolean • Path: ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataTypeLinked
NSPrivacyCollectedDataTypeTracking
Type: boolean • Path: ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataTypeTracking
NSPrivacyCollectedDataTypePurposes
Type: array • Path: ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataTypePurposes
associatedDomains
Type: array • Path: ios.associatedDomains
An array that contains Associated Domains for the standalone app. Learn more.
Entries must follow the format applinks:<fully qualified domain>[:port number]. Learn more.
Bare Workflow
usesIcloudStorage
Type: boolean • Path: ios.usesIcloudStorage
A boolean indicating if the app uses iCloud Storage for DocumentPicker. See DocumentPicker docs for details.
Bare Workflow
usesAppleSignIn
Type: boolean • Path: ios.usesAppleSignIn
A boolean indicating if the app uses Apple Sign-In. See AppleAuthentication docs for details.
usesBroadcastPushNotifications
Type: boolean • Path: ios.usesBroadcastPushNotifications
A boolean indicating if the app uses Push Notifications Broadcast option for Push Notifications capability. If true, EAS CLI will use the value during capability syncing. If EAS CLI is not used, this configuration will not have any effect unless another tool is used to operate on it, so enable the capability manually on the Apple Developer Portal in that case.
accessesContactNotes
Type: boolean • Path: ios.accessesContactNotes
A Boolean value that indicates whether the app may access the notes stored in contacts. You must receive permission from Apple before you can submit your app for review with this capability.
splash
Type: object • Path: ios.splash
Configuration for loading and splash screen for standalone iOS apps.
backgroundColor
Type: string • Path: ios.splash.backgroundColor
Color to fill the loading screen background
6 character long hex color string, for example, '#000000'
resizeMode
Type: enum • Path: ios.splash.resizeMode
Determines how the image will be displayed in the splash loading screen. Must be one of cover or contain, defaults to contain.
image
Type: string • Path: ios.splash.image
Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.
tabletImage
Type: string • Path: ios.splash.tabletImage
Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.
dark
Type: object • Path: ios.splash.dark
Configuration for loading and splash screen for standalone iOS apps in dark mode.
backgroundColor
Type: string • Path: ios.splash.dark.backgroundColor
Color to fill the loading screen background
6 character long hex color string, for example, '#000000'
resizeMode
Type: enum • Path: ios.splash.dark.resizeMode
Determines how the image will be displayed in the splash loading screen. Must be one of cover or contain, defaults to contain.
image
Type: string • Path: ios.splash.dark.image
Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.
tabletImage
Type: string • Path: ios.splash.dark.tabletImage
Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.
jsEngine
Type: enum • Path: ios.jsEngine
@deprecated This field will be removed in a future release. When it is removed, you can continue using JavaScriptCore instead of Hermes by following the instructions in @react-native-community/javascriptcore. Specifies the JavaScript engine for iOS apps. Not supported in Expo Go. Defaults to hermes. Valid values: hermes, jsc.
Bare Workflow
newArchEnabled
Type: boolean • Path: ios.newArchEnabled
A Boolean value that indicates whether the iOS app should use the new architecture.
runtimeVersion
One of types:
•	string matching the following pattern: ^[a-zA-Z\d][a-zA-Z\d._+()-]{0,254}$
•	string matching the following pattern: ^exposdk:((\d+\.\d+\.\d+)|(UNVERSIONED))$
•	An object with the following properties:
policy
Type: enum • Path: ios.runtimeVersion.policy
Valid values: nativeVersion, sdkVersion, appVersion, fingerprint.
Property indicating compatibility between an iOS build's native code and an OTA update for the iOS platform. If provided, this will override the value of the top level runtimeVersion key on iOS.
version
Type: string • Path: ios.version
Your iOS app version. Takes precedence over the root version field. In addition to this field, you'll also use ios.buildNumber — read more about how to version your app here. This corresponds to CFBundleShortVersionString. The required format can be found here.
Bare Workflow
android
Type: object
Configuration that is specific to the Android platform.
publishManifestPath
Type: string • Path: android.publishManifestPath
The manifest for the Android version of your app will be written to this path during publish.
publishBundlePath
Type: string • Path: android.publishBundlePath
The bundle for the Android version of your app will be written to this path during publish.
package
Type: string • Path: android.package
The package name for your Android standalone app. You make it up, but it needs to be unique on the Play Store. See this StackOverflow question.
Reverse DNS notation unique name for your app. Valid Android Application ID. For example, com.example.app, where com.example is our domain and app is our app. The name may only contain lowercase and uppercase letters (a-z, A-Z), numbers (0-9) and underscores (_), separated by periods (.). Each component of the name should start with a lowercase letter.
Bare Workflow
versionCode
Type: integer • Path: android.versionCode
Version number required by Google Play. Increment by one for each release. Must be a positive integer. Learn more
Bare Workflow
backgroundColor
Type: string • Path: android.backgroundColor
The background color for your Android app, behind any of your React views. Overrides the top-level backgroundColor key if it is present.
6 character long hex color string, for example, '#000000'
Bare Workflow
userInterfaceStyle
Type: enum • Path: android.userInterfaceStyle
Configuration to force the app to always use the light or dark user-interface appearance, such as "dark mode", or make it automatically adapt to the system preferences. If not provided, defaults to light. Requires expo-system-ui be installed in your project to work on Android.
scheme
One of types:
•	string matching the following pattern: ^[a-z][a-z0-9+.-]*$
{
  "type": "array",
  "items": {
    "type": "string",
    "pattern": "^[a-z][a-z0-9+.-]*$"
  }
}
URL scheme(s) to link into your Android app. Schemes added to this field will be merged with the schemes in the scheme key at the top level of the config.
String beginning with a lowercase letter followed by any combination of lowercase letters, digits, "+", "." or "-"
Bare Workflow
icon
Type: string • Path: android.icon
Local path or remote URL to an image to use for your app's icon on Android. If specified, this overrides the top-level icon key. We recommend that you use a 1024x1024 png file (transparency is recommended for the Google Play Store). This icon will appear on the home screen and within the Expo Go app.
adaptiveIcon
Type: object • Path: android.adaptiveIcon
Settings for an Adaptive Launcher Icon on Android. Learn more
foregroundImage
Type: string • Path: android.adaptiveIcon.foregroundImage
Local path or remote URL to an image to use for your app's icon on Android. If specified, this overrides the top-level icon and the android.icon keys. Should follow the specified guidelines. This icon will appear on the home screen.
monochromeImage
Type: string • Path: android.adaptiveIcon.monochromeImage
Local path or remote URL to an image representing the Android 13+ monochromatic icon. Should follow the specified guidelines. This icon will appear on the home screen when the user enables 'Themed icons' in system settings on a device running Android 13+.
backgroundImage
Type: string • Path: android.adaptiveIcon.backgroundImage
Local path or remote URL to a background image for your app's Adaptive Icon on Android. If specified, this overrides the backgroundColor key. Must have the same dimensions as foregroundImage, and has no effect if foregroundImage is not specified. Should follow the specified guidelines.
backgroundColor
Type: string • Path: android.adaptiveIcon.backgroundColor
Color to use as the background for your app's Adaptive Icon on Android. Defaults to white, #FFFFFF. Has no effect if foregroundImage is not specified.
6 character long hex color string, for example, '#000000'
playStoreUrl
Type: string • Path: android.playStoreUrl
URL to your app on the Google Play Store, if you have deployed it there. This is used to link to your store page from your Expo project page if your app is public.
Example
"https://play.google.com/store/apps/details?id=host.exp.exponent"
permissions
Type: array • Path: android.permissions
A list of permissions to add to the app AndroidManifest.xml during prebuild. For example: ['android.permission.SCHEDULE_EXACT_ALARM']
Bare Workflow
blockedPermissions
Type: array • Path: android.blockedPermissions
List of permissions to block in the final AndroidManifest.xml. This is useful for removing permissions that are added by native package AndroidManifest.xml files which are merged into the final manifest. Internally this feature uses the tools:node="remove" XML attribute to remove permissions. Not available in Expo Go.
googleServicesFile
Type: string • Path: android.googleServicesFile
Firebase Configuration File Location of the google-services.json file for configuring Firebase. Including this key automatically enables FCM in your standalone app.
Bare Workflow
config
Type: object • Path: android.config
Note: This property key is not included in the production manifest and will evaluate to undefined. It is used internally only in the build process, because it contains API keys that some may want to keep private.
branch
Type: object • Path: android.config.branch
Branch key to hook up Branch linking services.
apiKey
Type: string • Path: android.config.branch.apiKey
Your Branch API key
googleMaps
Type: object • Path: android.config.googleMaps
Google Maps Android SDK configuration for your standalone app.
apiKey
Type: string • Path: android.config.googleMaps.apiKey
Your Google Maps Android SDK API key
googleMobileAdsAppId
Type: string • Path: android.config.googleMobileAdsAppId
Google Mobile Ads App ID Google AdMob App ID.
googleMobileAdsAutoInit
Type: boolean • Path: android.config.googleMobileAdsAutoInit
A boolean indicating whether to initialize Google App Measurement and begin sending user-level event data to Google immediately when the app starts. The default in Expo (Client and in standalone apps) is false. Sets the opposite of the given value to the following key in Info.plist
splash
Type: object • Path: android.splash
Configuration for loading and splash screen for managed and standalone Android apps.
backgroundColor
Type: string • Path: android.splash.backgroundColor
Color to fill the loading screen background
6 character long hex color string, for example, '#000000'
resizeMode
Type: enum • Path: android.splash.resizeMode
Determines how the image will be displayed in the splash loading screen. Must be one of cover, contain or native, defaults to contain.
image
Type: string • Path: android.splash.image
Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.
mdpi
Type: string • Path: android.splash.mdpi
Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. Learn more
Natural sized image (baseline)
hdpi
Type: string • Path: android.splash.hdpi
Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. Learn more
Scale 1.5x
xhdpi
Type: string • Path: android.splash.xhdpi
Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. Learn more
Scale 2x
xxhdpi
Type: string • Path: android.splash.xxhdpi
Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. Learn more
Scale 3x
xxxhdpi
Type: string • Path: android.splash.xxxhdpi
Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. Learn more
Scale 4x
dark
Type: object • Path: android.splash.dark
Configuration for loading and splash screen for managed and standalone Android apps in dark mode.
backgroundColor
Type: string • Path: android.splash.dark.backgroundColor
Color to fill the loading screen background
6 character long hex color string, for example, '#000000'
resizeMode
Type: enum • Path: android.splash.dark.resizeMode
Determines how the image will be displayed in the splash loading screen. Must be one of cover, contain or native, defaults to contain.
image
Type: string • Path: android.splash.dark.image
Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.
mdpi
Type: string • Path: android.splash.dark.mdpi
Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. Learn more
Natural sized image (baseline)
hdpi
Type: string • Path: android.splash.dark.hdpi
Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. Learn more
Scale 1.5x
xhdpi
Type: string • Path: android.splash.dark.xhdpi
Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. Learn more
Scale 2x
xxhdpi
Type: string • Path: android.splash.dark.xxhdpi
Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. Learn more
Scale 3x
xxxhdpi
Type: string • Path: android.splash.dark.xxxhdpi
Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. Learn more
Scale 4x
intentFilters
Type: array • Path: android.intentFilters
Configuration for setting an array of custom intent filters in Android manifest. Learn more
Bare Workflow
Example
[
  {
    "autoVerify": true,
    "action": "VIEW",
    "data": {
      "scheme": "https",
      "host": "*.example.com"
    },
    "category": [
      "BROWSABLE",
      "DEFAULT"
    ]
  }
]
autoVerify
Type: boolean • Path: android.intentFilters.autoVerify
You may also use an intent filter to set your app as the default handler for links (without showing the user a dialog with options). To do so use true and then configure your server to serve a JSON file verifying that you own the domain. Learn more
action
Type: string • Path: android.intentFilters.action
data
Type: undefined • Path: android.intentFilters.data
category
Type: undefined • Path: android.intentFilters.category
allowBackup
Type: boolean • Path: android.allowBackup
Allows your user's app data to be automatically backed up to their Google Drive. If this is set to false, no backup or restore of the application will ever be performed (this is useful if your app deals with sensitive information). Defaults to the Android default, which is true.
softwareKeyboardLayoutMode
Type: enum • Path: android.softwareKeyboardLayoutMode
Determines how the software keyboard will impact the layout of your application. This maps to the android:windowSoftInputMode property. Defaults to resize. Valid values: resize, pan.
jsEngine
Type: enum • Path: android.jsEngine
@deprecated This field will be removed in a future release. When it is removed, you can continue using JavaScriptCore instead of Hermes by following the instructions in @react-native-community/javascriptcore. Specifies the JavaScript engine for Android apps. Defaults to hermes. Valid values: hermes, jsc.
Bare Workflow
newArchEnabled
Type: boolean • Path: android.newArchEnabled
A Boolean value that indicates whether the Android app should use the new architecture.
runtimeVersion
One of types:
•	string matching the following pattern: ^[a-zA-Z\d][a-zA-Z\d._+()-]{0,254}$
•	string matching the following pattern: ^exposdk:((\d+\.\d+\.\d+)|(UNVERSIONED))$
•	An object with the following properties:
policy
Type: enum • Path: android.runtimeVersion.policy
Valid values: nativeVersion, sdkVersion, appVersion, fingerprint.
Property indicating compatibility between a Android build's native code and an OTA update for the Android platform. If provided, this will override the value of top level runtimeVersion key on Android.
version
Type: string • Path: android.version
Your android app version. Takes precedence over the root version field. In addition to this field, you'll also use android.versionCode — read more about how to version your app here. This corresponds to versionName. The required format can be found here.
Bare Workflow
edgeToEdgeEnabled
Type: boolean • Path: android.edgeToEdgeEnabled
Enable your app to run in edge-to-edge mode. Default to false.
Bare Workflow
web
Type: object
Configuration that is specific to the web platform.
output
Type: enum • Path: web.output
Sets the export method for the web app for both expo start and expo export. static statically renders HTML files for every route in the app/ directory, which is available only in Expo Router apps. single outputs a Single Page Application (SPA), with a single index.html in the output folder, and has no statically indexable HTML. server outputs static HTML, and API Routes for hosting with a custom Node.js server. Defaults to single.
favicon
Type: string • Path: web.favicon
Relative path of an image to use for your app's favicon.
name
Type: string • Path: web.name
Defines the title of the document, defaults to the outer level name
shortName
Type: string • Path: web.shortName
A short version of the app's name, 12 characters or fewer. Used in app launcher and new tab pages. Maps to short_name in the PWA manifest.json. Defaults to the name property.
Maximum 12 characters long
lang
Type: string • Path: web.lang
Specifies the primary language for the values in the name and short_name members. This value is a string containing a single language tag.
scope
Type: string • Path: web.scope
Defines the navigation scope of this website's context. This restricts what web pages can be viewed while the manifest is applied. If the user navigates outside the scope, it returns to a normal web page inside a browser tab/window. If the scope is a relative URL, the base URL will be the URL of the manifest.
themeColor
Type: string • Path: web.themeColor
Defines the color of the Android tool bar, and may be reflected in the app's preview in task switchers.
6 character long hex color string, for example, '#000000'
description
Type: string • Path: web.description
Provides a general description of what the pinned website does.
dir
Type: enum • Path: web.dir
Specifies the primary text direction for the name, short_name, and description members. Together with the lang member, it helps the correct display of right-to-left languages.
display
Type: enum • Path: web.display
Defines the developers’ preferred display mode for the website.
startUrl
Type: string • Path: web.startUrl
The URL that loads when a user launches the application (e.g., when added to home screen), typically the index. Note: This has to be a relative URL, relative to the manifest URL.
orientation
Type: enum • Path: web.orientation
Defines the default orientation for all the website's top level browsing contexts.
backgroundColor
Type: string • Path: web.backgroundColor
Defines the expected “background color” for the website. This value repeats what is already available in the site’s CSS, but can be used by browsers to draw the background color of a shortcut when the manifest is available before the stylesheet has loaded. This creates a smooth transition between launching the web application and loading the site's content.
6 character long hex color string, for example, '#000000'
barStyle
Type: enum • Path: web.barStyle
If content is set to default, the status bar appears normal. If set to black, the status bar has a black background. If set to black-translucent, the status bar is black and translucent. If set to default or black, the web content is displayed below the status bar. If set to black-translucent, the web content is displayed on the entire screen, partially obscured by the status bar.
preferRelatedApplications
Type: boolean • Path: web.preferRelatedApplications
Hints for the user agent to indicate to the user that the specified native applications (defined in expo.ios and expo.android) are recommended over the website.
dangerous
Type: object • Path: web.dangerous
Experimental features. These will break without deprecation notice.
splash
Type: object • Path: web.splash
Configuration for PWA splash screens.
Bare Workflow
backgroundColor
Type: string • Path: web.splash.backgroundColor
Color to fill the loading screen background
6 character long hex color string, for example, '#000000'
resizeMode
Type: enum • Path: web.splash.resizeMode
Determines how the image will be displayed in the splash loading screen. Must be one of cover or contain, defaults to contain.
image
Type: string • Path: web.splash.image
Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.
config
Type: object • Path: web.config
Firebase web configuration. Used by the expo-firebase packages on both web and native. Learn more
firebase
Type: object • Path: web.config.firebase
apiKey
Type: string • Path: web.config.firebase.apiKey
authDomain
Type: string • Path: web.config.firebase.authDomain
databaseURL
Type: string • Path: web.config.firebase.databaseURL
projectId
Type: string • Path: web.config.firebase.projectId
storageBucket
Type: string • Path: web.config.firebase.storageBucket
messagingSenderId
Type: string • Path: web.config.firebase.messagingSenderId
appId
Type: string • Path: web.config.firebase.appId
measurementId
Type: string • Path: web.config.firebase.measurementId
bundler
Type: enum • Path: web.bundler
Sets the bundler to use for the web platform. Only supported in the local CLI npx expo. Defaults to webpack if the @expo/webpack-config package is installed, if not, it defaults to metro.
experiments
Type: object
Enable experimental features that may be unstable, unsupported, or removed without deprecation notices.
baseUrl
Type: string • Path: experiments.baseUrl
Export a website relative to a subpath of a domain. The path will be prepended as-is to links to all bundled resources. Prefix the path with a / (recommended) to load all resources relative to the server root. If the path does not start with a / then resources will be loaded relative to the code that requests them, this could lead to unexpected behavior. Example '/subpath'. Defaults to '' (empty string).
supportsTVOnly
Type: boolean • Path: experiments.supportsTVOnly
If true, indicates that this project does not support tablets or handsets, and only supports Apple TV and Android TV
tsconfigPaths
Type: boolean • Path: experiments.tsconfigPaths
Enable tsconfig/jsconfig compilerOptions.paths and compilerOptions.baseUrl support for import aliases in Metro.
typedRoutes
Type: boolean • Path: experiments.typedRoutes
Enable support for statically typed links in Expo Router. This feature requires TypeScript be set up in your Expo Router v2 project.
turboModules
Type: boolean • Path: experiments.turboModules
Enables Turbo Modules, which are a type of native modules that use a different way of communicating between JS and platform code. When installing a Turbo Module you will need to enable this experimental option (the library still needs to be a part of Expo SDK already, like react-native-reanimated v2). Turbo Modules do not support remote debugging and enabling this option will disable remote debugging.
reactCanary
Type: boolean • Path: experiments.reactCanary
Experimentally use a vendored canary build of React for testing upcoming features.
reactCompiler
Type: boolean • Path: experiments.reactCompiler
Experimentally enable React Compiler.
reactServerComponentRoutes
Type: boolean • Path: experiments.reactServerComponentRoutes
Experimentally enable React Server Components by default in Expo Router and concurrent routing for transitions.
reactServerFunctions
Type: boolean • Path: experiments.reactServerFunctions
Experimentally enable React Server Functions support in Expo CLI and Expo Router.
remoteBuildCache
Type: object • Path: experiments.remoteBuildCache
Experimentally enable downloading cached builds from remote.
provider
Type: undefined • Path: experiments.remoteBuildCache.provider
Service provider for remote builds.
_internal
Type: object
Internal properties for developer tools
pluginHistory
Type: object • Path: _internal.pluginHistory
List of plugins already run on the config
#2

babel.config.js

Edit this page

A reference for Babel configuration file.
________________________________________
Babel is used as the JavaScript compiler to transform modern JavaScript (ES6+) into a version compatible with the JavaScript engine on mobile devices.
Each new Expo project created using npx create-expo-app configures Babel automatically and uses babel-preset-expo as the default preset. There is no need to create a babel.config.js file unless you need to customize the Babel configuration.
Create babel.config.js
If your project requires a custom Babel configuration, you need to create the babel.config.js file in your project by following the steps below:
1.	Navigate to the root of your project and run the following command inside a terminal. This will generate a babel.config.js file in the root of your project.
Terminal
Copy
- npx expo customize babel.config.js
2.	The babel.config.js file contains the following default configuration:
babel.config.js
Copy
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};
3.	If you make a change to the babel.config.js file, you need to restart the Metro bundler to apply the changes and use --clear option from Expo CLI to clear the Metro bundler cache:
Terminal
Copy
- npx expo start --clear
babel-preset-expo
babel-preset-expo is the default preset used in Expo projects. It extends the default React Native preset (@react-native/babel-preset) and adds support for decorators, tree-shaking web libraries, and loading font icons.

#3

metro.config.js

Edit this page

A reference of available configurations in Metro.
________________________________________
See more information about metro.config.js in the customizing Metro guide.
Environment variables
Expo CLI can load environment variables from .env files. Learn more about how to use environment variables in Expo CLI in the environment variables guide.
EAS CLI uses a different mechanism for environment variables, except when it invokes Expo CLI for compiling and bundling. Learn more about environment variables in EAS.
If you are migrating an older project, then you should ignore local env files by adding the following to your .gitignore:
.gitignore
Copy
# local env files
.env*.local
Disabling dotenv files
Dotenv file loading can be fully disabled in Expo CLI by enabling the EXPO_NO_DOTENV environment variable, before invoking any Expo CLI command.
Terminal
# All users can run cross-env, followed by the Expo CLI command
- npx cross-env EXPO_NO_DOTENV=1 expo start
# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command
- EXPO_NO_DOTENV=1 npx expo start
Disabling EXPO_PUBLIC_-prefixed client environment variables
Environment variables prefixed with EXPO_PUBLIC_ will be exposed to the app at build-time. For example, EXPO_PUBLIC_API_KEY will be available as process.env.EXPO_PUBLIC_API_KEY.
Client environment variable inlining can be disabled with the environment variable EXPO_NO_CLIENT_ENV_VARS=1, this must be defined before any bundling is performed.
Terminal
# All users can run cross-env, followed by the Expo CLI command
- npx cross-env EXPO_NO_CLIENT_ENV_VARS=1 expo start
# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command
- EXPO_NO_CLIENT_ENV_VARS=1 npx expo start
CSS
CSS support is under development and currently only works on web.
Expo supports CSS in your project. You can import CSS files from any component. CSS Modules are also supported.
CSS support is enabled by default. You can disable the feature by setting isCSSEnabled in the Metro config.
metro.config.js
Copy
/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  // Disable CSS support.
  isCSSEnabled: false,
});
Global CSS
Global styles are web-only, usage will cause your application to diverge visually on native.
You can import a CSS file from any component. The CSS will be applied to the entire page.
Here, we'll define a global style for the class name .container:
styles.css
Copy
.container {
  background-color: red;
}
We can then use the class name in our component by importing the stylesheet and using .container:
App.js
Copy
import './styles.css';
import { View } from 'react-native';

export default function App() {
  return (
    <>
      {/* Use `className` to assign the style with React DOM components. */}
      <div className="container">Hello World</div>

      {/* Use `style` with the following syntax to append class names in React Native for web. */}
      <View
        style={{
          $$css: true,
          _: 'container',
        }}>
        Hello World
      </View>
    </>
  );
}
You can also import stylesheets that are vendored in libraries, just like you would any node module:
index.js
Copy
// Applies the styles app-wide.
import 'emoji-mart/css/emoji-mart.css';
•	On native, all global stylesheets are automatically ignored.
•	Hot reloading is supported for global stylesheets, simply save the file and the changes will be applied.
CSS Modules
CSS Modules for native are under development and currently only work on web.
CSS Modules are a way to scope CSS to a specific component. This is useful for avoiding naming collisions and for ensuring that styles are only applied to the intended component.
In Expo, CSS Modules are defined by creating a file with the .module.css extension. The file can be imported from any component. The exported value is an object with the class names as keys and the web-only scoped names as the values. The import unstable_styles can be used to access react-native-web-safe styles.
CSS Modules support platform extensions to allow you to define different styles for different platforms. For example, you can define a module.ios.css and module.android.css file to define styles for Android and iOS respectively. You'll need to import without the extension, for example:
App.js
Copy
// Importing `./App.module.ios.css`:
- import styles from './App.module.css';
+ import styles from './App.module';
Flipping the extension, for example, App.ios.module.css will not work and result in a universal module named App.ios.module.
You cannot pass styles to the className prop of a React Native or React Native for web component. Instead, you must use the style prop.
App.js
Copy
import styles, { unstable_styles } from './App.module.css';

export default function Page() {
  return (
    <>
      <Text
        style={{
          // This is how react-native-web class names are applied
          $$css: true,
          _: styles.text,
        }}>
        Hello World
      </Text>
      <Text style={unstable_styles.text}>Hello World</Text>
      {/* Web-only usage: */}
      <p className={styles.text}>Hello World</p>
    </>
  );
}
App.module.css
Copy
.text {
  color: red;
}
•	On web, all CSS values are available. CSS is not processed or auto-prefixed like it is with the React Native Web StyleSheet API. You can use postcss.config.js to autoprefix your CSS.
•	CSS Modules use lightningcss under the hood, check the issues for unsupported features.
PostCSS
PostCSS can be customized by adding a postcss.config.json file to the root of your project. This file should export a function that returns a PostCSS configuration object. For example:
postcss.config.json
Copy
{
  "plugins": {
    "autoprefixer": {}
  }
}
Both postcss.config.json and postcss.config.js are supported, but postcss.config.json enables better caching.
Resetting cache after updates
Changing the Post CSS or browserslist config will require you to clear the Metro cache:
Terminal
Copy
- npx expo start --clear
- npx expo export --clear
SASS
Expo Metro has partial support for SCSS/SASS.
To setup, install the sass package in your project:
Terminal
Copy
- yarn add -D sass
Then, ensure CSS is setup in the metro.config.js file.
•	When sass is installed, then modules without extensions will be resolved in the following order: scss, sass, css.
•	Only use the intended syntax with sass files.
•	Importing other files from inside a scss/sass file is not currently supported.
Tailwind
Standard Tailwind CSS supports only web platform. For universal support, use a library such as NativeWind, which allows creating styled React Native components with Tailwind CSS.

Tailwind CSS
Learn how to configure and use Tailwind CSS in your Expo project.

Extending the Babel transformer
Expo's Metro config uses a custom transformer.babelTransformerPath value to ensure expo-babel-preset is always used and web/Node.js environments are supported.
If you want to extend the Babel transformer, import the upstream transformer from @expo/metro-config/babel-transformer instead of metro-react-native-babel-transformer. For example:
metro.transformer.js
Copy
const upstreamTransformer = require('@expo/metro-config/babel-transformer');

module.exports.transform = async ({ src, filename, options }) => {
  // Do something custom for SVG files...
  if (filename.endsWith('.svg')) {
    src = '...';
  }
  // Pass the source through the upstream Expo transformer.
  return upstreamTransformer.transform({ src, filename, options });
};
Custom resolving
Expo CLI extends the default Metro resolver to add features like Web, Server, and tsconfig aliases support. You can similarly customize the default resolution behavior of Metro by chaining the config.resolver.resolveRequest function.
metro.config.js
Copy
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (moduleName.startsWith('my-custom-resolver:')) {
    // Logic to resolve the module name to a file path...
    // NOTE: Throw an error if there is no resolution.
    return {
      filePath: 'path/to/file',
      type: 'sourceFile',
    };
  }

  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;
Unlike traditional bundlers, Metro shared the same resolver function across all platforms. As a result, you can mutate the resolution settings dynamically on each request with the context object.
Mocking modules
If you want a module to be empty for a given platform, you can return a type: 'empty' object from the resolver. The following example will cause lodash to be empty on web:
metro.config.js
Copy
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (platform === 'web' && moduleName === 'lodash') {
    return {
      type: 'empty',
    };
  }

  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;
This technique is equivalent to using empty externals in Webpack or Vite, but with the added benefit of being able to target specific platforms.
Virtual modules
Metro doesn't support virtual modules at the moment. One technique you can use to obtain similar behavior is to create a module in the node_modules/.cache/... directory and redirect the resolution to that file.
The following example will create a module at node_modules/.cache/virtual/virtual-module.js and redirect the resolution of virtual:my-module to that file:
metro.config.js
Copy
const path = require('path');
const fs = require('fs');

const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

const virtualPath = path.resolve(__dirname, 'node_modules/.cache/virtual/virtual-module.js');

// Create the virtual module in a generated directory...
fs.mkdirSync(path.dirname(virtualPath), { recursive: true });
fs.writeFileSync(virtualPath, 'export default "Hello World";');

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (moduleName === 'virtual:my-module') {
    return {
      filePath: virtualPath,
      type: 'sourceFile',
    };
  }

  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;
Show More
This can be used to emulate externals with custom imports. For example, if you want to redirect require('expo') to something custom like SystemJS.require('expo'), you can create a virtual module that exports SystemJS.require('expo') and redirect the resolution of expo to that file.
Custom transforming
Transformations are heavily cached in Metro. If you update something, use the --clear flag to see updates. For example, npx expo start --clear.
Metro doesn't have a very expressive plugin system for transforming files, instead opt to use the babel.config.js and caller object to customize the transformation.
babel.config.js
Copy
module.exports = function (api) {
  // Get the platform that Expo CLI is transforming for.
  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));

  // Detect if the bundling operation is for Hermes engine or not, e.g. `'hermes'` | `undefined`.
  const engine = api.caller(caller => (caller ? caller.engine : null));

  // Is bundling for a server environment, e.g. API Routes.
  const isServer = api.caller(caller => (caller ? caller.isServer : false));

  // Is bundling for development or production.
  const isDev = api.caller(caller =>
    caller
      ? caller.isDev
      : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'
  );

  // Ensure the config is not cached otherwise the platform will not be updated.
  api.cache(false);
  // You can alternatively provide a more robust CONFIG cache invalidation:
  // api.cache.invalidate(() => platform);

  return {
    presets: ['babel-preset-expo'],
    plugins: [
      // Add a plugin based on the platform...
      platform === 'web' && 'my-plugin',

      // Ensure you filter out falsy values.
    ].filter(Boolean),
  };
};
Show More
If the caller doesn't have engine, platform, bundler, and so on, then ensure you are using @expo/metro-config/babel-transformer for the transformer. If you're using a custom transformer then it may need to extend the Expo transformer.
Always try to implement custom logic in the resolver if possible, caching is much simpler and easier to reason about. For example, if you need to remap an import, it's simpler and faster to resolve to a static file with the resolver than to parse all possible import methods and remap them with the transformer.
Always use babel-preset-expo as the default Babel preset, this ensures the transformation is always compatible with Expo runtimes. babel-preset-expo uses all of the caller inputs internally to optimize for a given platform, engine, and environment.
Node.js built-ins
When bundling for a server environment, Expo's Metro config automatically supports externalizing Node.js built-in modules (fs, path, node:crypto, and more) based on the current Node.js version. If the CLI is bundling for a browser environment, then built-ins will first check if the module is installed locally, then fallback on an empty shim. For example, if you install path for use in the browser, this can be used, otherwise, the module will automatically be skipped.
Environment settings
These environment variables will not be defined in test environments.
Expo's Metro config injects build settings that can be used in the client bundle via environment variables. All variables will be inlined and cannot be used dynamically. For example, process.env["EXPO_BASE_URL"] won't work.
•	process.env.EXPO_BASE_URL exposes the base URL defined in experiments.baseUrl. This is used in Expo Router to respect the production base URL for deployment.
Bundle splitting
Expo CLI automatically splits web bundles into multiple chunks based on async imports in production. This feature requires @expo/metro-runtime to be installed and imported somewhere in the entry bundle (available by default in Expo Router).
Shared dependencies of async bundles are merged into a single chunk to reduce the number of requests. For example, if you have two async bundles that import lodash, then the library is merged into a single initial chunk.
The chunk splitting heuristic cannot be customized. For example:
math.js
index.js
math.js
Copy
export function add(a, b) {
  return a + b;
}
index.js
Copy
import '@expo/metro-runtime';

// This will be split into a separate chunk.
import('./math').then(math => {
  console.log(math.add(1, 2));
});
When you run npx expo export -p web, the bundles are split into multiple files, and the entry bundle is added to the main HTML file. @expo/metro-runtime adds the runtime code that loads and evaluates the async bundles.
Source map debug ID
If a bundle is exported with an external source map, a Debug ID annotation will be added to the end of the file, along with a matching debugId in the source map for corresponding the files together. If no source maps are exported, or inline source maps are used then this annotation will not be added.
// <all source code>

//# debugId=<deterministic chunk hash>
The associated *.js.map or *.hbc.map source map will be a JSON file containing an equivalent debugId property. The debugId will be injected before hermes bytecode generation to ensure matching in all cases.
The debugId is a deterministic hash of the bundle's contents without the external bundle splitting references. This is the same value used to create a chunks filename but formatted as a UUID. For example, 431b98e2-c997-4975-a3d9-2987710abd44.
@expo/metro-config injects debugId during npx expo export and npx expo export:embed. Any additional optimization steps in npx expo export:embed like Hermes bytecode generation will need to have the debugId injected manually.
Metro require runtime
You can optionally enable a custom Metro require implementation with the environment variable EXPO_USE_METRO_REQUIRE=1. This runtime has the following features:
•	String module IDs that are human-readable and make missing module errors easier to follow.
•	Deterministic IDs that are the same between runs and across modules (required for React Server Components in development).
•	Removed support for legacy RAM bundles.
Magic import comments
Available from SDK 52 on all platforms.
Server environments such as Workers, and Node.js support import arbitrary files at runtime, so you may want to keep import syntax in-tact instead of using Metro's require system. You can opt-out dynamic imports with the /* @metro-ignore */ comment in import() statements.
// Manually ensure `./my-module.js` is included in the correct spot relative to the module.
const myModule = await import(/* @metro-ignore */ './my-module.js');
Expo CLI will skip the ./my-module.js dependency and assume that the developer has manually added it to the output bundle. Internally, this is used for exporting custom server code that dynamically switches between files based on the request. Avoid using this syntax for native bundles since import() is generally not available in React Native with Hermes enabled.
Many React libraries shipped the Webpack /* webpackIgnore: true */ comment to achieve similar behavior. To bridge the gap, we've also added support for Webpack's comment but recommend using the Metro equivalent in your app.
ES Module resolution
This sections applies from SDK 53 on all platforms.
Metro resolves ES Module import and CommonJS require with separate resolution strategies.
Previously, Metro applied the classic Node.js module resolution strategy (which matches Node.js versions before v12), with some additions to support ES Modules. In this resolution strategy, Metro resolves modules from node_modules, JS files, optionally while omitting extensions, such as .js, and uses package.json fields such as main, module, and react-native.
Now, with the modern ES Modules resolution strategy, Metro instead resolves modules from node_modules, then matches different package.json fields, such as exports, a nested map of sub-paths a package exposes, and main.
Depending on how a package is imported, one of these two resolution strategies will be used. Typically, a file that is imported with import from a Node module (rather than require), will use the ES Modules resolution strategy, and fall back on regular classic Node.js resolution. A file that wasn't resolved with ES Modules resolution or has been imported with CommonJS require will use the classic resolution strategy.
package.json:exports
When performing ES Modules resolution, Metro will look at the package.json:exports conditions map. This is a mapping of import subpaths and conditions to files in the Node module package.
For example, a package that always exposes an index.js file, and matches Metro's classic CommonJS module resolution, may specify a map with the default condition.
{
  "exports": {
    "default": "./index.js"
  }
}
However, a package providing both a CommonJS and ES Modules entrypoint may provide a mapping with the import and require conditions.
{
  "exports": {
    "import": "./index.mjs",
    "require": "./index.cjs"
  }
}
By default, Metro will match different conditions depending on the platform and whether the resolution has started from a CommonJS require call, or an ES Modules import statement and will change the condition accordingly.
For native platforms, the condition react-native is added, for web exports, the browser condition is added, and for server exports (such as API routes or React Server functions), the node, react-server, and workerd conditions are added. These conditions aren't matched in the order they're defined in. Instead, they're matched against the order of properties in the package.json:exports map.
TypeScript performs ES Module resolution separately from Metro and will also respect package.json:exports maps, when its compilerOptions.moduleResolution configuration option has either been set to "bundler" (which matches Metro's behaviour more closely) or to "node16" / "nodenext". TypeScript will however also match the types condition. As such, types may not resolve properly when a package doesn't put the types condition first in its exports map.
Since an exports map may contain subpaths, a package import may not have to match a file in the package's modules folder any longer, but may be a "redirected" import. Importing 'package/submodule' may match a different file than node_modules/package/submodule.js if it's specified in package.json:exports.
{
  "exports": {
    ".": "./index.js",
    "./submodule": "./submodule/submodule.js"
  }
}
If you're encountering packages that are incompatible or unprepared for the new ES Modules resolution strategy, you may be able to resolve problems by patching its package.json file and add or correct its package.json:exports conditions map. However, it's also possible to prevent Metro from using package.json:exports maps in its resolution by disabling the unstable_enablePackageExports option.
metro.config.js
Copy
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.unstable_enablePackageExports = false;

module.exports = config;
Asset imports
When assets are imported, a virtual module is created to represent the data required for importing the asset.
On native platforms, an asset will be a numeric ID: 1, 2, 3, and so on, which can be looked up using require("@react-native/assets-registry/registry").getAssetByID(<NUMBER>). On web and server platforms, the asset will change depending on the file type. If the file is an image, then the asset will be { uri: string, width?: number, height?: number }, otherwise the asset will be a string representing the remote URL for the asset.
The assets can be used as follows:
import { Image } from 'react-native';

import asset from './img.png';

function Demo() {
  return <Image source={asset} />;
}
In API routes, you can always assume the type of the asset will not be a number:
import asset from './img.png';

export async function GET(req: Request) {
  const ImageData = await fetch(
    new URL(
      // Access the asset URI.
      asset.uri,
      // Append to the current request URL origin.
      req.url
    )
  ).then(res => res.arrayBuffer());

  return new Response(ImageData, {
    headers: {
      'Content-Type': 'image/png',
    },
  });
}
Show More
Web workers
This feature is experimental and subject to breaking changes.
new Worker(new URL('./worker', window.location.href));
Expo Metro has experimental web worker support in SDK 53 and above. This feature is currently web-only and does not work on native, usage on native will trigger an error "Property 'Worker' doesn't exist".
Web workers can be used to offload work to a separate thread on web, allowing the main thread to remain responsive. This is useful for computationally expensive tasks, such as image processing, cryptography, or other tasks that would otherwise block the main thread.
Workers can be generated inline using Blob, but sometimes you may want to leverage modern features like TypeScript or importing other modules.
Web workers depend on Expo bundle splitting support, which means you need to either use Expo Router or install and import @expo/metro-runtime. You also cannot use the environment EXPO_NO_METRO_LAZY=1 with web workers.
Consider the following example of a worker that doubles a number:
worker.ts
Copy
self.onmessage = ({ data }) => {
  const result = data * 2; // Example: double the number
  self.postMessage(result);
};
This worker file can be imported as a Worker in the main app:
// worker is of type `Worker`
const worker = new Worker(new URL('./worker', window.location.href));

worker.onmessage = ({ data }) => {
  console.log(`Worker responded: ${data}`);
};

worker.postMessage(5);
Behind the scenes, Expo CLI is generating code like this:
const worker = new Worker(
  new URL('/worker.bundle?platform=web&dev=true&etc', window.location.href)
);
The generated bundle URL changes based on development/production to ensure the worker is loaded and bundled correctly. Unlike traditional bundle splitting, a worker file needs to contain its own copy of all modules and cannot depend on common modules in the main bundle.
The native API Worker is traditionally unavailable in React Native and not provided by the Expo SDK, so even though this bundling feature technically works for all platforms, it's only useful on web. You could theoretically write a native Expo module that polyfills the Worker API if you want to support native platforms too. Alternatively, you can use the "worklet" API in React Native Reanimated to offload work to a separate thread on native.
Alternatively, you can import Workers using the public path by first putting a transformed JS file in the public directory, then referencing it in the worker import with a variable:
// Will avoid the transform and use the public path directly.
const worker = new Worker('/worker.js');

// The variable breaks the transform causing the literal path to be used instead of the transformed path.
const path = '/worker.js';

const anotherWorker = new Worker(new URL(path, window.location.href));
Using a variable in the Worker constructor is not supported for bundling. To inspect the internal URL, you may use the internal syntax require.unstable_resolveWorker('./path/to/worker.js') to get the URL fragment.
Bare workflow setup
This guide is versioned and will need to be revisited when upgrading/downgrading Expo. Alternatively, use Expo Prebuild for fully automated setup.
Projects that don't use Expo Prebuild must configure native files to ensure the Expo Metro config is always used to bundle the project.
These modifications are meant to replace npx react-native bundle and npx react-native start with npx expo export:embed and npx expo start respectively.
metro.config.js
Ensure the metro.config.js extends expo/metro-config:
metro.config.js
Copy
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

module.exports = config;
android/app/build.gradle
The Android app/build.gradle must be configured to use Expo CLI for production bundling. Modify the react config object:
android/app/build.gradle
Copy
react {
  ...
+     // Use Expo CLI to bundle the app, this ensures the Metro config
+     // works correctly with Expo projects.
+     cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
+     bundleCommand = "export:embed"
}
ios/<Project>.xcodeproj/project.pbxproj
In your ios/<Project>.xcodeproj/project.pbxproj file, replace the following scripts:
"Start Packager" script
Remove the "Start Packager" script. The dev server must be started with npx expo before/after running the app.
Start Packager
Copy
-    FD10A7F022414F080027D42C /* Start Packager */ = {
-			isa = PBXShellScriptBuildPhase;
-			alwaysOutOfDate = 1;
-			buildActionMask = 2147483647;
-			files = (
-			);
-			inputFileListPaths = (
-			);
-			inputPaths = (
-			);
-			name = "Start Packager";
-			outputFileListPaths = (
-			);
-			outputPaths = (
-			);
-			runOnlyForDeploymentPostprocessing = 0;
-			shellPath = /bin/sh;
-			shellScript = "if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.updates\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.updates\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\nexport RCT_METRO_PORT=\"${RCT_METRO_PORT:=8081}\"\necho \"export RCT_METRO_PORT=${RCT_METRO_PORT}\" > `$NODE_BINARY --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/.packager.env'\"`\nif [ -z \"${RCT_NO_LAUNCH_PACKAGER+xxx}\" ] ; then\n  if nc -w 5 -z localhost ${RCT_METRO_PORT} ; then\n    if ! curl -s \"http://localhost:${RCT_METRO_PORT}/status\" | grep -q \"packager-status:running\" ; then\n      echo \"Port ${RCT_METRO_PORT} already in use, packager is either not running or not running correctly\"\n      exit 2\n    fi\n  else\n    open `$NODE_BINARY --print \"require('path').dirname(require.resolve('expo/package.json')) + '/scripts/launchPackager.command'\"` || echo \"Can't start packager automatically\"\n  fi\nfi\n";
-			showEnvVarsInLog = 0;
-		};
Show More
"Bundle React Native code and images" script
Bundle React Native code and images
Copy
+			shellScript = "if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/..\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\nif [[ -z \"$ENTRY_FILE\" ]]; then\n  # Set the entry JS file using the bundler's entry resolution.\n  export ENTRY_FILE=\"$(\"$NODE_BINARY\" -e \"require('expo/scripts/resolveAppEntry')\" \"$PROJECT_ROOT\" ios absolute | tail -n 1)\"\nfi\n\nif [[ -z \"$CLI_PATH\" ]]; then\n  # Use Expo CLI\n  export CLI_PATH=\"$(\"$NODE_BINARY\" --print \"require.resolve('@expo/cli')\")\"\nfi\nif [[ -z \"$BUNDLE_COMMAND\" ]]; then\n  # Default Expo CLI command for bundling\n  export BUNDLE_COMMAND=\"export:embed\"\nfi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n\n";
Alternatively, in the Xcode project, select the "Bundle React Native code and images" build phase and add the following modifications:
Bundle React Native code and images
Copy
if [[ -f "$PODS_ROOT/../.xcode.env" ]]; then
  source "$PODS_ROOT/../.xcode.env"
fi
if [[ -f "$PODS_ROOT/../.xcode.env.local" ]]; then
  source "$PODS_ROOT/../.xcode.env.local"
fi

# The project root by default is one level up from the ios directory
export PROJECT_ROOT="$PROJECT_DIR"/..

if [[ "$CONFIGURATION" = *Debug* ]]; then
  export SKIP_BUNDLING=1
fi
+ if [[ -z "$ENTRY_FILE" ]]; then
+   # Set the entry JS file using the bundler's entry resolution.
+   export ENTRY_FILE="$("$NODE_BINARY" -e "require('expo/scripts/resolveAppEntry')" "$PROJECT_ROOT" ios absolute | tail -n 1)"
+ fi

+ if [[ -z "$CLI_PATH" ]]; then
+   # Use Expo CLI
+   export CLI_PATH="$("$NODE_BINARY" --print "require.resolve('@expo/cli')")"
+ fi
+ if [[ -z "$BUNDLE_COMMAND" ]]; then
+   # Default Expo CLI command for bundling
+   export BUNDLE_COMMAND="export:embed"
+ fi

`"$NODE_BINARY" --print "require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'"`
Show More
You can set CLI_PATH, BUNDLE_COMMAND, and ENTRY_FILE environment variables to overwrite these defaults.
Custom entry file
By default, React Native only supports using a root index.js file as the entry file (or platform-specific variation like index.ios.js). Expo projects allow using any entry file, but this requires addition bare setup.
Development
Development mode entry files can be enabled by using the expo-dev-client package. Alternatively you can add the following configuration:
ios/<Project>/AppDelegate.mm
Copy
- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge
{
#if DEBUG
-  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index"];
+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@".expo/.virtual-metro-entry"];
#else
  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
#endif
}
android/app/src/main/java/<Project>/MainApplication.java
Copy
@Override
protected String getJSMainModuleName() {
-  return "index";
+  return ".expo/.virtual-metro-entry";
}
Production
In your ios/<Project>.xcodeproj/project.pbxproj file, replace the "Bundle React Native code and images" script to set $ENTRY_FILE according using Metro:
ios/<Project>/project.pbxproj
Copy
+			shellScript = "if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/..\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\nif [[ -z \"$ENTRY_FILE\" ]]; then\n  # Set the entry JS file using the bundler's entry resolution.\n  export ENTRY_FILE=\"$(\"$NODE_BINARY\" -e \"require('expo/scripts/resolveAppEntry')\" \"$PROJECT_ROOT\" ios absolute | tail -n 1)\"\nfi\n\nif [[ -z \"$CLI_PATH\" ]]; then\n  # Use Expo CLI\n  export CLI_PATH=\"$(\"$NODE_BINARY\" --print \"require.resolve('@expo/cli')\")\"\nfi\nif [[ -z \"$BUNDLE_COMMAND\" ]]; then\n  # Default Expo CLI command for bundling\n  export BUNDLE_COMMAND=\"export:embed\"\nfi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n\n";
The Android app/build.gradle must be configured to use Metro module resolution to find the root entry file. Modify the react config object:
app/build.gradle
Copy
+ def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
+    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
}
#4

package.json

Edit this page

A reference for Expo-specific properties that can be used in the package.json file.
________________________________________
package.json is a JSON file that contains the metadata for a JavaScript project. This is a reference to Expo-specific properties that can be used in the package.json file.
install.exclude
The following commands perform a version check for the libraries installed in a project and give a warning when a library's version is different from the version recommended by Expo:
•	npx expo start and npx expo-doctor
•	npx expo install (when installing a new version of that library or using --check or --fix options)
By specifying the library under the install.exclude array in the package.json file, you can exclude it from the version checks:
package.json
Copy
{
  "expo": {
    "install": {
      "exclude": ["expo-updates", "expo-splash-screen"]
    }
  }
}
autolinking
Allows configuring module resolution behavior by using autolinking property in package.json.
For complete reference, see Autolinking configuration.
doctor
Allows configuring the behavior of the npx expo-doctor command.
reactNativeDirectoryCheck
By default, Expo Doctor validates your project's packages against the React Native directory. This check throws a warning with a list of packages that are not included in the React Native Directory.
You can customize this check by adding the following configuration in your project's package.json file:
package.json
Copy
{
  "expo": {
    "doctor": {
      "reactNativeDirectoryCheck": {
        "enabled": true,
        "exclude": ["/foo/", "bar"],
        "listUnknownPackages": true
      }
    }
  }
}
By default, the check is enabled and unknown packages are listed.
appConfigFieldsNotSyncedCheck
Expo Doctor checks if your project includes native project directories such as android or ios. If these directories exist but are not listed in your .gitignore or .easignore files, Expo Doctor verifies the presence of an app config file. If this file exists, it means your project is configured to use Prebuild.
When the android or ios directories are present, EAS Build does not sync app config properties to the native projects. Expo Doctor throws a warning if these conditions are true.
You can disable or enable this check by adding the following configuration to your project's package.json file:
package.json
Copy
{
  "expo": {
    "doctor": {
      "appConfigFieldsNotSyncedCheck": {
        "enabled": false
      }
    }
  }
}

#5

Expo

GitHub

npm

Set of common methods and types for Expo and related packages.
Android
iOS
tvOS
Web
________________________________________
Installation
Terminal
Copy
- npx expo install expo
API
import * as Expo from 'expo';
expo/fetch API
expo/fetch provides a WinterCG-compliant Fetch API that works consistently across web and mobile environments, ensuring a standardized and cross-platform fetch experience within Expo applications.
Streaming fetch
Copy
import { fetch } from 'expo/fetch';

const resp = await fetch('https://httpbin.org/drip?numbytes=512&duration=2', {
  headers: { Accept: 'text/event-stream' },
});
const reader = resp.body.getReader();
const chunks = [];
while (true) {
  const { done, value } = await reader.read();
  if (done) {
    break;
  }
  chunks.push(value);
}
const buffer = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));
console.log(buffer.length); // 512
Encoding APIs
TextEncoder and TextDecoder are built-in APIs that provide a way to encode and decode text in various character encodings. They are available on all platforms. Refer to the browser and server runtime support for web and Node.js.
TextEncoder and TextDecoder
Copy
// [104, 101, 108, 108, 111]
const hello = new TextEncoder().encode('hello');

// "hello"
const text = new TextDecoder().decode(hello);
The TextEncoder API is included in the Hermes engine. See the source code in TextEncoder.cpp inside the Hermes GitHub repository.
The TextDecoder API is not spec-compliant on native platforms. Only the UTF-8 encoding is supported. If you need support for more encodings, use a polyfill like text-encoding.
Streams API
Global support for standard web streams is available on native platforms to match the behavior of web and server platforms. Refer to the browser and server runtime support for specific web and Node.js support. EAS Hosting server runtime also includes support for the standard web streams API.
Globally access ReadableStream, WritableStream, and TransformStream classes.
ReadableStream
Copy
const stream = new ReadableStream({
  start(controller) {
    controller.enqueue('Hello');
    controller.enqueue('World');
    controller.close();
  },
});
const reader = stream.getReader();
reader.read().then(({ done, value }) => {
  console.log(value); // Hello
});
reader.read().then(({ done, value }) => {
  console.log(value); // World
});
URL API
URL provides the standard API on all platforms.
On native platforms, built-in URL and URLSearchParams implementations replace the shims in react-native. Refer to the browser and server runtime support for web and Node.js.
URL and URLSearchParams
Copy
const url = new URL('https://expo.dev');

const params = new URLSearchParams();
Expo's built-in URL support attempts to be fully spec compliant. The only missing exception is that native platforms do not currently support non-ASCII characters in the hostname.
Non-ASCII characters
Copy
console.log(new URL('http://🥓').toString());

// This outputs the following:
// - Web, Node.js: http://xn--pr9h/
// - Android, iOS: http://🥓/
Constants
SharedRef
Type: SharedRefType
Hooks
useEvent(eventEmitter, eventName, initialValue)
Parameter	Type	Description
eventEmitter	EventEmitter<TEventsMap>
An object that emits events. For example, a native module or shared object or an instance of EventEmitter.

eventName	TEventName	Name of the event to listen to.
initialValue(optional)	null | TInitialValue	An event parameter to use until the event is called for the first time.
Default:null

React hook that listens to events emitted by the given object. The returned value is an event parameter that gets updated whenever a new event is dispatched.
Returns:
InferEventParameter<TEventListener, TInitialValue>
A parameter of the event listener.
Example
import { useEvent } from 'expo';
import { VideoPlayer } from 'expo-video';

export function PlayerStatus({ videoPlayer }: { videoPlayer: VideoPlayer }) {
  const { status } = useEvent(videoPlayer, 'statusChange', { status: videoPlayer.status });

  return <Text>{`Player status: ${status}`}</Text>;
}
useEventListener(eventEmitter, eventName, listener)
Parameter	Type	Description
eventEmitter	EventEmitter<TEventsMap>
An object that emits events. For example, a native module or shared object or an instance of EventEmitter.

eventName	TEventName	Name of the event to listen to.
listener	TEventListener	A function to call when the event is dispatched.

React hook that listens to events emitted by the given object and calls the listener function whenever a new event is dispatched. The event listener is automatically added during the first render and removed when the component unmounts.
Returns:
void
Example
import { useEventListener } from 'expo';
import { useVideoPlayer, VideoView } from 'expo-video';

export function VideoPlayerView() {
  const player = useVideoPlayer(videoSource);

  useEventListener(player, 'playingChange', ({ isPlaying }) => {
    console.log('Player is playing:', isPlaying);
  });

  return <VideoView player={player} />;
}
Classes
EventEmitterType
A class that provides a consistent API for emitting and listening to events. It shares many concepts with other emitter APIs, such as Node's EventEmitter and fbemitter. When the event is emitted, all of the functions attached to that specific event are called synchronously. Any values returned by the called listeners are ignored and discarded. Its implementation is written in C++ and common for all the platforms.
EventEmitterType Methods
addListener(eventName, listener)
Parameter	Type
eventName	EventName
listener	TEventsMap[EventName]

Adds a listener for the given event name.
Returns:
EventSubscription
emit(eventName, ...args)
Parameter	Type
eventName	EventName
...args	Parameters<TEventsMap[EventName]>

Synchronously calls all the listeners attached to that specific event. The event can include any number of arguments that will be passed to the listeners.
Returns:
void
listenerCount(eventName)
Parameter	Type
eventName	EventName

Returns a number of listeners added to the given event.
Returns:
number
removeAllListeners(eventName)
Parameter	Type
eventName	keyof TEventsMap

Removes all listeners for the given event name.
Returns:
void
removeListener(eventName, listener)
Parameter	Type
eventName	EventName
listener	TEventsMap[EventName]

Removes a listener for the given event name.
Returns:
void
startObserving(eventName)
Parameter	Type
eventName	EventName

Function that is automatically invoked when the first listener for an event with the given name is added. Override it in a subclass to perform some additional setup once the event started being observed.
Returns:
void
stopObserving(eventName)
Parameter	Type
eventName	EventName

Function that is automatically invoked when the last listener for an event with the given name is removed. Override it in a subclass to perform some additional cleanup once the event is no longer observed.
Returns:
void
NativeModuleType
Type: Class extends EventEmitter<TEventsMap>
A class for all native modules. Extends the EventEmitter class.
SharedObjectType
Type: Class extends EventEmitter<TEventsMap> implements EventEmitter<TEventsMap>
Base class for all shared objects that extends the EventEmitter class. The implementation is written in C++, installed through JSI and common for mobile platforms.
SharedObjectType Methods
release()
A function that detaches the JS and native objects to let the native object deallocate before the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native functions of the object will throw an error as it is no longer associated with its native counterpart.
In most cases, you should never need to use this function, except some specific performance-critical cases when manual memory management makes sense and the native object is known to exclusively retain some native memory (such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use this object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase, for example: useVideoPlayer() from expo-video and useImage() from expo-image.
Returns:
void
SharedRefType
Type: Class extends SharedObject<TEventsMap> implements SharedObject<TEventsMap>
A SharedObject that holds a reference to any native object. Allows passing references to native instances among different independent libraries.
For instance, ImageRef from expo-image references a Drawable on Android and an UIImage on iOS. Since both types are common on these platforms, different native modules can use them without depending on each other. In particular, this enables the expo-image-manipulator to pass the resulted image directly to the image view from expo-image without any additional writes and reads from the file system.
SharedRefType Properties
nativeRefType
Type: string
The type of the native reference.
Methods
isRunningInExpoGo()
Returns a boolean value whether the app is running in Expo Go.
Returns:
boolean
registerRootComponent(component)
Parameter	Type	Description
component	ComponentType<P>	The React component class that renders the rest of your app.

Sets the initial React component to render natively in the app's root React Native view on Android, iOS, tvOS and the web.
This method does the following:
•	Invokes React Native's AppRegistry.registerComponent.
•	Invokes React Native web's AppRegistry.runApplication on web to render to the root index.html file.
•	Polyfills the process.nextTick function globally.
This method also adds the following dev-only features that are removed in production bundles.
•	Adds the Fast Refresh and bundle splitting indicator to the app.
•	Asserts if the expo-updates package is misconfigured.
•	Asserts if react-native is not aliased to react-native-web when running in the browser.
Returns:
void
See: For information on how to setup registerRootComponent in an existing (bare) React Native app, see Common questions below.
registerWebModule(moduleImplementation, moduleName)
Parameter	Type	Description
moduleImplementation	ModuleType	A class that extends NativeModule. The class is registered under globalThis.expo.modules[className].
moduleName	string	– a name to register the module under globalThis.expo.modules[className].

Registers a web module.
Returns:
ModuleType
A singleton instance of the class passed into arguments.
reloadAppAsync(reason)
Parameter	Type	Description
reason(optional)	string	The reason for reloading the app. This is used only for some platforms.

Reloads the app. This method works for both release and debug builds.
Unlike Updates.reloadAsync(), this function does not use a new update even if one is available. It only reloads the app using the same JavaScript bundle that is currently running.
Returns:
Promise<void>
requireNativeModule(moduleName)
Parameter	Type	Description
moduleName	string	Name of the requested native module.

Imports the native module registered with given name. In the first place it tries to load the module installed through the JSI host object and then falls back to the bridge proxy module. Notice that the modules loaded from the proxy may not support some features like synchronous functions.
Returns:
ModuleType
Object representing the native module.
requireNativeView(moduleName, viewName)
Parameter	Type
moduleName	string
viewName(optional)	string

A drop-in replacement for requireNativeComponent.
Returns:
React.ComponentType<P>
requireOptionalNativeModule(moduleName)
Parameter	Type	Description
moduleName	string	Name of the requested native module.

Imports the native module registered with the given name. The same as requireNativeModule, but returns null when the module cannot be found instead of throwing an error.
Returns:
ModuleType | null
Object representing the native module or null when it cannot be found.
Event Subscriptions
useEventListener(eventEmitter, eventName, listener)
Parameter	Type	Description
eventEmitter	EventEmitter<TEventsMap>
An object that emits events. For example, a native module or shared object or an instance of EventEmitter.

eventName	TEventName	Name of the event to listen to.
listener	TEventListener	A function to call when the event is dispatched.

React hook that listens to events emitted by the given object and calls the listener function whenever a new event is dispatched. The event listener is automatically added during the first render and removed when the component unmounts.
Returns:
void
Example
import { useEventListener } from 'expo';
import { useVideoPlayer, VideoView } from 'expo-video';

export function VideoPlayerView() {
  const player = useVideoPlayer(videoSource);

  useEventListener(player, 'playingChange', ({ isPlaying }) => {
    console.log('Player is playing:', isPlaying);
  });

  return <VideoView player={player} />;
}
Common questions
Some common questions about using the expo package in your project.
rootRegisterComponent setup for existing React Native projects
What if I want to name my main app file something other than App.js or app/_layout.tsx?



#6

Expo Accelerometer

GitHub

npm

A library that provides access to the device's accelerometer sensor.
Android
iOS (device only)
Web
Bundled version:
~14.1.4
________________________________________
Accelerometer from expo-sensors provides access to the device accelerometer sensor(s) and associated listeners to respond to changes in acceleration in three-dimensional space, meaning any movement or vibration.
Installation
Terminal
Copy
- npx expo install expo-sensors
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Basic Accelerometer usage
Copy
Open in Snack
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Accelerometer } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Accelerometer.setUpdateInterval(1000);
  const _fast = () => Accelerometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(Accelerometer.addListener(setData));
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});
Show More
API
import { Accelerometer } from 'expo-sensors';
Classes
Accelerometer
Type: Class extends DeviceSensor<AccelerometerMeasurement>
A base class for subscribable sensors. The events emitted by this class are measurements specified by the parameter type Measurement.
Accelerometer Methods
addListener(listener)
Parameter	Type	Description
listener	Listener<AccelerometerMeasurement>
A callback that is invoked when an accelerometer update is available. When invoked, the listener is provided a single argument that is an AccelerometerMeasurement object.

Subscribe for updates to the accelerometer.
Returns:
EventSubscription
A subscription that you can call remove() on when you would like to unsubscribe the listener.
getListenerCount()
Returns the registered listeners count.
Returns:
number
getPermissionsAsync()
Checks user's permissions for accessing sensor.
Returns:
Promise<PermissionResponse>
hasListeners()
Returns boolean which signifies if sensor has any listeners registered.
Returns:
boolean
isAvailableAsync()
You should always check the sensor availability before attempting to use it.
Returns whether the accelerometer is enabled on the device.
On mobile web, you must first invoke Accelerometer.requestPermissionsAsync() in a user interaction (i.e. touch event) before you can use this module. If the status is not equal to granted then you should inform the end user that they may have to open settings.
On web this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the device orientation API disabled in Settings > Safari > Motion & Orientation Access. Some devices will also not fire if the site isn't hosted with HTTPS as DeviceMotion is now considered a secure API. There is no formal API for detecting the status of DeviceMotion so this API can sometimes be unreliable on web.
Returns:
Promise<boolean>
A promise that resolves to a boolean denoting the availability of the accelerometer.
removeAllListeners()
Removes all registered listeners.
Returns:
void
removeSubscription(subscription)
Parameter	Type	Description
subscription	EventSubscription	A subscription to remove.

Removes the given subscription.
Returns:
void
requestPermissionsAsync()
Asks the user to grant permissions for accessing sensor.
Returns:
Promise<PermissionResponse>
setUpdateInterval(intervalMs)
Parameter	Type	Description
intervalMs	number	Desired interval in milliseconds between sensor updates.
Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.
If you need an update interval less than 200ms, you should:
•	add android.permission.HIGH_SAMPLING_RATE_SENSORS to app.json permissions field
•	or if you are using bare workflow, add <uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS"/> to AndroidManifest.xml.

Set the sensor update interval.
Returns:
void
Interfaces
Subscription
A subscription object that allows to conveniently remove an event listener from the emitter.
Subscription Methods
remove()
Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.
Returns:
void
Types
AccelerometerMeasurement
Each of these keys represents the acceleration along that particular axis in g-force (measured in gs).
A g is a unit of gravitational force equal to that exerted by the earth’s gravitational field (9.81 m/s^2).
Property	Type	Description
timestamp	number	Timestamp of the measurement in seconds.
x	number	Value of gs device reported in X axis.
y	number	Value of gs device reported in Y axis.
z	number	Value of gs device reported in Z axis.
PermissionExpiration
Literal Type: union
Permission expiration time. Currently, all permissions are granted permanently.
Acceptable values are: 'never' | number
PermissionResponse
An object obtained by permissions get and request functions.
Property	Type	Description
canAskAgain	boolean	Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.
expires	PermissionExpiration
Determines time when the permission expires.
granted	boolean	A convenience boolean that indicates if the permission is granted.
status	PermissionStatus
Determines the status of the permission.
Enums
PermissionStatus
DENIED
PermissionStatus.DENIED ＝ "denied"
User has denied the permission.
GRANTED
PermissionStatus.GRANTED ＝ "granted"
User has granted the permission.
UNDETERMINED
PermissionStatus.UNDETERMINED ＝ "undetermined"
User hasn't granted or denied the permission yet.

#7

Expo AppleAuthentication

GitHub

npm

A library that provides Sign-in with Apple capability for iOS.
iOS
tvOS
Bundled version:
~7.2.4
________________________________________
expo-apple-authentication provides Apple authentication for iOS. It does not yet support Android or web.
Any app that includes third-party authentication options must provide Apple authentication as an option to comply with App Store Review guidelines. For more information, see Apple authentication on the Sign In with Apple website.
Installation
Terminal
Copy
- npx expo install expo-apple-authentication
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration in app config
You can configure expo-apple-authentication using its built-in config plugin if you use config plugins in your project (EAS Build or npx expo run:[android|ios]). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect. If your app does not use EAS Build, then you'll need to manually configure the package.
Setup iOS project
To enable the Sign In with Apple capability in your app, set the ios.usesAppleSignIn property to true in your project's app config:
app.json
Copy
{
  "expo": {
    "ios": {
      "usesAppleSignIn": true
    }
  }
}
Example app.json with config plugin
Running EAS Build locally will use iOS capabilities signing to enable the required capabilities before building.
app.json
Copy
{
  "expo": {
    "plugins": ["expo-apple-authentication"]
  }
}
Are you using this library in an existing React Native app?
Usage
Apple Authentication Usage
Copy
Open in Snack
import * as AppleAuthentication from 'expo-apple-authentication';
import { View, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <AppleAuthentication.AppleAuthenticationButton
        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
        cornerRadius={5}
        style={styles.button}
        onPress={async () => {
          try {
            const credential = await AppleAuthentication.signInAsync({
              requestedScopes: [
                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
                AppleAuthentication.AppleAuthenticationScope.EMAIL,
              ],
            });
            // signed in
          } catch (e) {
            if (e.code === 'ERR_REQUEST_CANCELED') {
              // handle that the user canceled the sign-in flow
            } else {
              // handle other errors
            }
          }
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  button: {
    width: 200,
    height: 44,
  },
});
Show More
Development and testing
You can test this library in Expo Go on iOS without following any of the instructions above. However, you'll need to add the config plugin to use this library if you are using EAS Build. When you sign into Expo Go, the identifiers and values you receive will likely be different than what you'll receive in standalone apps.
You can do limited testing of this library on the iOS Simulator. However, not all methods will behave the same as on a device, so we highly recommend testing on a real device when possible while developing.
Verifying the Response from Apple
Apple's response includes a signed JWT with information about the user. To ensure that the response came from Apple, you can cryptographically verify the signature with Apple's public key, which is published at https://appleid.apple.com/auth/keys. This process is not specific to Expo.
API
import * as AppleAuthentication from 'expo-apple-authentication';
Component
AppleAuthenticationButton
Type: React.Element<AppleAuthenticationButtonProps>
This component displays the proprietary "Sign In with Apple" / "Continue with Apple" button on your screen. The App Store Guidelines require you to use this component to start the authentication process instead of a custom button. Limited customization of the button is available via the provided properties.
You should only attempt to render this if AppleAuthentication.isAvailableAsync() resolves to true. This component will render nothing if it is not available, and you will get a warning in development mode (__DEV__ === true).
The properties of this component extend from View; however, you should not attempt to set backgroundColor or borderRadius with the style property. This will not work and is against the App Store Guidelines. Instead, you should use the buttonStyle property to choose one of the predefined color styles and the cornerRadius property to change the border radius of the button.
Make sure to attach height and width via the style props as without these styles, the button will not appear on the screen.
See: Apple Documentation for more details.
AppleAuthenticationButtonProps
buttonStyle
Type: AppleAuthenticationButtonStyle
The Apple-defined color scheme to use to display the button.
buttonType
Type: AppleAuthenticationButtonType
The type of button text to display ("Sign In with Apple" vs. "Continue with Apple").
cornerRadius
Optional • Type: number
The border radius to use when rendering the button. This works similarly to style.borderRadius in other Views.
onPress
Type: () => void
The method to call when the user presses the button. You should call AppleAuthentication.signInAsync in here.
style
Optional • Type: StyleProp<Omit<ViewStyle, 'backgroundColor' | 'borderRadius'>>
The custom style to apply to the button. Should not include backgroundColor or borderRadius properties.
Inherited Props
•	ViewProps
Methods
AppleAuthentication.formatFullName(fullName, formatStyle)
Parameter	Type	Description
fullName	AppleAuthenticationFullName
The full name object with the tokenized portions
formatStyle(optional)	AppleAuthenticationFullNameFormatStyle
The style in which the name should be formatted

Creates a locale-aware string representation of a person's name from an object representing the tokenized portions of a user's full name
Returns:
string
A locale-aware string representation of a person's name
AppleAuthentication.getCredentialStateAsync(user)
Parameter	Type	Description
user	string	The unique identifier for the user whose credential state you'd like to check. This should come from the user field of an AppleAuthenticationCredential object.


Queries the current state of a user credential, to determine if it is still valid or if it has been revoked.
Note: This method must be tested on a real device. On the iOS simulator it always throws an error.
Returns:
Promise<AppleAuthenticationCredentialState>
A promise that fulfills with an AppleAuthenticationCredentialState value depending on the state of the credential.
AppleAuthentication.isAvailableAsync()
Determine if the current device's operating system supports Apple authentication.
Returns:
Promise<boolean>
A promise that fulfills with true if the system supports Apple authentication, and false otherwise.
AppleAuthentication.refreshAsync(options)
Parameter	Type	Description
options	AppleAuthenticationRefreshOptions
An AppleAuthenticationRefreshOptions object


An operation that refreshes the logged-in user’s credentials. Calling this method will show the sign in modal before actually refreshing the user credentials.
Returns:
Promise<AppleAuthenticationCredential>
A promise that fulfills with an AppleAuthenticationCredential object after a successful authentication, and rejects with ERR_REQUEST_CANCELED if the user cancels the refresh operation.
AppleAuthentication.signInAsync(options)
Parameter	Type	Description
options(optional)	AppleAuthenticationSignInOptions
An optional AppleAuthenticationSignInOptions object


Sends a request to the operating system to initiate the Apple authentication flow, which will present a modal to the user over your app and allow them to sign in.
You can request access to the user's full name and email address in this method, which allows you to personalize your UI for signed in users. However, users can deny access to either or both of these options at runtime.
Additionally, you will only receive Apple Authentication Credentials the first time users sign into your app, so you must store it for later use. It's best to store this information either server-side, or using SecureStore, so that the data persists across app installs. You can use AppleAuthenticationCredential.user to identify the user, since this remains the same for apps released by the same developer.
Returns:
Promise<AppleAuthenticationCredential>
A promise that fulfills with an AppleAuthenticationCredential object after a successful authentication, and rejects with ERR_REQUEST_CANCELED if the user cancels the sign-in operation.
AppleAuthentication.signOutAsync(options)
Parameter	Type	Description
options	AppleAuthenticationSignOutOptions
An AppleAuthenticationSignOutOptions object


An operation that ends the authenticated session. Calling this method will show the sign in modal before actually signing the user out.
It is not recommended to use this method to sign out the user as it works counterintuitively. Instead of using this method it is recommended to simply clear all the user's data collected from using signInAsync or refreshAsync methods.
Returns:
Promise<AppleAuthenticationCredential>
A promise that fulfills with an AppleAuthenticationCredential object after a successful authentication, and rejects with ERR_REQUEST_CANCELED if the user cancels the sign-out operation.
Event Subscriptions
AppleAuthentication.addRevokeListener(listener)
Parameter	Type
listener	() => void

Returns:
EventSubscription
Interfaces
Subscription
A subscription object that allows to conveniently remove an event listener from the emitter.
Subscription Methods
remove()
Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.
Returns:
void
Types
AppleAuthenticationCredential
The object type returned from a successful call to AppleAuthentication.signInAsync(), AppleAuthentication.refreshAsync(), or AppleAuthentication.signOutAsync() which contains all of the pertinent user and credential information.
See: Apple Documentation for more details.
Property	Type	Description
authorizationCode	string | null	A short-lived session token used by your app for proof of authorization when interacting with the app's server counterpart. Unlike user, this is ephemeral and will change each session.
email	string | null	The user's email address. Might not be present if you didn't request the EMAIL scope. May also be null if this is not the first time the user has signed into your app. If the user chose to withhold their email address, this field will instead contain an obscured email address with an Apple domain.
fullName	AppleAuthenticationFullName | null
The user's name. May be null or contain null values if you didn't request the FULL_NAME scope, if the user denied access, or if this is not the first time the user has signed into your app.
identityToken	string | null	A JSON Web Token (JWT) that securely communicates information about the user to your app.
realUserStatus	AppleAuthenticationUserDetectionStatus
A value that indicates whether the user appears to the system to be a real person.
state	string | null	An arbitrary string that your app provided as state in the request that generated the credential. Used to verify that the response was from the request you made. Can be used to avoid replay attacks. If you did not provide state when making the sign-in request, this field will be null.
user	string	An identifier associated with the authenticated user. You can use this to check if the user is still authenticated later. This is stable and can be shared across apps released under the same development team. The same user will have a different identifier for apps released by other developers.
AppleAuthenticationFullName
An object representing the tokenized portions of the user's full name. Any of all of the fields may be null. Only applicable fields that the user has allowed your app to access will be nonnull.
Property	Type	Description
familyName	string | null	-
givenName	string | null	-
middleName	string | null	-
namePrefix	string | null	-
nameSuffix	string | null	-
nickname	string | null	-
AppleAuthenticationFullNameFormatStyle
Literal Type: string
A value to specify the style for formatting a name.
See: Apple Documentation for more details.
Acceptable values are: 'default' | 'short' | 'medium' | 'long' | 'abbreviated'
AppleAuthenticationRefreshOptions
The options you can supply when making a call to AppleAuthentication.refreshAsync(). You must include the ID string of the user whose credentials you'd like to refresh.
See: Apple Documentation for more details.
Property	Type	Description
requestedScopes(optional)	AppleAuthenticationScope[]
Array of user information scopes to which your app is requesting access. Note that the user can choose to deny your app access to any scope at the time of logging in. You will still need to handle null values for any scopes you request. Additionally, note that the requested scopes will only be provided to you the first time each user signs into your app; in subsequent requests they will be null. Defaults to [] (no scopes).
state(optional)	string	An arbitrary string that is returned unmodified in the corresponding credential after a successful authentication. This can be used to verify that the response was from the request you made and avoid replay attacks. More information on this property is available in the OAuth 2.0 protocol RFC6749.

user	string	-
AppleAuthenticationSignInOptions
The options you can supply when making a call to AppleAuthentication.signInAsync(). None of these options are required.
See: Apple Documentation for more details.
Property	Type	Description
nonce(optional)	string	An arbitrary string that is used to prevent replay attacks. See more information on this in the OpenID Connect specification.

requestedScopes(optional)	AppleAuthenticationScope[]
Array of user information scopes to which your app is requesting access. Note that the user can choose to deny your app access to any scope at the time of logging in. You will still need to handle null values for any scopes you request. Additionally, note that the requested scopes will only be provided to you the first time each user signs into your app; in subsequent requests they will be null. Defaults to [] (no scopes).
state(optional)	string	An arbitrary string that is returned unmodified in the corresponding credential after a successful authentication. This can be used to verify that the response was from the request you made and avoid replay attacks. More information on this property is available in the OAuth 2.0 protocol RFC6749.

AppleAuthenticationSignOutOptions
The options you can supply when making a call to AppleAuthentication.signOutAsync(). You must include the ID string of the user to sign out.
See: Apple Documentation for more details.
Property	Type	Description
state(optional)	string	An arbitrary string that is returned unmodified in the corresponding credential after a successful authentication. This can be used to verify that the response was from the request you made and avoid replay attacks. More information on this property is available in the OAuth 2.0 protocol RFC6749.

user	string	-
Enums
AppleAuthenticationButtonStyle
An enum whose values control which pre-defined color scheme to use when rendering an AppleAuthenticationButton.
WHITE
AppleAuthenticationButtonStyle.WHITE ＝ 0
White button with black text.
WHITE_OUTLINE
AppleAuthenticationButtonStyle.WHITE_OUTLINE ＝ 1
White button with a black outline and black text.
BLACK
AppleAuthenticationButtonStyle.BLACK ＝ 2
Black button with white text.
AppleAuthenticationButtonType
An enum whose values control which pre-defined text to use when rendering an AppleAuthenticationButton.
SIGN_IN
AppleAuthenticationButtonType.SIGN_IN ＝ 0
"Sign in with Apple"
CONTINUE
AppleAuthenticationButtonType.CONTINUE ＝ 1
"Continue with Apple"
SIGN_UP
Only for: 
iOS 13.2+


AppleAuthenticationButtonType.SIGN_UP ＝ 2
"Sign up with Apple"
AppleAuthenticationCredentialState
An enum whose values specify state of the credential when checked with AppleAuthentication.getCredentialStateAsync().
See: Apple Documentation for more details.
REVOKED
AppleAuthenticationCredentialState.REVOKED ＝ 0
AUTHORIZED
AppleAuthenticationCredentialState.AUTHORIZED ＝ 1
NOT_FOUND
AppleAuthenticationCredentialState.NOT_FOUND ＝ 2
TRANSFERRED
AppleAuthenticationCredentialState.TRANSFERRED ＝ 3
AppleAuthenticationOperation
IMPLICIT
AppleAuthenticationOperation.IMPLICIT ＝ 0
An operation that depends on the particular kind of credential provider.
LOGIN
AppleAuthenticationOperation.LOGIN ＝ 1
REFRESH
AppleAuthenticationOperation.REFRESH ＝ 2
LOGOUT
AppleAuthenticationOperation.LOGOUT ＝ 3
AppleAuthenticationScope
An enum whose values specify scopes you can request when calling AppleAuthentication.signInAsync().
Note that it is possible that you will not be granted all of the scopes which you request. You will still need to handle null values for any fields you request.
See: Apple Documentation for more details.
FULL_NAME
AppleAuthenticationScope.FULL_NAME ＝ 0
EMAIL
AppleAuthenticationScope.EMAIL ＝ 1
AppleAuthenticationUserDetectionStatus
An enum whose values specify the system's best guess for how likely the current user is a real person.
See: Apple Documentation for more details.
UNSUPPORTED
AppleAuthenticationUserDetectionStatus.UNSUPPORTED ＝ 0
The system does not support this determination and there is no data.
UNKNOWN
AppleAuthenticationUserDetectionStatus.UNKNOWN ＝ 1
The system has not determined whether the user might be a real person.
LIKELY_REAL
AppleAuthenticationUserDetectionStatus.LIKELY_REAL ＝ 2
The user appears to be a real person.
Error codes
Most of the error codes match the official Apple Authorization errors.
Code	Description
ERR_INVALID_OPERATION	An invalid authorization operation has been performed.
ERR_INVALID_RESPONSE	The authorization request received an invalid response.
ERR_INVALID_SCOPE	An invalid AppleAuthenticationScope was passed in.

ERR_REQUEST_CANCELED	The user canceled the authorization attempt.
ERR_REQUEST_FAILED	The authorization attempt failed. See the error message for additional information.
ERR_REQUEST_NOT_HANDLED	The authorization request wasn't correctly handled.
ERR_REQUEST_NOT_INTERACTIVE	The authorization request isn't interactive.
ERR_REQUEST_UNKNOWN	The authorization attempt failed for an unknown reason.

#8

Expo Application

GitHub

npm

A universal library that provides information about the native application's ID, app name, and build version at runtime.
Android
iOS
tvOS
Web
Bundled version:
~6.1.4
________________________________________
expo-application provides useful information about the native application's ID, app name, and build version at runtime.
Installation
Terminal
Copy
- npx expo install expo-application
If you are installing this in an existing React Native app, make sure to install expo in your project.
API
import * as Application from 'expo-application';
Constants
Application.applicationId
Type: string | null
The ID of the application. On Android, this is the application ID. On iOS, this is the bundle ID. On web, this is null.
Example
"com.cocoacasts.scribbles", "com.apple.Pages"
Application.applicationName
Type: string | null
The human-readable name of the application that is displayed with the app's icon on the device's home screen or desktop. On Android and iOS, this value is a string unless the name could not be retrieved, in which case this value will be null. On web this value is null.
Example
"Expo", "Yelp", "Instagram"
Application.nativeApplicationVersion
Type: string | null
The human-readable version of the native application that may be displayed in the app store. At time when native app is built, on Android, this is the version name set by version in app config, and on iOS, the Info.plist value for CFBundleShortVersionString. On web, this value is null.
Example
"2.11.0"
Application.nativeBuildVersion
Type: string | null
The internal build version of the native application that the app stores may use to distinguish between different binaries. At the time when native app is built, On Android, this is the version code set by android.versionCode in app config, and on iOS, the Info.plist value for CFBundleVersion (set with ios.buildNumber value in app config in a standalone app). On web, this value is null. The return type on Android and iOS is string.
Example
Android: "114", iOS: "2.11.0"
Methods
Application.getAndroidId()
Only for: 
Android


Gets the value of Settings.Secure.ANDROID_ID. This is a hexadecimal string unique to each combination of app-signing key, user, and device. The value may change if a factory reset is performed on the device or if an APK signing key changes. For more information about how the platform handles ANDROID_ID in Android 8.0 (API level 26) and higher, see Android 8.0 Behavior Changes. On iOS and web, this function is unavailable.
In versions of the platform lower than Android 8.0 (API level 26), this value remains constant for the lifetime of the user's device. See the ANDROID_ID official docs for more information.
Returns:
string
Example
"dd96dec43fb81c97"
Application.getInstallationTimeAsync()
Gets the time the app was installed onto the device, not counting subsequent updates. If the app is uninstalled and reinstalled, this method returns the time the app was reinstalled.
•	On Android, this method uses PackageInfo.firstInstallTime.
•	On iOS, this method uses the NSFileCreationDate of the app's document root directory.
•	On web, this method returns null.
Returns:
Promise<Date>
A Promise that fulfills with a Date object that specifies the time the app was installed on the device.
Example
await Application.getInstallationTimeAsync();
// 2019-07-18T18:08:26.121Z
Application.getInstallReferrerAsync()
Only for: 
Android


Gets the referrer URL of the installed app with the Install Referrer API from the Google Play Store. In practice, the referrer URL may not be a complete, absolute URL.
Returns:
Promise<string>
A Promise that fulfills with a string of the referrer URL of the installed app.
Example
await Application.getInstallReferrerAsync();
// "utm_source=google-play&utm_medium=organic"
Application.getIosApplicationReleaseTypeAsync()
Only for: 
iOS


Gets the iOS application release type.
Returns:
Promise<ApplicationReleaseType>
A Promise which fulfills with an ApplicationReleaseType.
Application.getIosIdForVendorAsync()
Only for: 
iOS


Gets the iOS "identifier for vendor" (IDFV) value, a string ID that uniquely identifies a device to the app’s vendor. This method may sometimes return nil, in which case wait and call the method again later. This might happen when the device has been restarted before the user has unlocked the device.
The OS will change the vendor identifier if all apps from the current app's vendor have been uninstalled.
Returns:
Promise<string | null>
A Promise that fulfills with a string specifying the app's vendor ID. Apps from the same vendor will return the same ID. See Apple's documentation for more information about the vendor ID's semantics.
Example
await Application.getIosIdForVendorAsync();
// "68753A44-4D6F-1226-9C60-0050E4C00067"
Application.getIosPushNotificationServiceEnvironmentAsync()
Only for: 
iOS


Gets the current Apple Push Notification (APN) service environment.
Returns:
Promise<PushNotificationServiceEnvironment>
A Promise that fulfills with the string, either 'development' or 'production', based on the current APN environment, or null on the simulator as it does not support registering with APNs.
Application.getLastUpdateTimeAsync()
Only for: 
Android


Gets the last time the app was updated from the Google Play Store.
Returns:
Promise<Date>
A Promise that fulfills with a Date object that specifies the last time the app was updated via the Google Play Store.
Example
await Application.getLastUpdateTimeAsync();
// 2019-07-18T21:20:16.887Z
Types
PushNotificationServiceEnvironment
Only for: 
iOS


Literal Type: union
Maps to the aps-environment key in the native target's registered entitlements.
Acceptable values are: 'development' | 'production' | null
Enums
ApplicationReleaseType
Only for: 
iOS


UNKNOWN
ApplicationReleaseType.UNKNOWN ＝ 0
SIMULATOR
ApplicationReleaseType.SIMULATOR ＝ 1
ENTERPRISE
ApplicationReleaseType.ENTERPRISE ＝ 2
DEVELOPMENT
ApplicationReleaseType.DEVELOPMENT ＝ 3
AD_HOC
ApplicationReleaseType.AD_HOC ＝ 4
APP_STORE
ApplicationReleaseType.APP_STORE ＝ 5
Error codes
Code	Description
ERR_APPLICATION_PACKAGE_NAME_NOT_FOUND	Error code thrown by getInstallationTimeAsync and getLastUpdateTimeAsync. This may be thrown if the package information or package name could not be retrieved.
ERR_APPLICATION_INSTALL_REFERRER_UNAVAILABLE	The current Play Store app doesn't provide the installation referrer API, or the Play Store may not be installed. This error code may come up when testing on an AVD that doesn't come with the Play Store pre-installed, such as the Google Pixel 3 and Nexus 6.
ERR_APPLICATION_INSTALL_REFERRER_CONNECTION	A connection could not be established to the Google Play Store.
ERR_APPLICATION_INSTALL_REFERRER_REMOTE_EXCEPTION	A RemoteException was thrown after a connection was established to the Play Store. This may happen if the process hosting the remote object is no longer available, which usually means the process crashed. See this StackOverflow answer on RemoteException for more information.

ERR_APPLICATION_INSTALL_REFERRER	General default case error code for the getInstallReferrerAsync method. This error code will be thrown if an exception occurred when getting the install referrer, but the exception was none of the more precise errors. The responseCode is provided along with the error.

ERR_APPLICATION_INSTALL_REFERRER_SERVICE_DISCONNECTED	Connection to the install referrer service was lost. This error is thrown when an attempt was made to connect and set up the install referrer service, but the connection was lost. See the Android documentation for more information.

#9

Expo Asset

GitHub

npm

A universal library that allows downloading assets and using them with other libraries.
Android
iOS
tvOS
Web
Bundled version:
~11.1.5
________________________________________
expo-asset provides an interface to Expo's asset system. An asset is any file that lives alongside the source code of your app that the app needs at runtime. Examples include images, fonts, and sounds. Expo's asset system integrates with React Native's, so that you can refer to files with require('path/to/file'). This is how you refer to static image files in React Native for use in an Image component, for example. Check out React Native's documentation on static image resources for more information. This method of referring to static image resources works out of the box with Expo.
Installation
Terminal
Copy
- npx expo install expo-asset
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration in app config
You can configure expo-asset using its built-in config plugin if you use config plugins in your project (EAS Build or npx expo run:[android|ios]). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.
Example app.json with config plugin
app.json
Copy
{
  "expo": {
    "plugins": [
      [
        "expo-asset",
        {
          "assets": ["path/to/file.png", "path/to/directory"]
        }
      ]
    ]
  }
}
Configurable properties
Name	Default	Description
assets	[]	An array of asset files or directories to link to the native project. The paths should be relative to the project root so that the file names, whether specified directly or using a directory, will become the resource names.
Supported file types:
•	Images: .png, .jpg, .gif
•	Media: .mp4, .mp3, .lottie, .riv
•	SQLite database files: .db
Note: To import an existing database file (.db), see instructions in SQLite API reference. For other file types (such as .lottie or .riv), see how to add a file extension to assetExts in metro config.

Usage
Learn more about how to use the expo-asset config plugin to embed an asset file in your project in Load an asset at build time.
API
import { Asset } from 'expo-asset';
Hooks
useAssets(moduleIds)
Parameter	Type
moduleIds	number | number[]

Downloads and stores one or more assets locally. After the assets are loaded, this hook returns a list of asset instances. If something went wrong when loading the assets, an error is returned.
Note, the assets are not "reloaded" when you dynamically change the asset list.
Returns:
[Asset[] | undefined, Error | undefined]
Returns an array containing:
•	on the first position, a list of all loaded assets. If they aren't loaded yet, this value is undefined.
•	on the second position, an error which encountered when loading the assets. If there was no error, this value is undefined.
Example
const [assets, error] = useAssets([require('path/to/asset.jpg'), require('path/to/other.png')]);

return assets ? <Image source={assets[0]} /> : null;
Classes
Asset
The Asset class represents an asset in your app. It gives metadata about the asset (such as its name and type) and provides facilities to load the asset data.
Asset Properties
downloaded
Type: boolean • Default: false
Whether the asset has finished downloading from a call to downloadAsync().
hash
Read Only • Literal type: union • Default: null
The MD5 hash of the asset's data.
Acceptable values are: null | string
height
Literal type: union • Default: null
If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after @ in the filename, or 1 if not present.
Acceptable values are: null | number
localUri
Literal type: union • Default: null
If the asset has been downloaded (by calling downloadAsync()), the file:// URI pointing to the local file on the device that contains the asset data.
Acceptable values are: null | string
name
Type: string
The name of the asset file without the extension. Also without the part from @ onward in the filename (used to specify scale factor for images).
type
Read Only • Type: string
The extension of the asset filename.
uri
Read Only • Type: string
A URI that points to the asset's data on the remote server. When running the published version of your app, this refers to the location on Expo's asset server where Expo has stored your asset. When running the app from Expo CLI during development, this URI points to Expo CLI's server running on your computer and the asset is served directly from your computer. If you are not using Classic Updates (legacy), this field should be ignored as we ensure your assets are on device before running your application logic.
width
Literal type: union • Default: null
If the asset is an image, the width of the image data divided by the scale factor. The scale factor is the number after @ in the filename, or 1 if not present.
Acceptable values are: null | number
Asset Methods
downloadAsync()
Downloads the asset data to a local file in the device's cache directory. Once the returned promise is fulfilled without error, the localUri field of this asset points to a local file containing the asset data. The asset is only downloaded if an up-to-date local file for the asset isn't already present due to an earlier download. The downloaded Asset will be returned when the promise is resolved.
Returns:
Promise<Asset>
Returns a Promise which fulfills with an Asset instance.
fromMetadata(meta)
Parameter	Type
meta	AssetMetadata


Returns:
Asset
fromModule(virtualAssetModule)
Parameter	Type	Description
virtualAssetModule	string | number | {
  height: number, 
  uri: string, 
  width: number
}	The value of require('path/to/file') for the asset or external network URL

Returns the Asset instance representing an asset given its module or URL.
Returns:
Asset
The Asset instance for the asset.
fromURI(uri)
Parameter	Type
uri	string

Returns:
Asset
loadAsync(moduleId)
Parameter	Type	Description
moduleId	string | number | number[] | string[]	An array of require('path/to/file') or external network URLs. Can also be just one module or URL without an Array.

A helper that wraps Asset.fromModule(module).downloadAsync for convenience.
Returns:
Promise<Asset[]>
Returns a Promise that fulfills with an array of Assets when the asset(s) has been saved to disk.
Example
const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));
Types
AssetDescriptor
Property	Type	Description
hash(optional)	string | null	-
height(optional)	number | null	-
name	string	-
type	string	-
uri	string	-
width(optional)	number | null	-
AssetMetadata
Type: Pick<PackagerAsset, 'httpServerLocation' | 'name' | 'hash' | 'type' | 'scales' | 'width' | 'height'> extended by:
Property	Type	Description
fileHashes(optional)	string[]	-
fileUris(optional)	string[]	-
uri(optional)	string	-

#10

Expo Audio (expo-audio)

GitHub

npm

A library that provides an API to implement audio playback and recording in apps.
Android
iOS
tvOS
Web
Bundled version:
~0.4.6
________________________________________
expo-audio is a cross-platform audio library for accessing the native audio capabilities of the device.
Note that audio automatically stops if headphones/bluetooth audio devices are disconnected.
Installation
Terminal
Copy
- npx expo install expo-audio
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration in app config
You can configure expo-audio using its built-in config plugin if you use config plugins in your project (EAS Build or npx expo run:[android|ios]). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect. If your app does not use EAS Build, then you'll need to manually configure the package.
Example app.json with config plugin
app.json
Copy
{
  "expo": {
    "plugins": [
      [
        "expo-audio",
        {
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone."
        }
      ]
    ]
  }
}
Configurable properties
Name	Default	Description
microphonePermission	"Allow $(PRODUCT_NAME) to access your microphone"	Only for: 
iOS


A string to set the NSMicrophoneUsageDescription permission message.
Usage
Playing sounds
Playing sounds
Copy
Open in Snack
import { View, StyleSheet, Button } from 'react-native';
import { useAudioPlayer } from 'expo-audio';

const audioSource = require('./assets/Hello.mp3');

export default function App() {
  const player = useAudioPlayer(audioSource);

  return (
    <View style={styles.container}>
      <Button title="Play Sound" onPress={() => player.play()} />
      <Button
        title="Replay Sound"
        onPress={() => {
          player.seekTo(0);
          player.play();
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});
Show More
Note: If you're migrating from expo-av, you'll notice that expo-audio doesn't automatically reset the playback position when audio finishes. After play(), the player stays paused at the end of the sound. To play it again, call seekTo(seconds) to reset the position — as shown in the example above.
Recording sounds
Recording sounds
Copy
Open in Snack
import { useState, useEffect } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { useAudioRecorder, AudioModule, RecordingPresets } from 'expo-audio';

export default function App() {
  const audioRecorder = useAudioRecorder(RecordingPresets.HIGH_QUALITY);
  const [isRecording, setIsRecording] = useState(false);

  const record = async () => {
    await audioRecorder.prepareToRecordAsync();
    audioRecorder.record();
    setIsRecording(true);
  };

  const stopRecording = async () => {
    // The recording will be available on `audioRecorder.uri`.
    await audioRecorder.stop();
    setIsRecording(false);
  };

  useEffect(() => {
    (async () => {
      const status = await AudioModule.requestRecordingPermissionsAsync();
      if (!status.granted) {
        Alert.alert('Permission to access microphone was denied');
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Button
        title={isRecording ? 'Stop Recording' : 'Start Recording'}
        onPress={isRecording ? stopRecording : record}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});
Show More
Playing or recording audio in background 
iOS
On iOS, audio playback and recording in background is only available in standalone apps, and it requires some extra configuration. On iOS, each background feature requires a special key in UIBackgroundModes array in your Info.plist file. In standalone apps this array is empty by default, so to use background features you will need to add appropriate keys to your app.json configuration.
See an example of app.json that enables audio playback in background:
{
  "expo": {
    ...
    "ios": {
      ...
      "infoPlist": {
        ...
        "UIBackgroundModes": [
          "audio"
        ]
      }
    }
  }
}
Using the AudioPlayer directly
In most cases, the useAudioPlayer hook should be used to create a AudioPlayer instance. It manages the player's lifecycle and ensures that it is properly disposed of when the component is unmounted. However, in some advanced use cases, it might be necessary to create a AudioPlayer that does not get automatically destroyed when the component is unmounted. In those cases, the AudioPlayer can be created using the createAudioPlayer function. You need be aware of the risks that come with this approach, as it is your responsibility to call the release() method when the player is no longer needed. If not handled properly, this approach may lead to memory leaks.
import { createAudioPlayer } from 'expo-audio';
const player = createAudioPlayer(audioSource);
Notes on web usage
•	A MediaRecorder issue on Chrome produces WebM files missing the duration metadata. See the open Chromium issue.
•	MediaRecorder encoding options and other configurations are inconsistent across browsers, utilizing a Polyfill such as kbumsik/opus-media-recorder or ai/audio-recorder-polyfill in your application will improve your experience. Any options passed to prepareToRecordAsync will be passed directly to the MediaRecorder API and as such the polyfill.
•	Web browsers require sites to be served securely for them to listen to a mic. See MediaDevices getUserMedia() security for more details.
API
import { useAudioPlayer, useAudioRecorder } from 'expo-audio';
Constants
Audio.AUDIO_SAMPLE_UPDATE
Type: 'audioSampleUpdate'
Audio.PLAYBACK_STATUS_UPDATE
Type: 'playbackStatusUpdate'
Audio.RECORDING_STATUS_UPDATE
Type: 'recordingStatusUpdate'
Audio.RecordingPresets
Type: Record<string, RecordingOptions>
Constant which contains definitions of the two preset examples of RecordingOptions, as implemented in the Audio SDK.
HIGH_QUALITY
RecordingPresets.HIGH_QUALITY = {
 extension: '.m4a',
  sampleRate: 44100,
  numberOfChannels: 2,
  bitRate: 128000,
  android: {
    outputFormat: 'mpeg4',
    audioEncoder: 'aac',
  },
  ios: {
    outputFormat: IOSOutputFormat.MPEG4AAC,
    audioQuality: AudioQuality.MAX,
    linearPCMBitDepth: 16,
    linearPCMIsBigEndian: false,
    linearPCMIsFloat: false,
  },
  web: {
    mimeType: 'audio/webm',
    bitsPerSecond: 128000,
  },
};
Show More
LOW_QUALITY
RecordingPresets.LOW_QUALITY = {
  extension: '.m4a',
  sampleRate: 44100,
  numberOfChannels: 2,
  bitRate: 64000,
  android: {
    extension: '.3gp',
    outputFormat: '3gp',
    audioEncoder: 'amr_nb',
  },
  ios: {
    audioQuality: AudioQuality.MIN,
    outputFormat: IOSOutputFormat.MPEG4AAC,
    linearPCMBitDepth: 16,
    linearPCMIsBigEndian: false,
    linearPCMIsFloat: false,
  },
  web: {
    mimeType: 'audio/webm',
    bitsPerSecond: 128000,
  },
};
Show More
Hooks
useAudioPlayer(source, updateInterval)
Parameter	Type
source(optional)	AudioSource

updateInterval(optional)	number

Returns:
AudioPlayer
useAudioPlayerStatus(player)
Parameter	Type
player	AudioPlayer


Returns:
AudioStatus
useAudioRecorder(options, statusListener)
Parameter	Type
options	RecordingOptions

statusListener(optional)	(status: RecordingStatus) => void


Returns:
AudioRecorder
useAudioRecorderState(recorder, interval)
Parameter	Type
recorder	AudioRecorder

interval(optional)	number

Returns:
RecorderState
useAudioSampleListener(player, listener)
Parameter	Type
player	AudioPlayer

listener	(data: AudioSample) => void


Returns:
void
Classes
AudioPlayer
Type: Class extends SharedObject<AudioEvents>
AudioPlayer Properties
currentTime
Type: number
The current position through the audio item in seconds.
duration
Type: number
The total duration of the audio in seconds.
id
Type: number
Unique identifier for the player object.
isAudioSamplingSupported
Type: boolean
Boolean value indicating whether audio sampling is supported on the platform.
isBuffering
Type: boolean
Boolean value indicating whether the player is buffering.
isLoaded
Type: boolean
Boolean value indicating whether the player is finished loading.
loop
Type: boolean
Boolean value indicating whether the player is currently looping.
muted
Type: boolean
Boolean value indicating whether the player is currently muted.
paused
Type: boolean
Boolean value indicating whether the player is currently paused.
playbackRate
Type: number
The current playback rate of the audio.
playing
Type: boolean
Boolean value indicating whether the player is currently playing.
shouldCorrectPitch
Type: boolean
A boolean describing if we are correcting the pitch for a changed rate.
volume
Type: number
The current volume of the audio.
AudioPlayer Methods
pause()
Pauses the player.
Returns:
void
play()
Start playing audio.
Returns:
void
remove()
Remove the player from memory to free up resources.
Returns:
void
replace(source)
Parameter	Type
source	AudioSource


Replaces the current audio source with a new one.
Returns:
void
seekTo(seconds)
Parameter	Type	Description
seconds	number	The number of seconds to seek by.

Seeks the playback by the given number of seconds.
Returns:
Promise<void>
setPlaybackRate(rate, pitchCorrectionQuality)
Parameter	Type	Description
rate	number	The playback rate of the audio.
pitchCorrectionQuality(optional)	PitchCorrectionQuality
The quality of the pitch correction.

Sets the current playback rate of the audio.
Returns:
void
AudioRecorder
Type: Class extends SharedObject<RecordingEvents>
AudioRecorder Properties
currentTime
Type: number
The current length of the recording, in seconds.
id
Type: number
Unique identifier for the recorder object.
isRecording
Type: boolean
Boolean value indicating whether the recording is in progress.
uri
Literal type: union
The uri of the recording.
Acceptable values are: null | string
AudioRecorder Methods
getAvailableInputs()
Returns a list of available recording inputs. This method can only be called if the Recording has been prepared.
Returns:
RecordingInput[]
A Promise that is fulfilled with an array of RecordingInput objects.
getCurrentInput()
Returns the currently-selected recording input. This method can only be called if the Recording has been prepared.
Returns:
RecordingInput
A Promise that is fulfilled with a RecordingInput object.
getStatus()
Status of the current recording.
Returns:
RecorderState
pause()
Pause the recording.
Returns:
void
prepareToRecordAsync(options)
Parameter	Type
options(optional)	Partial<RecordingOptions>


Prepares the recording for recording.
Returns:
Promise<void>
record()
Starts the recording.
Returns:
void
recordForDuration(seconds)
Parameter	Type	Description
seconds	number	The time in seconds to stop recording at.

Stops the recording once the specified time has elapsed.
Returns:
void
setInput(inputUid)
Parameter	Type	Description
inputUid	string	The uid of a RecordingInput.

Sets the current recording input.
Returns:
void
A Promise that is resolved if successful or rejected if not.
startRecordingAtTime(seconds)
Parameter	Type	Description
seconds	number	The time in seconds to start recording at.

Starts the recording at the given time.
Returns:
void
stop()
Stop the recording.
Returns:
Promise<void>
Methods
Audio.createAudioPlayer(source, updateInterval)
Parameter	Type
source(optional)	AudioSource

updateInterval(optional)	number

Creates an instance of an AudioPlayer that doesn't release automatically.
For most use cases you should use the useAudioPlayer hook instead. See the Using the AudioPlayer directly section for more details.
Returns:
AudioPlayer
Audio.getRecordingPermissionsAsync()
Returns:
Promise<PermissionResponse>
Audio.requestRecordingPermissionsAsync()
Returns:
Promise<PermissionResponse>
Audio.setAudioModeAsync(mode)
Parameter	Type
mode	Partial<AudioMode>


Returns:
Promise<void>
Audio.setIsAudioActiveAsync(active)
Parameter	Type
active	boolean

Returns:
Promise<void>
Event Subscriptions
Audio.useAudioSampleListener(player, listener)
Parameter	Type
player	AudioPlayer

listener	(data: AudioSample) => void


Returns:
void
Types
AndroidAudioEncoder
Only for: 
Android


Literal Type: string
Acceptable values are: 'default' | 'amr_nb' | 'amr_wb' | 'aac' | 'he_aac' | 'aac_eld'
AndroidOutputFormat
Only for: 
Android


Literal Type: string
Acceptable values are: 'default' | '3gp' | 'mpeg4' | 'amrnb' | 'amrwb' | 'aac_adts' | 'mpeg2ts' | 'webm'
AudioEvents
Property	Type	Description
audioSampleUpdate	(data: AudioSample) => void
-
playbackStatusUpdate	(status: AudioStatus) => void
-
AudioMode
Property	Type	Description
allowsRecording(optional)	boolean	Only for: 
iOS


Whether the audio session allows recording.
Default:false
interruptionMode	InterruptionMode
Only for: 
iOS


Determines how the audio session interacts with other sessions.
interruptionModeAndroid	InterruptionModeAndroid
Only for: 
Android


Determines how the audio session interacts with other sessions on Android.
playsInSilentMode	boolean	Only for: 
iOS


Determines if audio playback is allowed when the device is in silent mode.
shouldPlayInBackground(optional)	boolean	Whether the audio session stays active when the app moves to the background.
Default:false
shouldRouteThroughEarpiece	boolean	Only for: 
Android


Whether the audio should route through the earpiece.
AudioSample
Property	Type	Description
channels	AudioSampleChannel[]
-
timestamp	number	-
AudioSampleChannel
Property	Type	Description
frames	number[]	-
AudioSource
Type: string or number or null or object shaped as below:
Property	Type	Description
assetId(optional)	number	The asset ID of a local audio asset, acquired with the require function. This property is exclusive with the uri property. When both are present, the assetId will be ignored.
headers(optional)	Record<string, string>	An object representing the HTTP headers to send along with the request for a remote audio source. On web requires the Access-Control-Allow-Origin header returned by the server to include the current domain.
uri(optional)	string	A string representing the resource identifier for the audio, which could be an HTTPS address, a local file path, or the name of a static audio file resource.
AudioStatus
Property	Type	Description
currentTime	number	-
didJustFinish	boolean	-
duration	number	-
id	number	-
isBuffering	boolean	-
isLoaded	boolean	-
loop	boolean	-
mute	boolean	-
playbackRate	number	-
playbackState	string	-
playing	boolean	-
reasonForWaitingToPlay	string	-
shouldCorrectPitch	boolean	-
timeControlStatus	string	-
BitRateStrategy
Literal Type: string
Acceptable values are: 'constant' | 'longTermAverage' | 'variableConstrained' | 'variable'
InterruptionMode
Literal Type: string
Acceptable values are: 'mixWithOthers' | 'doNotMix' | 'duckOthers'
InterruptionModeAndroid
Literal Type: string
Acceptable values are: 'doNotMix' | 'duckOthers'
PermissionExpiration
Literal Type: union
Permission expiration time. Currently, all permissions are granted permanently.
Acceptable values are: 'never' | number
PermissionResponse
An object obtained by permissions get and request functions.
Property	Type	Description
canAskAgain	boolean	Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.
expires	PermissionExpiration
Determines time when the permission expires.
granted	boolean	A convenience boolean that indicates if the permission is granted.
status	PermissionStatus
Determines the status of the permission.
PitchCorrectionQuality
Literal Type: string
Acceptable values are: 'low' | 'medium' | 'high'
RecorderState
Property	Type	Description
canRecord	boolean	-
durationMillis	number	-
isRecording	boolean	-
mediaServicesDidReset	boolean	-
metering(optional)	number	-
url	string | null	-
RecordingEvents
Property	Type	Description
recordingStatusUpdate	(status: RecordingStatus) => void
-
RecordingInput
Property	Type	Description
name	string	-
type	string	-
uid	string	-
RecordingOptions
Property	Type	Description
android	RecordingOptionsAndroid
Only for: 
Android


Recording options for the Android platform.
bitRate	number	The desired bit rate.
Example
128000
extension	string	The desired file extension.
Example
.caf
ios	RecordingOptionsIos
Only for: 
iOS


Recording options for the iOS platform.
isMeteringEnabled(optional)	boolean	A boolean that determines whether audio level information will be part of the status object under the "metering" key.
numberOfChannels	number	The desired number of channels.
Example
2
sampleRate	number	The desired sample rate.
Example
44100
web(optional)	RecordingOptionsWeb
Only for: 
Web


Recording options for the Web platform.
RecordingOptionsAndroid
Only for: 
Android


Property	Type	Description
audioEncoder	AndroidAudioEncoder
The desired audio encoder. See the AndroidAudioEncoder enum for all valid values.

extension(optional)	string	The desired file extension.
Example
.caf
maxFileSize(optional)	number	The desired maximum file size in bytes, after which the recording will stop (but stopAndUnloadAsync() must still be called after this point).
Example
65536
outputFormat	AndroidOutputFormat
The desired file format. See the AndroidOutputFormat enum for all valid values.

sampleRate(optional)	number	The desired sample rate.
Example
44100
RecordingOptionsIos
Only for: 
iOS


Property	Type	Description
audioQuality	AudioQuality | number
The desired audio quality. See the AudioQuality enum for all valid values.

bitDepthHint(optional)	number	The desired bit depth hint.
Example
16
bitRateStrategy(optional)	number	The desired bit rate strategy. See the next section for an enumeration of all valid values of bitRateStrategy.
extension(optional)	string	The desired file extension.
Example
.caf
linearPCMBitDepth(optional)	number	The desired PCM bit depth.
Example
16
linearPCMIsBigEndian(optional)	boolean	A boolean describing if the PCM data should be formatted in big endian.
linearPCMIsFloat(optional)	boolean	A boolean describing if the PCM data should be encoded in floating point or integral values.
outputFormat(optional)	string | IOSOutputFormat | number
The desired file format. See the IOSOutputFormat enum for all valid values.

sampleRate(optional)	number	The desired sample rate.
Example
44100
RecordingOptionsWeb
Only for: 
Web


Property	Type	Description
bitsPerSecond(optional)	number	-
mimeType(optional)	string	-
RecordingStatus
Property	Type	Description
error	string | null	-
hasError	boolean	-
id	number	-
isFinished	boolean	-
url	string | null	-
Enums
AudioQuality
MIN
AudioQuality.MIN ＝ 0
LOW
AudioQuality.LOW ＝ 32
MEDIUM
AudioQuality.MEDIUM ＝ 64
HIGH
AudioQuality.HIGH ＝ 96
MAX
AudioQuality.MAX ＝ 127
IOSOutputFormat
Only for: 
iOS


MPEGLAYER1
IOSOutputFormat.MPEGLAYER1 ＝ ".mp1"
MPEGLAYER2
IOSOutputFormat.MPEGLAYER2 ＝ ".mp2"
MPEGLAYER3
IOSOutputFormat.MPEGLAYER3 ＝ ".mp3"
MPEG4AAC
IOSOutputFormat.MPEG4AAC ＝ "aac "
MPEG4AAC_ELD
IOSOutputFormat.MPEG4AAC_ELD ＝ "aace"
MPEG4AAC_ELD_SBR
IOSOutputFormat.MPEG4AAC_ELD_SBR ＝ "aacf"
MPEG4AAC_ELD_V2
IOSOutputFormat.MPEG4AAC_ELD_V2 ＝ "aacg"
MPEG4AAC_HE
IOSOutputFormat.MPEG4AAC_HE ＝ "aach"
MPEG4AAC_LD
IOSOutputFormat.MPEG4AAC_LD ＝ "aacl"
MPEG4AAC_HE_V2
IOSOutputFormat.MPEG4AAC_HE_V2 ＝ "aacp"
MPEG4AAC_SPATIAL
IOSOutputFormat.MPEG4AAC_SPATIAL ＝ "aacs"
AC3
IOSOutputFormat.AC3 ＝ "ac-3"
AES3
IOSOutputFormat.AES3 ＝ "aes3"
APPLELOSSLESS
IOSOutputFormat.APPLELOSSLESS ＝ "alac"
ALAW
IOSOutputFormat.ALAW ＝ "alaw"
AUDIBLE
IOSOutputFormat.AUDIBLE ＝ "AUDB"
60958AC3
IOSOutputFormat.60958AC3 ＝ "cac3"
MPEG4CELP
IOSOutputFormat.MPEG4CELP ＝ "celp"
ENHANCEDAC3
IOSOutputFormat.ENHANCEDAC3 ＝ "ec-3"
MPEG4HVXC
IOSOutputFormat.MPEG4HVXC ＝ "hvxc"
ILBC
IOSOutputFormat.ILBC ＝ "ilbc"
APPLEIMA4
IOSOutputFormat.APPLEIMA4 ＝ "ima4"
LINEARPCM
IOSOutputFormat.LINEARPCM ＝ "lpcm"
MACE3
IOSOutputFormat.MACE3 ＝ "MAC3"
MACE6
IOSOutputFormat.MACE6 ＝ "MAC6"
AMR
IOSOutputFormat.AMR ＝ "samr"
AMR_WB
IOSOutputFormat.AMR_WB ＝ "sawb"
DVIINTELIMA
IOSOutputFormat.DVIINTELIMA ＝ 1836253201
MICROSOFTGSM
IOSOutputFormat.MICROSOFTGSM ＝ 1836253233
QUALCOMM
IOSOutputFormat.QUALCOMM ＝ "Qclp"
QDESIGN2
IOSOutputFormat.QDESIGN2 ＝ "QDM2"
QDESIGN
IOSOutputFormat.QDESIGN ＝ "QDMC"
MPEG4TWINVQ
IOSOutputFormat.MPEG4TWINVQ ＝ "twvq"
ULAW
IOSOutputFormat.ULAW ＝ "ulaw"
PermissionStatus
DENIED
PermissionStatus.DENIED ＝ "denied"
User has denied the permission.
GRANTED
PermissionStatus.GRANTED ＝ "granted"
User has granted the permission.
UNDETERMINED
PermissionStatus.UNDETERMINED ＝ "undetermined"
User hasn't granted or denied the permission yet.


#11

Expo AuthSession

GitHub

npm

A universal library that provides an API to handle browser-based authentication.
Android
iOS
Web
Bundled version:
~6.2.0
________________________________________
AuthSession enables web browser-based authentication (for example, browser-based OAuth flows) in your app by utilizing WebBrowser and Crypto. For implementation details, refer to this reference, and for usage, see the Authentication guide.
Note: AuthSession enables general-purpose OAuth and OpenID Connect browser-based auth workflows. Where available, we recommend using a library supplied by your identity provider, as it will handle implementation details specific to that provider. For example, use @react-native-google-signin/google-signin for Google authentication and react-native-fbsdk-next for Facebook. For more information, see Authentication overview.
Installation
expo-crypto is a peer dependency and must be installed alongside expo-auth-session.
Terminal
Copy
- npx expo install expo-auth-session expo-crypto
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration
Are you using this library in an existing React Native app?


Usage in standalone apps
app.json
Copy
{
  "expo": {
    "scheme": "mycoolredirect"
  }
}
To be able to deep link back into your app, you will need to set a scheme in your project's app config, and then build your standalone app (it can't be updated with an update). If you do not include a scheme, the authentication flow will complete, but it will be unable to pass the information back into your application and the user will have to manually exit the authentication modal (resulting in a canceled event).
Guides
The guides have moved: Authentication Guide.
How web browser based authentication flows work
The typical flow for browser-based authentication in mobile apps is as follows:
•	Initiation: the user presses a sign in button
•	Open web browser: the app opens up a web browser to the authentication provider sign in page. The url that is opened for the sign in page usually includes information to identify the app, and a URL to redirect to on success. Note: the web browser should share cookies with your system web browser so that users do not need to sign in again if they are already authenticated on the system browser -- Expo's WebBrowser API takes care of this.
•	Authentication provider redirects: upon successful authentication, the authentication provider should redirect back to the application by redirecting to URL provided by the app in the query parameters on the sign in page (read more about how linking works in mobile apps), provided that the URL is in the allowlist of allowed redirect URLs. Allowlisting redirect URLs is important to prevent malicious actors from pretending to be your application. The redirect includes data in the URL (such as user id and token), either in the location hash, query parameters, or both.
•	App handles redirect: the redirect is handled by the app and data is parsed from the redirect URL.
Security considerations
•	Never put any secret keys inside your application code, there is no secure way to do this! Instead, you should store your secret key(s) on a server and expose an endpoint that makes API calls for your client and passes the data back.
API
import * as AuthSession from 'expo-auth-session';
Hooks
useAuthRequest(config, discovery)
Parameter	Type	Description
config	AuthRequestConfig
A valid AuthRequestConfig that specifies what provider to use.

discovery	null | DiscoveryDocument
A loaded DiscoveryDocument with endpoints used for authenticating. Only authorizationEndpoint is required for requesting an authorization code.

Load an authorization request for a code. When the prompt method completes then the response will be fulfilled.
In order to close the popup window on web, you need to invoke WebBrowser.maybeCompleteAuthSession(). See the GitHub example for more info.
If an Implicit grant flow was used, you can pass the response.params to TokenResponse.fromQueryParams() to get a TokenResponse instance which you can use to easily refresh the token.
Returns:
[AuthRequest | null, AuthSessionResult | null, (options: AuthRequestPromptOptions) => Promise<AuthSessionResult>]
Returns a loaded request, a response, and a prompt method in a single array in the following order:
•	request - An instance of AuthRequest that can be used to prompt the user for authorization. This will be null until the auth request has finished loading.
•	response - This is null until promptAsync has been invoked. Once fulfilled it will return information about the authorization.
•	promptAsync - When invoked, a web browser will open up and prompt the user for authentication. Accepts an AuthRequestPromptOptions object with options about how the prompt will execute.
Example
const [request, response, promptAsync] = useAuthRequest({ ... }, { ... });
useAuthRequestResult(request, discovery, customOptions)
Parameter	Type
request	null | AuthRequest

discovery	null | DiscoveryDocument

customOptions(optional)	AuthRequestPromptOptions


Returns:
[AuthSessionResult | null, PromptMethod]
useAutoDiscovery(issuerOrDiscovery)
Parameter	Type	Description
issuerOrDiscovery	IssuerOrDiscovery
URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier.

Given an OpenID Connect issuer URL, this will fetch and return the DiscoveryDocument (a collection of URLs) from the resource provider.
Returns:
DiscoveryDocument | null
Returns null until the DiscoveryDocument has been fetched from the provided issuer URL.
Example
const discovery = useAutoDiscovery('https://example.com/auth');
useLoadedAuthRequest(config, discovery, AuthRequestInstance)
Parameter	Type
config	AuthRequestConfig

discovery	null | DiscoveryDocument

AuthRequestInstance	AuthRequest

Returns:
AuthRequest | null
Classes
AccessTokenRequest
Type: Class extends TokenRequest<AccessTokenRequestConfig> implements AccessTokenRequestConfig
Access token request. Exchange an authorization code for a user access token.
Section 4.1.3
AccessTokenRequest Properties
grantType
Type: GrantType
AccessTokenRequest Methods
getHeaders()
Returns:
Headers
getQueryBody()
Returns:
Record<string, string>
getRequestConfig()
Returns:
{
  clientId: string, 
  clientSecret: undefined | string, 
  code: string, 
  extraParams: undefined | Record<string, string>, 
  grantType: GrantType, 
  redirectUri: string, 
  scopes: undefined | string[]
}
performAsync(discovery)
Parameter	Type
discovery	Pick<DiscoveryDocument, 'tokenEndpoint'>


Returns:
Promise<TokenResponse>
AuthError
Type: Class extends ResponseError
Represents an authorization response error: Section 5.2. Often times providers will fail to return the proper error message for a given error code. This error method will add the missing description for more context on what went wrong.
AuthError Properties
code
Type: string
description
Optional • Type: string
Used to assist the client developer in understanding the error that occurred.
info
Optional • Type: any
params
Type: Record<string, string>
Raw results of the error.
state
Optional • Type: string
Required only if state is used in the initial request
uri
Optional • Type: string
A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.
AuthRequest
Type: Class implements Omit<AuthRequestConfig, 'state'>
Used to manage an authorization request according to the OAuth spec: Section 4.1.1. You can use this class directly for more info around the authorization.
Common use-cases:
•	Parse a URL returned from the authorization server with parseReturnUrlAsync().
•	Get the built authorization URL with makeAuthUrlAsync().
•	Get a loaded JSON representation of the auth request with crypto state loaded with getAuthRequestConfigAsync().
Example
// Create a request.
const request = new AuthRequest({ ... });

// Prompt for an auth code
const result = await request.promptAsync(discovery);

// Get the URL to invoke
const url = await request.makeAuthUrlAsync(discovery);

// Get the URL to invoke
const parsed = await request.parseReturnUrlAsync("<URL From Server>");
AuthRequest Properties
codeVerifier
Optional • Type: string
state
Type: string
Used for protection against Cross-Site Request Forgery.
url
Literal type: union • Default: null
Acceptable values are: null | string
AuthRequest Methods
getAuthRequestConfigAsync()
Load and return a valid auth request based on the input config.
Returns:
Promise<AuthRequestConfig>
makeAuthUrlAsync(discovery)
Parameter	Type
discovery	AuthDiscoveryDocument


Create the URL for authorization.
Returns:
Promise<string>
parseReturnUrl(url)
Parameter	Type
url	string

Returns:
AuthSessionResult
promptAsync(discovery, promptOptions)
Parameter	Type
discovery	AuthDiscoveryDocument

promptOptions(optional)	AuthRequestPromptOptions


Prompt a user to authorize for a code.
Returns:
Promise<AuthSessionResult>
RefreshTokenRequest
Type: Class extends TokenRequest<RefreshTokenRequestConfig> implements RefreshTokenRequestConfig
Refresh request.
Section 6
RefreshTokenRequest Properties
grantType
Type: GrantType
RefreshTokenRequest Methods
getHeaders()
Returns:
Headers
getQueryBody()
Returns:
Record<string, string>
getRequestConfig()
Returns:
{
  clientId: string, 
  clientSecret: undefined | string, 
  extraParams: undefined | Record<string, string>, 
  grantType: GrantType, 
  refreshToken: undefined | string, 
  scopes: undefined | string[]
}
performAsync(discovery)
Parameter	Type
discovery	Pick<DiscoveryDocument, 'tokenEndpoint'>


Returns:
Promise<TokenResponse>
Request
Request Methods
getQueryBody()
Returns:
Record<string, string>
getRequestConfig()
Returns:
T
performAsync(discovery)
Parameter	Type
discovery	DiscoveryDocument


Returns:
Promise<B>
ResponseError
Type: Class extends CodedError
Section 4.1.2.1
ResponseError Properties
code
Type: string
description
Optional • Type: string
Used to assist the client developer in understanding the error that occurred.
info
Optional • Type: any
params
Type: Record<string, string>
Raw results of the error.
uri
Optional • Type: string
A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.
RevokeTokenRequest
Type: Class extends Request<RevokeTokenRequestConfig, boolean> implements RevokeTokenRequestConfig
Revocation request for a given token.
Section 2.1
RevokeTokenRequest Methods
getHeaders()
Returns:
Headers
getQueryBody()
Returns:
Record<string, string>
getRequestConfig()
Returns:
{
  clientId: undefined | string, 
  clientSecret: undefined | string, 
  token: string, 
  tokenTypeHint: undefined | TokenTypeHint
}
performAsync(discovery)
Parameter	Type	Description
discovery	Pick<DiscoveryDocument, 'revocationEndpoint'>
The revocationEndpoint for a provider.

Perform a token revocation request.
Returns:
Promise<boolean>
TokenError
Type: Class extends ResponseError
Section 4.1.2.1
TokenError Properties
code
Type: string
description
Optional • Type: string
Used to assist the client developer in understanding the error that occurred.
info
Optional • Type: any
params
Type: Record<string, string>
Raw results of the error.
uri
Optional • Type: string
A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.
TokenRequest
Type: Class extends Request<T, TokenResponse> implements TokenRequestConfig
A generic token request.
TokenRequest Properties
grantType
Type: GrantType
TokenRequest Methods
getHeaders()
Returns:
Headers
getQueryBody()
Returns:
Record<string, string>
getRequestConfig()
Returns:
T
performAsync(discovery)
Parameter	Type
discovery	Pick<DiscoveryDocument, 'tokenEndpoint'>


Returns:
Promise<TokenResponse>
TokenResponse
Type: Class implements TokenResponseConfig
Token Response.
Section 5.1
TokenResponse Methods
fromQueryParams(params)
Parameter	Type
params	Record<string, any>

Creates a TokenResponse from query parameters returned from an AuthRequest.
Returns:
TokenResponse
getRequestConfig()
Returns:
TokenResponseConfig
isTokenFresh(token, secondsMargin)
Parameter	Type
token	Pick<TokenResponse, 'expiresIn' | 'issuedAt'>

secondsMargin(optional)	number

Determines whether a token refresh request must be made to refresh the tokens
Returns:
boolean
refreshAsync(config, discovery)
Parameter	Type
config	Omit<TokenRequestConfig, 'refreshToken' | 'grantType'>

discovery	Pick<DiscoveryDocument, 'tokenEndpoint'>


Returns:
Promise<TokenResponse>
shouldRefresh()
Returns:
boolean
Methods
AuthSession.dismiss()
Cancels an active AuthSession if there is one.
Returns:
void
AuthSession.exchangeCodeAsync(config, discovery)
Parameter	Type	Description
config	AccessTokenRequestConfig
Configuration used to exchange the code for a token.
discovery	Pick<DiscoveryDocument, 'tokenEndpoint'>
The tokenEndpoint for a provider.

Exchange an authorization code for an access token that can be used to get data from the provider.
Returns:
Promise<TokenResponse>
Returns a discovery document with a valid tokenEndpoint URL.
AuthSession.fetchDiscoveryAsync(issuer)
Parameter	Type	Description
issuer	string	An Issuer URL to fetch from.

Fetch a DiscoveryDocument from a well-known resource provider that supports auto discovery.
Returns:
Promise<DiscoveryDocument>
Returns a discovery document that can be used for authentication.
AuthSession.fetchUserInfoAsync(config, discovery)
Parameter	Type	Description
config	Pick<TokenResponse, 'accessToken'>
The accessToken for a user, returned from a code exchange or auth request.
discovery	Pick<DiscoveryDocument, 'userInfoEndpoint'>
The userInfoEndpoint for a provider.

Fetch generic user info from the provider's OpenID Connect userInfoEndpoint (if supported).
Returns:
Promise<Record<string, any>>
See: UserInfo.
AuthSession.getCurrentTimeInSeconds()
Returns the current time in seconds.
Returns:
number
AuthSession.getDefaultReturnUrl(urlPath, options)
Parameter	Type
urlPath(optional)	string
options(optional)	Omit<CreateURLOptions, 'queryParams'>


Returns:
string
Deprecated Use makeRedirectUri() instead.
AuthSession.getRedirectUrl(path)
Parameter	Type
path(optional)	string

Get the URL that your authentication provider needs to redirect to. For example: https://auth.expo.io/@your-username/your-app-slug. You can pass an additional path component to be appended to the default redirect URL.
Note This method will throw an exception if you're using the bare workflow on native.
Returns:
string
Example
const url = AuthSession.getRedirectUrl('redirect');

// Managed: https://auth.expo.io/@your-username/your-app-slug/redirect
// Web: https://localhost:19006/redirect
AuthSession.issuerWithWellKnownUrl(issuer)
Parameter	Type
issuer	string

Append the well known resources path and OpenID connect discovery document path to a URL https://tools.ietf.org/html/rfc5785
Returns:
string
AuthSession.loadAsync(config, issuerOrDiscovery)
Parameter	Type	Description
config	AuthRequestConfig
A valid AuthRequestConfig that specifies what provider to use.

issuerOrDiscovery	IssuerOrDiscovery
A loaded DiscoveryDocument or issuer URL. (Only authorizationEndpoint is required for requesting an authorization code).

Build an AuthRequest and load it before returning.
Returns:
Promise<AuthRequest>
Returns an instance of AuthRequest that can be used to prompt the user for authorization.
AuthSession.makeRedirectUri(options)
Parameter	Type	Description
options(optional)	AuthSessionRedirectUriOptions
Additional options for configuring the path.
Default:{}

Create a redirect url for the current platform and environment. You need to manually define the redirect that will be used in a bare workflow React Native app, or an Expo standalone app, this is because it cannot be inferred automatically.
•	Web: Generates a path based on the current window.location. For production web apps, you should hard code the URL as well.
•	Managed workflow: Uses the scheme property of your app config.
•	Bare workflow: Will fallback to using the native option for bare workflow React Native apps.
Returns:
string
The redirectUri to use in an authentication request.
Example
const redirectUri = makeRedirectUri({
  scheme: 'my-scheme',
  path: 'redirect'
});
// Development Build: my-scheme://redirect
// Expo Go: exp://127.0.0.1:8081/--/redirect
// Web dev: https://localhost:19006/redirect
// Web prod: https://yourwebsite.com/redirect

const redirectUri2 = makeRedirectUri({
  scheme: 'scheme2',
  preferLocalhost: true,
  isTripleSlashed: true,
});
// Development Build: scheme2:///
// Expo Go: exp://localhost:8081
// Web dev: https://localhost:19006
// Web prod: https://yourwebsite.com
Show More
AuthSession.refreshAsync(config, discovery)
Parameter	Type	Description
config	RefreshTokenRequestConfig
Configuration used to refresh the given access token.
discovery	Pick<DiscoveryDocument, 'tokenEndpoint'>
The tokenEndpoint for a provider.

Refresh an access token.
•	If the provider didn't return a refresh_token then the access token may not be refreshed.
•	If the provider didn't return a expires_in then it's assumed that the token does not expire.
•	Determine if a token needs to be refreshed via TokenResponse.isTokenFresh() or shouldRefresh() on an instance of TokenResponse.
Returns:
Promise<TokenResponse>
Returns a discovery document with a valid tokenEndpoint URL.
See: Section 6.
AuthSession.requestAsync(requestUrl, fetchRequest)
Parameter	Type
requestUrl	string
fetchRequest	FetchRequest


Returns:
Promise<T>
AuthSession.resolveDiscoveryAsync(issuerOrDiscovery)
Parameter	Type
issuerOrDiscovery	IssuerOrDiscovery


Utility method for resolving the discovery document from an issuer or object.
Returns:
Promise<DiscoveryDocument>
AuthSession.revokeAsync(config, discovery)
Parameter	Type	Description
config	RevokeTokenRequestConfig
Configuration used to revoke a refresh or access token.
discovery	Pick<DiscoveryDocument, 'revocationEndpoint'>
The revocationEndpoint for a provider.

Revoke a token with a provider. This makes the token unusable, effectively requiring the user to login again.
Returns:
Promise<boolean>
Returns a discovery document with a valid revocationEndpoint URL. Many providers do not support this feature.
Types
AccessTokenRequestConfig
Config used to exchange an authorization code for an access token.
See: Section 4.1.3
Type: TokenRequestConfig extended by:
Property	Type	Description
code	string	The authorization code received from the authorization server.
redirectUri	string	If the redirectUri parameter was included in the AuthRequest, then it must be supplied here as well.
Section 3.1.2

AuthDiscoveryDocument
Type: Pick<DiscoveryDocument, 'authorizationEndpoint'>
AuthErrorConfig
Type: ResponseErrorConfig extended by:
Property	Type	Description
state(optional)	string	Required only if state is used in the initial request
AuthRequestConfig
Represents an OAuth authorization request as JSON.
Property	Type	Description
clientId	string	A unique string representing the registration information provided by the client. The client identifier is not a secret; it is exposed to the resource owner and shouldn't be used alone for client authentication.
The client identifier is unique to the authorization server.
Section 2.2

clientSecret(optional)	string	Client secret supplied by an auth provider. There is no secure way to store this on the client.
Section 2.3.1

codeChallenge(optional)	string	Derived from the code verifier by using the CodeChallengeMethod.
Section 4.2

codeChallengeMethod(optional)	CodeChallengeMethod
Method used to generate the code challenge. You should never use Plain as it's not good enough for secure verification.
Default:CodeChallengeMethod.S256
extraParams(optional)	Record<string, string>	Extra query params that'll be added to the query string.
prompt(optional)	Prompt | Prompt[]
Informs the server if the user should be prompted to login or consent again. This can be used to present a dialog for switching accounts after the user has already been logged in.
Section 3.1.2.1

redirectUri	string	After completing an interaction with a resource owner the server will redirect to this URI. Learn more about linking in Expo.
Section 3.1.2

responseType(optional)	ResponseType | string
Specifies what is returned from the authorization server.
Section 3.1.1
Default:ResponseType.Code
scopes(optional)	string[]	List of strings to request access to.
Section 3.3

state(optional)	string	Used for protection against Cross-Site Request Forgery.

usePKCE(optional)	boolean	Should use Proof Key for Code Exchange.
Default:true
AuthRequestPromptOptions
Options passed to the promptAsync() method of AuthRequests. This can be used to configure how the web browser should look and behave.
Type: Omit<WebBrowserOpenOptions, 'windowFeatures'> extended by:
Property	Type	Description
url(optional)	string	URL to open when prompting the user. This usually should be defined internally and left undefined in most cases.
windowFeatures(optional)	WebBrowserWindowFeatures
Only for: 
Web


Features to use with window.open().
AuthSessionRedirectUriOptions
Options passed to makeRedirectUri.
Property	Type	Description
isTripleSlashed(optional)	boolean	Should the URI be triple slashed scheme:///path or double slashed scheme://path. Defaults to false.
native(optional)	string	Manual scheme to use in Bare and Standalone native app contexts. Takes precedence over all other properties. You must define the URI scheme that will be used in a custom built native application or standalone Expo application. The value should conform to your native app's URI schemes. You can see conformance with npx uri-scheme list.
path(optional)	string	Optional path to append to a URI. This will not be added to native.
preferLocalhost(optional)	boolean	Attempt to convert the Expo server IP address to localhost. This is useful for testing when your IP changes often, this will only work for iOS simulator.
Default:false
queryParams(optional)	Record<string, string | undefined>	Optional native scheme URI protocol <scheme>:// that must be built into your native app.
scheme(optional)	string	URI protocol <scheme>:// that must be built into your native app.
AuthSessionResult
Object returned after an auth request has completed.
•	If the user cancelled the authentication session by closing the browser, the result is { type: 'cancel' }.
•	If the authentication is dismissed manually with AuthSession.dismiss(), the result is { type: 'dismiss' }.
•	If the authentication flow is successful, the result is { type: 'success', params: Object, event: Object }.
•	If the authentication flow is returns an error, the result is { type: 'error', params: Object, error: string, event: Object }.
Type: object shaped as below:
Property	Type	Description
type	'cancel' | 'dismiss' | 'opened' | 'locked'	How the auth completed.
Or object shaped as below:
Property	Type	Description
authentication	TokenResponse | null
Returned when the auth finishes with an access_token property.
error(optional)	AuthError | null
Possible error if the auth failed with type error.
errorCode	string | null	Deprecated Legacy error code query param, use error instead.
params	Record<string, string>	Query params from the url as an object.
type	'error' | 'success'	How the auth completed.
url	string	Auth URL that was opened
DiscoveryDocument
Property	Type	Description
authorizationEndpoint(optional)	string	Used to interact with the resource owner and obtain an authorization grant.
Section 3.1

discoveryDocument(optional)	ProviderMetadata
All metadata about the provider.
endSessionEndpoint(optional)	string	URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP.
OPMetadata

registrationEndpoint(optional)	string	URL of the OP's Dynamic Client Registration Endpoint.

revocationEndpoint(optional)	string	Used to revoke a token (generally for signing out). The spec requires a revocation endpoint, but some providers (like Spotify) do not support one.
Section 2.1

tokenEndpoint(optional)	string	Used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly).
Section 3.2

userInfoEndpoint(optional)	string	URL of the OP's UserInfo Endpoint used to return info about the authenticated user.
UserInfo

Deprecated See Facebook authentication.
FacebookAuthRequestConfig
Type: ProviderAuthRequestConfig extended by:
Property	Type	Description
androidClientId(optional)	string	Android native client ID for use in development builds and bare workflow.
iosClientId(optional)	string	iOS native client ID for use in development builds and bare workflow.
webClientId(optional)	string	Expo web client ID for use in the browser.
FetchRequest
Property	Type	Description
body(optional)	Record<string, string>	-
dataType(optional)	string	-
headers(optional)	Headers
-
method(optional)	string	-
Deprecated See Google authentication.
GoogleAuthRequestConfig
Type: ProviderAuthRequestConfig extended by:
Property	Type	Description
androidClientId(optional)	string	Android native client ID for use in standalone, and bare workflow.
iosClientId(optional)	string	iOS native client ID for use in standalone, bare workflow, and custom clients.
language(optional)	string	Language code ISO 3166-1 alpha-2 region code, such as 'it' or 'pt-PT'.
loginHint(optional)	string	If the user's email address is known ahead of time, it can be supplied to be the default option. If the user has approved access for this app in the past then auth may return without any further interaction.
selectAccount(optional)	boolean	When true, the service will allow the user to switch between accounts (if possible).
Default:false.
shouldAutoExchangeCode(optional)	boolean	Should the hook automatically exchange the response code for an authentication token.
Defaults to true on installed apps (Android, iOS) when ResponseType.Code is used (default).
webClientId(optional)	string	Expo web client ID for use in the browser.
Headers
Type: Record<string, string> extended by:
Property	Type	Description
Accept(optional)	string	-
Authorization(optional)	string	-
Content-Type	string	-
Issuer
URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier.
Type: string
IssuerOrDiscovery
Literal Type: union
Acceptable values are: Issuer | DiscoveryDocument
PromptMethod(options)
Parameter	Type
options(optional)	AuthRequestPromptOptions

Returns:
Promise<AuthSessionResult>
ProviderAuthRequestConfig
Type: AuthRequestConfig extended by:
Property	Type	Description
language(optional)	string	Language for the sign in UI, in the form of ISO 639-1 language code optionally followed by a dash and ISO 3166-1 alpha-2 region code, such as 'it' or 'pt-PT'. Only set this value if it's different from the system default (which you can access via expo-localization).
ProviderMetadata
OpenID Providers have metadata describing their configuration. ProviderMetadata
Type: Record<string, string | boolean | string[]> ProviderMetadataEndpoints extended by:
Property	Type	Description
backchannel_logout_session_supported(optional)	boolean	-
backchannel_logout_supported(optional)	boolean	-
check_session_iframe(optional)	string	-
claim_types_supported(optional)	string[]	a list of the Claim Types that the OpenID Provider supports.
claims_locales_supported(optional)	string[]	Languages and scripts supported for values in Claims being returned.
claims_parameter_supported(optional)	boolean	Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.
Default:false
claims_supported(optional)	string[]	a list of the Claim Names of the Claims that the OpenID Provider may be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list.
code_challenge_methods_supported(optional)	CodeChallengeMethod[]
-
display_values_supported(optional)	string[]	a list of the display parameter values that the OpenID Provider supports.
frontchannel_logout_session_supported(optional)	boolean	-
frontchannel_logout_supported(optional)	boolean	-
grant_types_supported(optional)	string[]	JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports. Dynamic OpenID Providers MUST support the authorization_code and implicit Grant Type values and MAY support other Grant Types. If omitted, the default value is ["authorization_code", "implicit"].
id_token_signing_alg_values_supported(optional)	string[]	JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT. The algorithm RS256 MUST be included.
jwks_uri(optional)	string	URL of the OP's JSON Web Key Set JWK document.

op_policy_uri(optional)	string	URL that the OpenID Provider provides to the person registering the Client to read about the OP's requirements on how the Relying Party can use the data provided by the OP. The registration process SHOULD display this URL to the person registering the Client if it is given.
op_tos_uri(optional)	string	URL that the OpenID Provider provides to the person registering the Client to read about OpenID Provider's terms of service. The registration process should display this URL to the person registering the Client if it is given.
request_parameter_supported(optional)	boolean	Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
Default:false
request_uri_parameter_supported(optional)	boolean	Whether the OP supports use of the request_uri parameter, with true indicating support.
Default:true
require_request_uri_registration(optional)	boolean	Whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter. Pre-registration is required when the value is true.
Default:false
response_modes_supported(optional)	string[]	JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports, as specified in OAuth 2.0 Multiple Response Type Encoding Practices. If omitted, the default for Dynamic OpenID Providers is ["query", "fragment"].
response_types_supported(optional)	string[]	JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers must support the code, id_token, and the token id_token Response Type values
scopes_supported(optional)	string[]	JSON array containing a list of the OAuth 2.0 RFC6749 scope values that this server supports.
service_documentation(optional)	string	URL of a page containing human-readable information that developers might want or need to know when using the OpenID Provider. In particular, if the OpenID Provider does not support Dynamic Client Registration, then information on how to register Clients needs to be provided in this documentation.
subject_types_supported(optional)	string[]	JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.
token_endpoint_auth_methods_supported(optional)	('client_secret_post' | 'client_secret_basic' | 'client_secret_jwt' | 'private_key_jwt' | string)[]	A list of Client authentication methods supported by this Token Endpoint. If omitted, the default is ['client_secret_basic']
ui_locales_supported(optional)	string[]	Languages and scripts supported for the user interface, represented as a JSON array of BCP47 language tag values.

ProviderMetadataEndpoints
Property	Type	Description
authorization_endpoint	string	URL of the OP's OAuth 2.0 Authorization Endpoint.
device_authorization_endpoint(optional)	string	-
end_session_endpoint(optional)	string	-
introspection_endpoint(optional)	string	-
issuer(optional)	Issuer
-
registration_endpoint(optional)	string	-
revocation_endpoint(optional)	string	-
token_endpoint	string	URL of the OP's OAuth 2.0 Token Endpoint. This is required unless only the Implicit Flow is used.
userinfo_endpoint(optional)	string	URL of the OP's UserInfo Endpoint.
RefreshTokenRequestConfig
Config used to request a token refresh, or code exchange.
See: Section 6
Type: TokenRequestConfig extended by:
Property	Type	Description
refreshToken(optional)	string	The refresh token issued to the client.
ResponseErrorConfig
Server response error.
Type: Record<string, any> extended by:
Property	Type	Description
error	string	Error code
error_description(optional)	string	Additional message
error_uri(optional)	string	URI for more info on the error
RevokeTokenRequestConfig
Config used to revoke a token.
See: Section 2.1
Type: Partial<TokenRequestConfig> extended by:
Property	Type	Description
token	string	The token that the client wants to get revoked.
Section 3.1

tokenTypeHint(optional)	TokenTypeHint
A hint about the type of the token submitted for revocation.
Section 3.2

ServerTokenResponseConfig
Object returned from the server after a token response.
Property	Type	Description
access_token	string	-
expires_in(optional)	number	-
id_token(optional)	string	-
issued_at(optional)	number	-
refresh_token(optional)	string	-
scope(optional)	string	-
token_type(optional)	TokenType
-
TokenRequestConfig
Config used to request a token refresh, revocation, or code exchange.
Property	Type	Description
clientId	string	A unique string representing the registration information provided by the client. The client identifier is not a secret; it is exposed to the resource owner and shouldn't be used alone for client authentication.
The client identifier is unique to the authorization server.
Section 2.2

clientSecret(optional)	string	Client secret supplied by an auth provider. There is no secure way to store this on the client.
Section 2.3.1

extraParams(optional)	Record<string, string>	Extra query params that'll be added to the query string.
scopes(optional)	string[]	List of strings to request access to.
Section 3.3

TokenResponseConfig
Property	Type	Description
accessToken	string	The access token issued by the authorization server.
Section 4.2.2

expiresIn(optional)	number	The lifetime in seconds of the access token.
For example, the value 3600 denotes that the access token will expire in one hour from the time the response was generated.
If omitted, the authorization server should provide the expiration time via other means or document the default value.
Section 4.2.2

idToken(optional)	string	ID Token value associated with the authenticated session.
TokenResponse

issuedAt(optional)	number	Time in seconds when the token was received by the client.
refreshToken(optional)	string	The refresh token, which can be used to obtain new access tokens using the same authorization grant.
Section 5.1

scope(optional)	string	The scope of the access token. Only required if it's different to the scope that was requested by the client.
Section 3.3

state(optional)	string	Required if the "state" parameter was present in the client authorization request. The exact value received from the client.
Section 4.2.2

tokenType(optional)	TokenType
The type of the token issued. Value is case insensitive.
Section 7.1

TokenType
Literal Type: string
Access token type.
See: Section 7.1
Acceptable values are: 'bearer' | 'mac'
Enums
CodeChallengeMethod
Plain
CodeChallengeMethod.Plain ＝ "plain"
This should not be used. When used, the code verifier will be sent to the server as-is.
S256
CodeChallengeMethod.S256 ＝ "S256"
The default and recommended method for transforming the code verifier.
•	Convert the code verifier to ASCII.
•	Create a digest of the string using crypto method SHA256.
•	Convert the digest to Base64 and URL encode it.
GrantType
Grant type values used in dynamic client registration and auth requests.
See: Appendix A.10
AuthorizationCode
GrantType.AuthorizationCode ＝ "authorization_code"
Used for exchanging an authorization code for one or more tokens.
Section 4.1.3
ClientCredentials
GrantType.ClientCredentials ＝ "client_credentials"
Used for client credentials flow.
Section 4.4.2
Implicit
GrantType.Implicit ＝ "implicit"
Used when obtaining an access token.
Section 4.2
RefreshToken
GrantType.RefreshToken ＝ "refresh_token"
Used when exchanging a refresh token for a new token.
Section 6
Prompt
Informs the server if the user should be prompted to login or consent again. This can be used to present a dialog for switching accounts after the user has already been logged in. You should use this in favor of clearing cookies (which is mostly not possible on iOS).
See: Section 3.1.2.1.
Consent
Prompt.Consent ＝ "consent"
Server should prompt the user for consent before returning information to the client. If it cannot obtain consent, it must return an error, typically consent_required.
Login
Prompt.Login ＝ "login"
The server should prompt the user to reauthenticate. If it cannot reauthenticate the End-User, it must return an error, typically login_required.
None
Prompt.None ＝ "none"
Server must not display any auth or consent UI. Can be used to check for existing auth or consent. An error is returned if a user isn't already authenticated or the client doesn't have pre-configured consent for the requested claims, or does not fulfill other conditions for processing the request. The error code will typically be login_required, interaction_required, or another code defined in Section 3.1.2.6.
SelectAccount
Prompt.SelectAccount ＝ "select_account"
Server should prompt the user to select an account. Can be used to switch accounts. If it can't obtain an account selection choice made by the user, it must return an error, typically account_selection_required.
ResponseType
The client informs the authorization server of the desired grant type by using the response type.
See: Section 3.1.1.
Code
ResponseType.Code ＝ "code"
For requesting an authorization code as described by Section 4.1.1.
IdToken
ResponseType.IdToken ＝ "id_token"
A custom registered type for getting an id_token from Google OAuth.
Token
ResponseType.Token ＝ "token"
For requesting an access token (implicit grant) as described by Section 4.2.1.
TokenTypeHint
A hint about the type of the token submitted for revocation. If not included then the server should attempt to deduce the token type.
See: Section 2.1
AccessToken
TokenTypeHint.AccessToken ＝ "access_token"
Access token.
Section 1.4
RefreshToken
TokenTypeHint.RefreshToken ＝ "refresh_token"
Refresh token.
Section 1.5
Advanced usage
Filtering out AuthSession events in Linking handlers
There are many reasons why you might want to handle inbound links into your app, such as push notifications or just regular deep linking (you can read more about this in the Linking); authentication redirects are only one type of deep link, and AuthSession handles these particular links for you. In your own Linking.addEventListener handlers, you can filter out deep links that are handled by AuthSession by checking if the URL includes the +expo-auth-session string -- if it does, you can ignore it. This works because AuthSession adds +expo-auth-session to the default returnUrl; however, if you provide your own returnUrl, you may want to consider adding a similar identifier to enable you to filter out AuthSession events from other handlers.
With React Navigation
If you are using deep linking with React Navigation, filtering through Linking.addEventListener will not be sufficient because deep linking is handled differently. Instead, to filter these events, add a custom getStateFromPath function to your linking configuration, and then filter by URL in the same way as described above.

#12

Expo BackgroundTask

GitHub

npm

A library that provides an API for running background tasks.
Android
iOS (device only)
Bundled version:
~0.2.7
________________________________________
expo-background-task provides an API to run deferrable background tasks in a way that optimizes battery and power consumption on the end user's device. This module uses the WorkManager API on Android and the BGTaskScheduler API on iOS to schedule tasks. It also uses the expo-task-manager Native API to run JavaScript tasks.

 
Watch: Expo Background Task Deep Dive

Background tasks
A background task is a deferrable unit of work that is performed in the background, outside your app's lifecycle. This is useful for tasks that need to be executed when the app is inactive, such as syncing data with a server, fetching new content, or even checking if there are any expo-updates.
When are background tasks run?
The Expo Background Task API leverages each platform to execute tasks at the most optimal time for both the user and the device when the app is in the background.
This means that the task may not run immediately after it is scheduled, but it will run at some point in the future if the system decides so. You can specify a minimum interval in minutes for the task to run. The task will execute sometime after the interval has passed, provided the specified conditions are met.
A background task will only run if the battery has enough charge (or the device is plugged into power) and the network is available. Without these conditions, the task won't execute. The exact behavior will vary depending on the operating system.
When will they be stopped?
Background tasks are managed by platform APIs and system constraints. Knowing when tasks stop helps plan their use effectively.
•	Background tasks are stopped if the user kills the app. Tasks resume when the app is restarted.
•	If the system stops the app or the device reboots, background tasks will resume, and the app will be restarted.
On Android, removing an app from the recent apps list doesn't completely stop it, whereas on iOS, swiping it away in the app switcher fully terminates it.
On Android, behavior varies by device vendor. For example, some implementations treat removing an app from the recent apps list as killing it. Read more about these differences here: https://dontkillmyapp.com.
Platform differences
Android 
Android
On Android, the WorkManager API allows specifying a minimum interval for a task to run (minimum 15 minutes). The task will execute sometime after the interval has passed, provided the specified conditions are met.
iOS 
iOS
On iOS, the BGTaskScheduler API decides the best time to launch your background task. The system will consider the battery level, the network availability, and the user's usage patterns to determine when to run the task. You can still specify a minimum interval for the task to run, but the system may choose to run the task at a later time.
Known limitations
iOS 
iOS
The Background Tasks API is unavailable on iOS simulators. It is only available when running on a physical device.
Installation
Terminal
Copy
- npx expo install expo-background-task
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration 
iOS
To be able to run background tasks on iOS, you need to add the processing value to the UIBackgroundModes array in your app's Info.plist file. This is required for background fetch to work properly.
If you're using CNG, the required UIBackgroundModes configuration will be applied automatically by prebuild.
Configure UIBackgroundModes manually on iOS
Usage
Below is an example that demonstrates how to use expo-background-task.
App.tsx
Copy
import * as BackgroundTask from 'expo-background-task';
import * as TaskManager from 'expo-task-manager';
import { useEffect, useState } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';

const BACKGROUND_TASK_IDENTIFIER = 'background-task';

// Register and create the task so that it is available also when the background task screen
// (a React component defined later in this example) is not visible.
// Note: This needs to be called in the global scope, not in a React component.
TaskManager.defineTask(BACKGROUND_TASK_IDENTIFIER, async () => {
  try {
    const now = Date.now();
    console.log(`Got background task call at date: ${new Date(now).toISOString()}`);
  } catch (error) {
    console.error('Failed to execute the background task:', error);
    return BackgroundTask.BackgroundTaskResult.Failed;
  }
  return BackgroundTask.BackgroundTaskResult.Success;
});

// 2. Register the task at some point in your app by providing the same name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function registerBackgroundTaskAsync() {
  return BackgroundTask.registerTaskAsync(BACKGROUND_TASK_IDENTIFIER);
}

// 3. (Optional) Unregister tasks by specifying the task name
// This will cancel any future background task calls that match the given name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function unregisterBackgroundTaskAsync() {
  return BackgroundTask.unregisterTaskAsync(BACKGROUND_TASK_IDENTIFIER);
}

export default function BackgroundTaskScreen() {
  const [isRegistered, setIsRegistered] = useState<boolean>(false);
  const [status, setStatus] = useState<BackgroundTask.BackgroundTaskStatus | null>(null);

  useEffect(() => {
    updateAsync();
  }, []);

  const updateAsync = async () => {
    const status = await BackgroundTask.getStatusAsync();
    setStatus(status);
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_TASK_IDENTIFIER);
    setIsRegistered(isRegistered);
  };

  const toggle = async () => {
    if (!isRegistered) {
      await registerBackgroundTaskAsync();
    } else {
      await unregisterBackgroundTaskAsync();
    }
    await updateAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background Task Service Availability:{' '}
          <Text style={styles.boldText}>
            {status ? BackgroundTask.BackgroundTaskStatus[status] : null}
          </Text>
        </Text>
      </View>
      <Button
        disabled={status === BackgroundTask.BackgroundTaskStatus.Restricted}
        title={isRegistered ? 'Cancel Background Task' : 'Schedule Background Task'}
        onPress={toggle}
      />
      <Button title="Check Background Task Status" onPress={updateAsync} />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});
Show More
Multiple background tasks
Since the Background Tasks API on iOS and the WorkManager API on Android limit the number of tasks that can be scheduled for a single app, Expo Background Task uses a single worker on both platforms. While you can define multiple JavaScript background tasks, they will all run through this single worker.
The last registered background task determines the minimum interval for execution.
Testing background tasks
Background tasks can be tested using the triggerTaskWorkerForTestingAsync method. This method will run all registered tasks directly on Android and invoke the BGTaskScheduler on iOS. This is useful for testing the behavior of your background tasks without having to wait for the system to trigger them.
This method is only available in development mode. It will not work in production builds.
import * as BackgroundTask from 'expo-background-task';
import { Button } from 'react-native';

function App() {
  const triggerTask = async () => {
    await BackgroundTask.triggerTaskWorkerForTestingAsync();
  };

  return <Button title="Trigger Background Task" onPress={triggerTask} />;
}
Inspecting background tasks 
Android
To troubleshoot or debug issues with background tasks on Android, use the adb tool included with the Android SDK to inspect scheduled tasks:
Terminal
Copy
- adb shell dumpsys jobscheduler | grep -A 40 -m 1 <package-name>
The output from this command will show you the scheduled tasks for your app, including their status, constraints, and other information. Look for the JOB line to find the ID of the job and other details in the output:
JOB #u0a453/275: 216a359 <package-name>/androidx.work.impl.background.systemjob.SystemJobService
  u0a453 tag=*job*/<package-name>/androidx.work.impl.background.systemjob.SystemJobService#275
  Source: uid=u0a453 user=0 pkg=<package-name>
  ...
  Required constraints: TIMING_DELAY CONNECTIVITY UID_NOT_RESTRICTED [0x90100000]
  Preferred constraints:
  Dynamic constraints:
  Satisfied constraints: CONNECTIVITY DEVICE_NOT_DOZING BACKGROUND_NOT_RESTRICTED TARE_WEALTH WITHIN_QUOTA UID_NOT_RESTRICTED [0x1b500000]
  Unsatisfied constraints: TIMING_DELAY [0x80000000]
  ...
  Enqueue time: -8m12s280ms
  Run time: earliest=+6m47s715ms, latest=none, original latest=none
  Restricted due to: none.
  Ready: false (job=false user=true !restricted=true !pending=true !active=true !backingup=true comp=true)
The first line contains the Job ID (275). The Run time: earliest value indicates the earliest time the task may start, while enqueue time shows how long ago the task was scheduled.
To force a task to run, use the adb shell am broadcast command. Move your app to the background before running this command, as the task will not run if the app is in the foreground.
Terminal
Copy
- adb shell cmd jobscheduler run -f <package-name> <JOB_ID>
Where JOB_ID would be the identifier of the job you want to run that you found in the previous step.
Troubleshooting background tasks 
iOS
iOS does not have a tool similar to adb for inspecting background tasks. To test background tasks on iOS, use the built-in triggerTaskWorkerForTestingAsync method. This method simulates the system triggering the task.
You can trigger this method from your app in debug mode (it does not work in production builds) to test the behavior of your background tasks without waiting for the system. If your background task configuration is incorrect, you will see the error description in the Xcode console:
No task request with identifier com.expo.modules.backgroundtask.processing has been scheduled
The above error tells you that you need to run prebuild to apply the changes to your app's configuration.
This error also means you must run prebuild to apply your background task configuration to the app. Additionally, ensure you have defined and registered a background task as shown in this example.
API
import * as BackgroundTask from 'expo-background-task';
Methods
BackgroundTask.getStatusAsync()
Returns the status for the Background Task API. On web, it always returns BackgroundTaskStatus.Restricted, while on native platforms it returns BackgroundTaskStatus.Available.
Returns:
Promise<BackgroundTaskStatus>
A BackgroundTaskStatus enum value or null if not available.
BackgroundTask.registerTaskAsync(taskName, options)
Parameter	Type	Description
taskName	string	Name of the task to register. The task needs to be defined first - see TaskManager.defineTask for more details.
options(optional)	BackgroundTaskOptions
An object containing the background task options.
Default:{}

Registers a background task with the given name. Registered tasks are saved in persistent storage and restored once the app is initialized.
Returns:
Promise<void>
Example
import * as TaskManager from 'expo-task-manager';

// Register the task outside of the component
TaskManager.defineTask(BACKGROUND_TASK_IDENTIFIER, () => {
  try {
    await AsyncStorage.setItem(LAST_TASK_DATE_KEY, Date.now().toString());
  } catch (error) {
    console.error('Failed to save the last fetch date', error);
    return BackgroundTaskResult.Failed;
  }
  return BackgroundTaskResult.Success;
});
You can now use the registerTaskAsync function to register the task:
BackgroundTask.registerTaskAsync(BACKGROUND_TASK_IDENTIFIER, {});
BackgroundTask.triggerTaskWorkerForTestingAsync()
When in debug mode this function will trigger running the background tasks. This function will only work for apps built in debug mode. @todo(chrfalch): When we have a usable devtools plugin we can enable this function.
Returns:
Promise<boolean>
A promise which fulfils when the task is triggered.
BackgroundTask.unregisterTaskAsync(taskName)
Parameter	Type	Description
taskName	string	Name of the task to unregister.

Unregisters a background task, so the application will no longer be executing this task.
Returns:
Promise<void>
A promise which fulfils when the task is fully unregistered.
Types
BackgroundTaskOptions
Options for registering a background task
Property	Type	Description
minimumInterval(optional)	number	Only for: 
Android


Inexact interval in minutes between subsequent repeats of the background tasks. The final interval may differ from the specified one to minimize wakeups and battery usage.
•	Defaults to once every 12 hours (The minimum interval is 15 minutes)
•	On iOS, the system determines the interval for background task execution, but will wait until the specified minimum interval has elapsed before starting a task.
Enums
BackgroundTaskResult
Return value for background tasks.
Success
BackgroundTaskResult.Success ＝ 1
The task finished successfully.
Failed
BackgroundTaskResult.Failed ＝ 2
The task failed.
BackgroundTaskStatus
Availability status for background tasks
Restricted
BackgroundTaskStatus.Restricted ＝ 1
Background tasks are unavailable.
Available
BackgroundTaskStatus.Available ＝ 2
Background tasks are available for the app.
#13

Expo Barometer

GitHub

npm

A library that provides access to device's barometer sensor.
Android
iOS (device only)
Bundled version:
~14.1.4
________________________________________
Barometer from expo-sensors provides access to the device barometer sensor to respond to changes in air pressure, which is measured in hectopascals (hPa).
Installation
Terminal
Copy
- npx expo install expo-sensors
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Basic Barometer usage
Copy
Open in Snack
import { useState } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { Barometer } from 'expo-sensors';

export default function App() {
  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggleListener = () => {
    subscription ? unsubscribe() : subscribe();
  };

  const subscribe = () => {
    setSubscription(Barometer.addListener(setData));
  };

  const unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  return (
    <View style={styles.wrapper}>
      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>
      <Text>Pressure: {pressure} hPa</Text>
      <Text>
        Relative Altitude:{' '}
        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}
      </Text>
      <TouchableOpacity onPress={toggleListener} style={styles.button}>
        <Text>Toggle listener</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  button: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
    marginTop: 15,
  },
  wrapper: {
    flex: 1,
    alignItems: 'stretch',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
});
Show More
API
import { Barometer } from 'expo-sensors';
Classes
Barometer
Only for: 
Android
iOS


Type: Class extends DeviceSensor<BarometerMeasurement>
Barometer Methods
addListener(listener)
Parameter	Type	Description
listener	Listener<BarometerMeasurement>
A callback that is invoked when a barometer update is available. When invoked, the listener is provided with a single argument that is BarometerMeasurement.

Subscribe for updates to the barometer.
Returns:
EventSubscription
A subscription that you can call remove() on when you would like to unsubscribe the listener.
Example
const subscription = Barometer.addListener(({ pressure, relativeAltitude }) => {
  console.log({ pressure, relativeAltitude });
});
getListenerCount()
Returns the registered listeners count.
Returns:
number
getPermissionsAsync()
Checks user's permissions for accessing sensor.
Returns:
Promise<PermissionResponse>
hasListeners()
Returns boolean which signifies if sensor has any listeners registered.
Returns:
boolean
isAvailableAsync()
You should always check the sensor availability before attempting to use it.
Check the availability of the device barometer. Requires at least Android 2.3 (API Level 9) and iOS 8.
Returns:
Promise<boolean>
A promise that resolves to a boolean denoting the availability of the sensor.
removeAllListeners()
Removes all registered listeners.
Returns:
void
removeSubscription(subscription)
Parameter	Type	Description
subscription	EventSubscription	A subscription to remove.

Removes the given subscription.
Returns:
void
requestPermissionsAsync()
Asks the user to grant permissions for accessing sensor.
Returns:
Promise<PermissionResponse>
setUpdateInterval(intervalMs)
Parameter	Type	Description
intervalMs	number	Desired interval in milliseconds between sensor updates.
Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.
If you need an update interval less than 200ms, you should:
•	add android.permission.HIGH_SAMPLING_RATE_SENSORS to app.json permissions field
•	or if you are using bare workflow, add <uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS"/> to AndroidManifest.xml.

Set the sensor update interval.
Returns:
void
Interfaces
Subscription
A subscription object that allows to conveniently remove an event listener from the emitter.
Subscription Methods
remove()
Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.
Returns:
void
Types
BarometerMeasurement
The altitude data returned from the native sensors.
Property	Type	Description
pressure	number	Measurement in hectopascals (hPa).
relativeAltitude(optional)	number	Only for: 
iOS


Measurement in meters (m).
timestamp	number	Timestamp of the measurement in seconds.
PermissionExpiration
Literal Type: union
Permission expiration time. Currently, all permissions are granted permanently.
Acceptable values are: 'never' | number
PermissionResponse
An object obtained by permissions get and request functions.
Property	Type	Description
canAskAgain	boolean	Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.
expires	PermissionExpiration
Determines time when the permission expires.
granted	boolean	A convenience boolean that indicates if the permission is granted.
status	PermissionStatus
Determines the status of the permission.
Enums
PermissionStatus
DENIED
PermissionStatus.DENIED ＝ "denied"
User has denied the permission.
GRANTED
PermissionStatus.GRANTED ＝ "granted"
User has granted the permission.
UNDETERMINED
PermissionStatus.UNDETERMINED ＝ "undetermined"
User hasn't granted or denied the permission yet.
Units and providers
OS	Units	Provider	Description
iOS	hPa	CMAltimeter
Altitude events reflect the change in the current altitude, not the absolute altitude.
Android	hPa	Sensor.TYPE_PRESSURE
Monitoring air pressure changes.
Web			This sensor is not available on the web and cannot be accessed. An UnavailabilityError will be thrown if you attempt to get data.

#14

Expo Battery

GitHub

npm

A library that provides battery information for the physical device, as well as corresponding event listeners.
Android
iOS (device only)
Web
Bundled version:
~9.1.4
________________________________________
expo-battery provides battery information for the physical device (such as battery level, whether or not the device is charging, and more) as well as corresponding event listeners.
Installation
Terminal
Copy
- npx expo install expo-battery
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Basic Battery Usage
Copy
Open in Snack
import { useBatteryLevel } from 'expo-battery';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const batteryLevel = useBatteryLevel();

  return (
    <View style={styles.container}>
      <Text>Current Battery Level: {batteryLevel}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});
Show More
API
import * as Battery from 'expo-battery';
Hooks
useBatteryLevel()
Gets the device's battery level, as in getBatteryLevelAsync.
Returns:
number
The battery level of the device.
Example
const batteryLevel = useBatteryLevel();
useBatteryState()
Gets the device's battery state, as in getBatteryStateAsync.
Returns:
BatteryState
The battery state of the device.
Example
const batteryState = useBatteryState();
useLowPowerMode()
Boolean that indicates if the device is in low power or power saver mode, as in isLowPowerModeEnabledAsync.
Returns:
boolean
Returns a boolean indicating if the device is in low power mode.
Example
const lowPowerMode = useLowPowerMode();
usePowerState()
Gets the device's power state information, as in getPowerStateAsync.
Returns:
PowerState
Returns power state information.
Example
const { lowPowerMode, batteryLevel, batteryState } = usePowerState();
Methods
getBatteryLevelAsync()
Gets the battery level of the device as a number between 0 and 1, inclusive. If the device does not support retrieving the battery level, this method returns -1. On web, this method always returns 1.
Returns:
Promise<number>
A Promise that fulfils with a number between 0 and 1 representing the battery level, or -1 if the device does not provide it.
Example
await Battery.getBatteryLevelAsync();
// 0.759999
getBatteryStateAsync()
Tells the battery's current state. On web, this always returns BatteryState.UNKNOWN.
Returns:
Promise<BatteryState>
Returns a Promise which fulfills with a Battery.BatteryState enum value for whether the device is any of the four states.
Example
await Battery.getBatteryStateAsync();
// BatteryState.CHARGING
getPowerStateAsync()
Gets the power state of the device including the battery level, whether it is plugged in, and if the system is currently operating in Power Saver Mode (Android) or Low Power Mode (iOS). This method re-throws any errors that occur when retrieving any of the power-state information.
Returns:
Promise<PowerState>
Returns a Promise which fulfills with PowerState object.
Example
await Battery.getPowerStateAsync();
// {
//   batteryLevel: 0.759999,
//   batteryState: BatteryState.UNPLUGGED,
//   lowPowerMode: true,
// }
isAvailableAsync()
Resolves with whether the battery API is available on the current device. The value of this property is true on Android and physical iOS devices and false on iOS simulators. On web, it depends on whether the browser supports the web battery API.
Returns:
Promise<boolean>
isBatteryOptimizationEnabledAsync()
Checks whether battery optimization is enabled for your application. If battery optimization is enabled for your app, background tasks might be affected when your app goes into doze mode state. (only on Android 6.0 or later)
Returns:
Promise<boolean>
Returns a Promise which fulfills with a boolean value of either true or false, indicating whether the battery optimization is enabled or disabled, respectively. (Android only)
Example
await Battery.isBatteryOptimizationEnabledAsync();
// true
isLowPowerModeEnabledAsync()
Gets the current status of Power Saver mode on Android and Low Power mode on iOS. If a platform doesn't support Low Power mode reporting (like web, older Android devices), the reported low-power state is always false, even if the device is actually in low-power mode.
Returns:
Promise<boolean>
Returns a Promise which fulfills with a boolean value of either true or false, indicating whether low power mode is enabled or disabled.
Example
Power Saver Mode (Android) or Low Power Mode (iOS) are enabled.
await Battery.isLowPowerModeEnabledAsync();
// true
Event Subscriptions
addBatteryLevelListener(listener)
Parameter	Type	Description
listener	(event: BatteryLevelEvent) => void	A callback that is invoked when battery level changes. The callback is provided a single argument that is an object with a batteryLevel key.

Subscribe to the battery level change updates.
On Android devices, the event fires only when significant changes happens, which is when the battery level drops below android.intent.action.BATTERY_LOW or rises above android.intent.action.BATTERY_OKAY from a low battery level. See Monitor the Battery Level and Charging State in Android documentation for more information.
On iOS devices, the event fires when the battery level drops one percent or more, but is only fired once per minute at maximum.
On web, the event never fires.
Returns:
EventSubscription
A Subscription object on which you can call remove() to unsubscribe from the listener.
addBatteryStateListener(listener)
Parameter	Type	Description
listener	(event: BatteryStateEvent) => void	A callback that is invoked when battery state changes. The callback is provided a single argument that is an object with a batteryState key.

Subscribe to the battery state change updates to receive an object with a Battery.BatteryState enum value for whether the device is any of the four states.
On web, the event never fires.
Returns:
EventSubscription
A Subscription object on which you can call remove() to unsubscribe from the listener.
addLowPowerModeListener(listener)
Parameter	Type	Description
listener	(event: PowerModeEvent) => void	A callback that is invoked when Power Saver Mode (Android) or Low Power Mode (iOS) changes. The callback is provided a single argument that is an object with a lowPowerMode key.

Subscribe to Power Saver Mode (Android) or Low Power Mode (iOS) updates. The event fires whenever the power mode is toggled.
On web, the event never fires.
Returns:
EventSubscription
A Subscription object on which you can call remove() to unsubscribe from the listener.
Interfaces
Subscription
A subscription object that allows to conveniently remove an event listener from the emitter.
Subscription Methods
remove()
Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.
Returns:
void
Types
BatteryLevelEvent
Property	Type	Description
batteryLevel	number	A number between 0 and 1, inclusive, or -1 if the battery level is unknown.
BatteryStateEvent
Property	Type	Description
batteryState	BatteryState
An enum value representing the battery state.
PowerModeEvent
Property	Type	Description
lowPowerMode	boolean	A boolean value, true if lowPowerMode is on, false if lowPowerMode is off.
PowerState
Property	Type	Description
batteryLevel	number	A number between 0 and 1, inclusive, or -1 if the battery level is unknown.
batteryState	BatteryState
An enum value representing the battery state.
lowPowerMode	boolean	A boolean value, true if lowPowerMode is on, false if lowPowerMode is off.
Enums
BatteryState
UNKNOWN
BatteryState.UNKNOWN ＝ 0
If the battery state is unknown or inaccessible.
UNPLUGGED
BatteryState.UNPLUGGED ＝ 1
If battery is not charging or discharging.
CHARGING
BatteryState.CHARGING ＝ 2
If battery is charging.
FULL
BatteryState.FULL ＝ 3
If the battery level is full.

#15

Expo Battery

GitHub

npm

A library that provides battery information for the physical device, as well as corresponding event listeners.
Android
iOS (device only)
Web
Bundled version:
~9.1.4
________________________________________
expo-battery provides battery information for the physical device (such as battery level, whether or not the device is charging, and more) as well as corresponding event listeners.
Installation
Terminal
Copy
- npx expo install expo-battery
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Basic Battery Usage
Copy
Open in Snack
import { useBatteryLevel } from 'expo-battery';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const batteryLevel = useBatteryLevel();

  return (
    <View style={styles.container}>
      <Text>Current Battery Level: {batteryLevel}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});
Show More
API
import * as Battery from 'expo-battery';
Hooks
useBatteryLevel()
Gets the device's battery level, as in getBatteryLevelAsync.
Returns:
number
The battery level of the device.
Example
const batteryLevel = useBatteryLevel();
useBatteryState()
Gets the device's battery state, as in getBatteryStateAsync.
Returns:
BatteryState
The battery state of the device.
Example
const batteryState = useBatteryState();
useLowPowerMode()
Boolean that indicates if the device is in low power or power saver mode, as in isLowPowerModeEnabledAsync.
Returns:
boolean
Returns a boolean indicating if the device is in low power mode.
Example
const lowPowerMode = useLowPowerMode();
usePowerState()
Gets the device's power state information, as in getPowerStateAsync.
Returns:
PowerState
Returns power state information.
Example
const { lowPowerMode, batteryLevel, batteryState } = usePowerState();
Methods
getBatteryLevelAsync()
Gets the battery level of the device as a number between 0 and 1, inclusive. If the device does not support retrieving the battery level, this method returns -1. On web, this method always returns 1.
Returns:
Promise<number>
A Promise that fulfils with a number between 0 and 1 representing the battery level, or -1 if the device does not provide it.
Example
await Battery.getBatteryLevelAsync();
// 0.759999
getBatteryStateAsync()
Tells the battery's current state. On web, this always returns BatteryState.UNKNOWN.
Returns:
Promise<BatteryState>
Returns a Promise which fulfills with a Battery.BatteryState enum value for whether the device is any of the four states.
Example
await Battery.getBatteryStateAsync();
// BatteryState.CHARGING
getPowerStateAsync()
Gets the power state of the device including the battery level, whether it is plugged in, and if the system is currently operating in Power Saver Mode (Android) or Low Power Mode (iOS). This method re-throws any errors that occur when retrieving any of the power-state information.
Returns:
Promise<PowerState>
Returns a Promise which fulfills with PowerState object.
Example
await Battery.getPowerStateAsync();
// {
//   batteryLevel: 0.759999,
//   batteryState: BatteryState.UNPLUGGED,
//   lowPowerMode: true,
// }
isAvailableAsync()
Resolves with whether the battery API is available on the current device. The value of this property is true on Android and physical iOS devices and false on iOS simulators. On web, it depends on whether the browser supports the web battery API.
Returns:
Promise<boolean>
isBatteryOptimizationEnabledAsync()
Checks whether battery optimization is enabled for your application. If battery optimization is enabled for your app, background tasks might be affected when your app goes into doze mode state. (only on Android 6.0 or later)
Returns:
Promise<boolean>
Returns a Promise which fulfills with a boolean value of either true or false, indicating whether the battery optimization is enabled or disabled, respectively. (Android only)
Example
await Battery.isBatteryOptimizationEnabledAsync();
// true
isLowPowerModeEnabledAsync()
Gets the current status of Power Saver mode on Android and Low Power mode on iOS. If a platform doesn't support Low Power mode reporting (like web, older Android devices), the reported low-power state is always false, even if the device is actually in low-power mode.
Returns:
Promise<boolean>
Returns a Promise which fulfills with a boolean value of either true or false, indicating whether low power mode is enabled or disabled.
Example
Power Saver Mode (Android) or Low Power Mode (iOS) are enabled.
await Battery.isLowPowerModeEnabledAsync();
// true
Event Subscriptions
addBatteryLevelListener(listener)
Parameter	Type	Description
listener	(event: BatteryLevelEvent) => void	A callback that is invoked when battery level changes. The callback is provided a single argument that is an object with a batteryLevel key.

Subscribe to the battery level change updates.
On Android devices, the event fires only when significant changes happens, which is when the battery level drops below android.intent.action.BATTERY_LOW or rises above android.intent.action.BATTERY_OKAY from a low battery level. See Monitor the Battery Level and Charging State in Android documentation for more information.
On iOS devices, the event fires when the battery level drops one percent or more, but is only fired once per minute at maximum.
On web, the event never fires.
Returns:
EventSubscription
A Subscription object on which you can call remove() to unsubscribe from the listener.
addBatteryStateListener(listener)
Parameter	Type	Description
listener	(event: BatteryStateEvent) => void	A callback that is invoked when battery state changes. The callback is provided a single argument that is an object with a batteryState key.

Subscribe to the battery state change updates to receive an object with a Battery.BatteryState enum value for whether the device is any of the four states.
On web, the event never fires.
Returns:
EventSubscription
A Subscription object on which you can call remove() to unsubscribe from the listener.
addLowPowerModeListener(listener)
Parameter	Type	Description
listener	(event: PowerModeEvent) => void	A callback that is invoked when Power Saver Mode (Android) or Low Power Mode (iOS) changes. The callback is provided a single argument that is an object with a lowPowerMode key.

Subscribe to Power Saver Mode (Android) or Low Power Mode (iOS) updates. The event fires whenever the power mode is toggled.
On web, the event never fires.
Returns:
EventSubscription
A Subscription object on which you can call remove() to unsubscribe from the listener.
Interfaces
Subscription
A subscription object that allows to conveniently remove an event listener from the emitter.
Subscription Methods
remove()
Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.
Returns:
void
Types
BatteryLevelEvent
Property	Type	Description
batteryLevel	number	A number between 0 and 1, inclusive, or -1 if the battery level is unknown.
BatteryStateEvent
Property	Type	Description
batteryState	BatteryState
An enum value representing the battery state.
PowerModeEvent
Property	Type	Description
lowPowerMode	boolean	A boolean value, true if lowPowerMode is on, false if lowPowerMode is off.
PowerState
Property	Type	Description
batteryLevel	number	A number between 0 and 1, inclusive, or -1 if the battery level is unknown.
batteryState	BatteryState
An enum value representing the battery state.
lowPowerMode	boolean	A boolean value, true if lowPowerMode is on, false if lowPowerMode is off.
Enums
BatteryState
UNKNOWN
BatteryState.UNKNOWN ＝ 0
If the battery state is unknown or inaccessible.
UNPLUGGED
BatteryState.UNPLUGGED ＝ 1
If battery is not charging or discharging.
CHARGING
BatteryState.CHARGING ＝ 2
If battery is charging.
FULL
BatteryState.FULL ＝ 3
If the battery level is full.

#16

Expo BlurView

GitHub

npm

A React component that blurs everything underneath the view.
Android
iOS
tvOS
Web
Bundled version:
~14.1.5
________________________________________
A React component that blurs everything underneath the view. Common usage of this is for navigation bars, tab bars, and modals.
BlurView on Android is an experimental feature. To enable it use the experimentalBlurMethod prop.
Known issues
The blur effect does not update when BlurView is rendered before dynamic content is rendered using, for example, FlatList. To fix this, make sure that BlurView is rendered after the dynamic content component. For example:
<View>
  <FlatList />
  <BlurView />
</View>
Installation
Terminal
Copy
- npx expo install expo-blur
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Basic BlurView usage
Copy
Open in Snack
import { Text, StyleSheet, View, SafeAreaView } from 'react-native';
import { BlurView } from 'expo-blur';

export default function App() {
  const text = 'Hello, my container is blurring contents underneath!';
  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.background}>
        {[...Array(20).keys()].map(i => (
          <View
            key={`box-${i}`}
            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}
          />
        ))}
      </View>
      <BlurView intensity={100} style={styles.blurContainer}>
        <Text style={styles.text}>{text}</Text>
      </BlurView>
      <BlurView intensity={80} tint="light" style={styles.blurContainer}>
        <Text style={styles.text}>{text}</Text>
      </BlurView>
      <BlurView intensity={90} tint="dark" style={styles.blurContainer}>
        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>
      </BlurView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  blurContainer: {
    flex: 1,
    padding: 20,
    margin: 16,
    textAlign: 'center',
    justifyContent: 'center',
    overflow: 'hidden',
    borderRadius: 20,
  },
  background: {
    flex: 1,
    flexWrap: 'wrap',
    ...StyleSheet.absoluteFill,
  },
  box: {
    width: '25%',
    height: '20%',
  },
  boxEven: {
    backgroundColor: 'orangered',
  },
  boxOdd: {
    backgroundColor: 'gold',
  },
  text: {
    fontSize: 24,
    fontWeight: '600',
  },
});
Show More
API
import { BlurView } from 'expo-blur';
Component
BlurView
Type: React.Component<BlurViewProps>
BlurViewProps
blurReductionFactor
Only for: 
Android


Optional • Type: number • Default: 4
A number by which the blur intensity will be divided on Android.
When using experimental blur methods on Android, the perceived blur intensity might differ from iOS at different intensity levels. This property can be used to fine tune it on Android to match it more closely with iOS.
experimentalBlurMethod
Only for: 
Android


Optional • Type: ExperimentalBlurMethod • Default: 'none'
Blur method to use on Android.
Currently, BlurView support is experimental on Android and may cause performance and graphical issues. It can be enabled by setting this property.
intensity
Optional • Type: number • Default: 50
A number from 1 to 100 to control the intensity of the blur effect.
You can animate this property using react-native-reanimated.
tint
Optional • Type: BlurTint • Default: 'default'
A tint mode which will be applied to the view.
Inherited Props
•	ViewProps
Types
BlurTint
Literal Type: string
Acceptable values are: 'light' | 'dark' | 'default' | 'extraLight' | 'regular' | 'prominent' | 'systemUltraThinMaterial' | 'systemThinMaterial' | 'systemMaterial' | 'systemThickMaterial' | 'systemChromeMaterial' | 'systemUltraThinMaterialLight' | 'systemThinMaterialLight' | 'systemMaterialLight' | 'systemThickMaterialLight' | 'systemChromeMaterialLight' | 'systemUltraThinMaterialDark' | 'systemThinMaterialDark' | 'systemMaterialDark' | 'systemThickMaterialDark' | 'systemChromeMaterialDark'
ExperimentalBlurMethod
Only for: 
Android


Literal Type: string
Blur method to use on Android.
•	'none' - Falls back to a semi-transparent view instead of rendering a blur effect.
•	'dimezisBlurView' - Uses a native blur view implementation based on BlurView library. This method may lead to decreased performance and rendering issues during transitions made by react-native-screens.
Acceptable values are: 'none' | 'dimezisBlurView'
Using borderRadius with BlurView
When using BlurView on Android and iOS, the borderRadius property is not applied when provided explicitly. To fix this, you can use the overflow: 'hidden' style since BlurView inherits props from <View>. See Usage for an example.

#17

Expo Brightness

GitHub

npm

A library that provides access to an API for getting and setting the screen brightness.
Android
iOS
Bundled version:
~13.1.4
________________________________________
An API to get and set screen brightness.
On Android, there is a global system-wide brightness setting, and each app has its own brightness setting that can optionally override the global setting. It is possible to set either of these values with this API. On iOS, the system brightness setting cannot be changed programmatically; instead, any changes to the screen brightness will persist until the device is locked or powered off.
Installation
Terminal
Copy
- npx expo install expo-brightness
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration
Are you using this library in an existing React Native app?
Usage
Basic Brightness Usage
Copy
Open in Snack
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Brightness from 'expo-brightness';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Brightness.requestPermissionsAsync();
      if (status === 'granted') {
        Brightness.setSystemBrightnessAsync(1);
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Brightness Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
Show More
API
import * as Brightness from 'expo-brightness';
Hooks
usePermissions(options)
Parameter	Type
options(optional)	PermissionHookOptions<object>


Check or request permissions to modify the system brightness. This uses both requestPermissionAsync and getPermissionsAsync to interact with the permissions.
Returns:
[null | PermissionResponse, RequestPermissionMethod<PermissionResponse>, GetPermissionMethod<PermissionResponse>]
Example
const [permissionResponse, requestPermission] = Brightness.usePermissions();
Methods
Brightness.getBrightnessAsync()
Gets the current brightness level of the device's main screen.
Returns:
Promise<number>
A Promise that fulfils with a number between 0 and 1, inclusive, representing the current screen brightness.
Brightness.getPermissionsAsync()
Checks user's permissions for accessing system brightness.
Returns:
Promise<PermissionResponse>
A promise that fulfils with an object of type PermissionResponse.
Brightness.getSystemBrightnessAsync()
Only for: 
Android


Gets the global system screen brightness.
Returns:
Promise<number>
A Promise that is resolved with a number between 0 and 1, inclusive, representing the current system screen brightness.
Brightness.getSystemBrightnessModeAsync()
Only for: 
Android


Gets the system brightness mode (e.g. whether or not the OS will automatically adjust the screen brightness depending on ambient light).
Returns:
Promise<BrightnessMode>
A Promise that fulfils with a BrightnessMode. Requires SYSTEM_BRIGHTNESS permissions.
Brightness.isAvailableAsync()
Returns whether the Brightness API is enabled on the current device. This does not check the app permissions.
Returns:
Promise<boolean>
Async boolean, indicating whether the Brightness API is available on the current device. Currently this resolves true on iOS and Android only.
Brightness.isUsingSystemBrightnessAsync()
Only for: 
Android


Returns a boolean specifying whether or not the current activity is using the system-wide brightness value.
Returns:
Promise<boolean>
A Promise that fulfils with true when the current activity is using the system-wide brightness value, and false otherwise.
Brightness.requestPermissionsAsync()
Asks the user to grant permissions for accessing system brightness.
Returns:
Promise<PermissionResponse>
A promise that fulfils with an object of type PermissionResponse.
Brightness.restoreSystemBrightnessAsync()
Only for: 
Android


Resets the brightness setting of the current activity to use the system-wide brightness value rather than overriding it.
Returns:
Promise<void>
A Promise that fulfils when the setting has been successfully changed.
Brightness.setBrightnessAsync(brightnessValue)
Parameter	Type	Description
brightnessValue	number	A number between 0 and 1, inclusive, representing the desired screen brightness.

Sets the current screen brightness. On iOS, this setting will persist until the device is locked, after which the screen brightness will revert to the user's default setting. On Android, this setting only applies to the current activity; it will override the system brightness value whenever your app is in the foreground.
Returns:
Promise<void>
A Promise that fulfils when the brightness has been successfully set.
Brightness.setSystemBrightnessAsync(brightnessValue)
Only for: 
Android


Parameter	Type	Description
brightnessValue	number	A number between 0 and 1, inclusive, representing the desired screen brightness.

Sets the global system screen brightness and changes the brightness mode to MANUAL. Requires SYSTEM_BRIGHTNESS permissions.
Returns:
Promise<void>
A Promise that fulfils when the brightness has been successfully set.
Brightness.setSystemBrightnessModeAsync(brightnessMode)
Only for: 
Android


Parameter	Type	Description
brightnessMode	BrightnessMode
One of BrightnessMode.MANUAL or BrightnessMode.AUTOMATIC. The system brightness mode cannot be set to BrightnessMode.UNKNOWN.

Sets the system brightness mode.
Returns:
Promise<void>
Deprecated Use restoreSystemBrightnessAsync method instead.
Brightness.useSystemBrightnessAsync()
Only for: 
Android


Returns:
Promise<void>
Event Subscriptions
Brightness.addBrightnessListener(listener)
Only for: 
iOS


Parameter	Type	Description
listener	(event: BrightnessEvent) => void	A callback that is invoked when brightness (iOS) changes. The callback is provided a single argument that is an object with a brightness key.

Subscribe to brightness (iOS) updates. The event fires whenever the power mode is toggled.
On web and android the event never fires.
Returns:
EventSubscription
A Subscription object on which you can call remove() to unsubscribe from the listener.
Types
BrightnessEvent
Property	Type	Description
brightness	number	A number between 0 and 1, inclusive, representing the current screen brightness.
PermissionExpiration
Literal Type: union
Permission expiration time. Currently, all permissions are granted permanently.
Acceptable values are: 'never' | number
PermissionHookOptions
Literal Type: union
Acceptable values are: PermissionHookBehavior | Options
PermissionResponse
An object obtained by permissions get and request functions.
Property	Type	Description
canAskAgain	boolean	Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.
expires	PermissionExpiration
Determines time when the permission expires.
granted	boolean	A convenience boolean that indicates if the permission is granted.
status	PermissionStatus
Determines the status of the permission.
Enums
BrightnessMode
UNKNOWN
BrightnessMode.UNKNOWN ＝ 0
Means that the current brightness mode cannot be determined.
AUTOMATIC
BrightnessMode.AUTOMATIC ＝ 1
Mode in which the device OS will automatically adjust the screen brightness depending on the ambient light.
MANUAL
BrightnessMode.MANUAL ＝ 2
Mode in which the screen brightness will remain constant and will not be adjusted by the OS.
PermissionStatus
DENIED
PermissionStatus.DENIED ＝ "denied"
User has denied the permission.
GRANTED
PermissionStatus.GRANTED ＝ "granted"
User has granted the permission.
UNDETERMINED
PermissionStatus.UNDETERMINED ＝ "undetermined"
User hasn't granted or denied the permission yet.
Error codes
ERR_BRIGHTNESS
An error occurred when getting or setting the app brightness.
ERR_BRIGHTNESS_MODE
An error occurred when getting or setting the system brightness mode. See the nativeError property of the thrown error for more information.
ERR_BRIGHTNESS_PERMISSIONS_DENIED
An attempt to set the system brightness was made without the proper permissions from the user. The user did not grant SYSTEM_BRIGHTNESS permissions.
ERR_BRIGHTNESS_SYSTEM
An error occurred when getting or setting the system brightness.
ERR_INVALID_ARGUMENT
An invalid argument was passed. Only BrightnessMode.MANUAL or BrightnessMode.AUTOMATIC are allowed.
Permissions
Android
You must add the following permissions to your app.json inside the expo.android.permissions array.
Android Permission	Description
WRITE_SETTINGS	Allows an application to read or write the system settings.
iOS
No permissions required.

#18

Expo BuildProperties

GitHub

npm

A config plugin that allows customizing native build properties during prebuild.
Android
iOS
tvOS
Bundled version:
~0.14.6
________________________________________
expo-build-properties is a config plugin configuring the native build properties of your android/gradle.properties and ios/Podfile.properties.json directories during Prebuild.
This config plugin configures how Prebuild command generates the native android and ios directories and therefore cannot be used with projects that don't run npx expo prebuild (bare projects).
Installation
Terminal
Copy
- npx expo install expo-build-properties
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Example app.json with config plugin
app.json
app.config.js
app.json
Copy
{
  "expo": {
    "plugins": [
      [
        "expo-build-properties",
        {
          "android": {
            "compileSdkVersion": 35,
            "targetSdkVersion": 35,
            "buildToolsVersion": "35.0.0"
          },
          "ios": {
            "deploymentTarget": "15.1"
          }
        }
      ]
    ]
  }
}
All configurable properties
PluginConfigType interface represents currently available configuration properties.
API
Methods
BuildProperties.withBuildProperties(config, props)
Parameter	Type	Description
config	ExpoConfig
Expo config for application.
props	PluginConfigType
Configuration for the build properties plugin.

Config plugin allowing customizing native Android and iOS build properties for managed apps.
Returns:
ExpoConfig
Interfaces
AndroidMavenRepository
Only for: 
Android


Property	Type	Description
authentication(optional)	'basic' | 'digest' | 'header'	The authentication scheme to use when accessing the Maven repository.
credentials(optional)	AndroidMavenRepositoryCredentials
The credentials to use when accessing the Maven repository. May be of type PasswordCredentials, HttpHeaderCredentials, or AWSCredentials.
See: The authentication schemes section of Gradle documentation for more information.
url	string	The URL of the Maven repository.
AndroidMavenRepositoryAWSCredentials
Only for: 
Android


The Android Maven repository credentials for AWS S3.
Property	Type	Description
accessKey	string	The credential value. You can also pass "System.getenv('ENV_VAR_NAME')" to get the value from an environment variable.
secretKey	string	The credential value. You can also pass "System.getenv('ENV_VAR_NAME')" to get the value from an environment variable.
sessionToken(optional)	string	The credential value. You can also pass "System.getenv('ENV_VAR_NAME')" to get the value from an environment variable.
AndroidMavenRepositoryHttpHeaderCredentials
Only for: 
Android


The Android Maven repository credentials that are passed as HTTP headers.
Property	Type	Description
name	string	The credential value. You can also pass "System.getenv('ENV_VAR_NAME')" to get the value from an environment variable.
value	string	The credential value. You can also pass "System.getenv('ENV_VAR_NAME')" to get the value from an environment variable.
AndroidMavenRepositoryPasswordCredentials
Only for: 
Android


The Android Maven repository credentials for basic authentication.
Property	Type	Description
password	string	The credential value. You can also pass "System.getenv('ENV_VAR_NAME')" to get the value from an environment variable.
username	string	The credential value. You can also pass "System.getenv('ENV_VAR_NAME')" to get the value from an environment variable.
ExtraIosPodDependency
Only for: 
iOS


Interface representing extra CocoaPods dependency.
See: Podfile syntax reference
Property	Type	Description
branch(optional)	string	The git branch to fetch. See the git property for more information.
commit(optional)	string	The git commit to fetch. See the git property for more information.
configurations(optional)	string[]	Build configurations for which the pod should be installed.
Example
['Debug', 'Release']
git(optional)	string	Use the bleeding edge version of a Pod.
Example
{
  "name": "AFNetworking",
  "git": "https://github.com/gowalla/AFNetworking.git",
  "tag": "0.7.0"
}
This acts like to add this pod dependency statement:
pod 'AFNetworking', :git => 'https://github.com/gowalla/AFNetworking.git', :tag => '0.7.0'
modular_headers(optional)	boolean	Whether this pod should use modular headers.
name	string	Name of the pod.
path(optional)	string	Custom local filesystem path to add the dependency.
Example
~/Documents/AFNetworking
podspec(optional)	string	Custom podspec path.
Example
https://example.com/JSONKit.podspec
source(optional)	string	Custom source to search for this dependency.
Example
https://github.com/CocoaPods/Specs.git
tag(optional)	string	The git tag to fetch. See the git property for more information.
testspecs(optional)	string[]	Test specs can be optionally included via the :testspecs option. By default, none of a Pod's test specs are included.
Example
['UnitTests', 'SomeOtherTests']
version(optional)	string	Version of the pod. CocoaPods supports various versioning options.
Example
~> 0.1.2
PluginConfigType
Interface representing base build properties configuration.
Property	Type	Description
android(optional)	PluginConfigTypeAndroid
Only for: 
Android


Interface representing available configuration for Android native build properties.
ios(optional)	PluginConfigTypeIos
Only for: 
iOS


Interface representing available configuration for iOS native build properties.
PluginConfigTypeAndroid
Only for: 
Android


Interface representing available configuration for Android native build properties.
Property	Type	Description
buildToolsVersion(optional)	string	Override the default buildToolsVersion version number in build.gradle.
compileSdkVersion(optional)	number	Override the default compileSdkVersion version number in build.gradle.
enableBundleCompression(optional)	boolean	Enable JavaScript Bundle compression. Turning this on will result in a smaller APK size but may have slower app startup times.
Default:false
See: Faster App Startup

enablePngCrunchInReleaseBuilds(optional)	boolean	Enable crunchPngs in release builds to optimize PNG files. This property is enabled by default, but "might inflate PNG files that are already compressed", so you may want to disable it if you do your own PNG optimization.
Default:true
enableProguardInReleaseBuilds(optional)	boolean	Enable Proguard or R8 in release builds to obfuscate Java code and reduce app size.

enableShrinkResourcesInReleaseBuilds(optional)	boolean	Enable shrinkResources in release builds to remove unused resources from the app. This property should be used in combination with enableProguardInReleaseBuilds.
extraMavenRepos(optional)	(string | AndroidMavenRepository)[]
Add extra maven repositories to all gradle projects.
Takes an array of objects or strings. Strings are passed as the url property of the object with no credentials or authentication scheme.
This adds the following code to android/build.gradle:
allprojects {
 repositories {
  maven {
   url "https://foo.com/maven-releases"
 }
}
By using an AndroidMavenRepository object, you can specify credentials and an authentication scheme.
allprojects {
  repositories {
    maven {
      url "https://foo.com/maven-releases"
      credentials {
       username = "bar"
       password = "baz"
      }
      authentication {
       basic(BasicAuthentication)
      }
    }
  }
}
See: Gradle documentation

extraProguardRules(optional)	string	Append custom Proguard rules to android/app/proguard-rules.pro.

kotlinVersion(optional)	string	Override the Kotlin version used when building the app.
manifestQueries(optional)	PluginConfigTypeAndroidQueries
Specifies the set of other apps that an app intends to interact with. These other apps are specified by package name, by intent signature, or by provider authority.
See: Android documentation

minSdkVersion(optional)	number	Override the default minSdkVersion version number in build.gradle.
networkInspector(optional)	boolean	Enable the Network Inspector.
Default:true
newArchEnabled(optional)	boolean	Deprecated Use app config newArchEnabled instead. Enable React Native new architecture for Android platform.
packagingOptions(optional)	PluginConfigTypeAndroidPackagingOptions
Interface representing available configuration for Android Gradle plugin PackagingOptions.

targetSdkVersion(optional)	number	Override the default targetSdkVersion version number in build.gradle.
useDayNightTheme(optional)	boolean	Changes the apps theme to a DayNight variant to correctly support dark mode.
See: Android documentation

useLegacyPackaging(optional)	boolean	Instructs the Android Gradle plugin to compress native libraries in the APK using the legacy packaging system.
Default:false
See: Android documentation

usesCleartextTraffic(optional)	boolean	Indicates whether the app intends to use cleartext network traffic.
Default:false
See: Android documentation

PluginConfigTypeAndroidPackagingOptions
Only for: 
Android


Interface representing available configuration for Android Gradle plugin PackagingOptions.
Property	Type	Description
doNotStrip(optional)	string[]	Array of patterns for native libraries that should not be stripped of debug symbols.
exclude(optional)	string[]	Array of patterns for native libraries that should be excluded from being packaged in the APK.
merge(optional)	string[]	Array of patterns for native libraries where all occurrences are concatenated and packaged in the APK.
pickFirst(optional)	string[]	Array of patterns for native libraries where only the first occurrence is packaged in the APK.
PluginConfigTypeAndroidQueries
Only for: 
Android


Property	Type	Description
intent(optional)	PluginConfigTypeAndroidQueriesIntent[]
Specifies an intent filter signature. Your app can discover other apps that have matching <intent-filter> elements. These intents have restrictions compared to typical intent filter signatures.
See: Android documentation for more information.

package(optional)	string[]	Specifies one or more apps that your app intends to access. These other apps might integrate with your app, or your app might use services that these other apps provide.
provider(optional)	string[]	Specifies one or more content provider authorities. Your app can discover other apps whose content providers use the specified authorities. There are some restrictions on the options that you can include in this <provider> element, compared to a typical <provider> manifest element. You may only specify the android:authorities attribute.
PluginConfigTypeAndroidQueriesData
Only for: 
Android


Property	Type	Description
host(optional)	string	Specify a URI authority host that is handled
mimeType(optional)	string	Specify a MIME type that is handled
scheme(optional)	string	Specify a URI scheme that is handled
PluginConfigTypeAndroidQueriesIntent
Only for: 
Android


Property	Type	Description
action(optional)	string	A string naming the action to perform. Usually one of the platform-defined values, such as SEND or VIEW.
See: Android documentation for more information.

category(optional)	string | string[]	Provides an additional way to characterize the activity handling the intent, usually related to the user gesture or location from which it's started.
data(optional)	PluginConfigTypeAndroidQueriesData
A description of the data associated with the intent.
PluginConfigTypeIos
Only for: 
iOS


Interface representing available configuration for iOS native build properties.
Property	Type	Description
ccacheEnabled(optional)	boolean	Enable C++ compiler cache for iOS builds.
This speeds up compiling C++ code by caching the results of previous compilations.
See: React Native's documentation on local caches and Ccache documentation.

deploymentTarget(optional)	string	Override the default iOS "Deployment Target" version in the following projects:
•	in CocoaPods projects,
•	PBXNativeTarget with "com.apple.product-type.application" productType in the app project.
extraPods(optional)	ExtraIosPodDependency[]
Add extra CocoaPods dependencies for all targets.
This configuration is responsible for adding the new Pod entries to ios/Podfile.
Example
Creating entry in the configuration like below:
[
  {
    name: "Protobuf",
    version: "~> 3.14.0",
  }
]
Will produce the following entry in the generated ios/Podfile:
pod 'Protobuf', '~> 3.14.0'
networkInspector(optional)	boolean	Enable the Network Inspector.
Default:true
newArchEnabled(optional)	boolean	Deprecated Use app config newArchEnabled instead. Enable React Native new architecture for iOS platform.
privacyManifestAggregationEnabled(optional)	boolean	Enable aggregation of Privacy Manifests (PrivacyInfo.xcprivacy) from CocoaPods resource bundles. If enabled, the manifests will be merged into a single file. If not enabled, developers will need to manually aggregate them.
See: Privacy manifests guide and Apple's documentation on Privacy manifest files.

useFrameworks(optional)	'static' | 'dynamic'	Enable use_frameworks! in Podfile to use frameworks instead of static libraries for Pods.
Types
AndroidMavenRepositoryCredentials
Only for: 
Android


Literal Type: union
Acceptable values are: AndroidMavenRepositoryPasswordCredentials | AndroidMavenRepositoryHttpHeaderCredentials | AndroidMavenRepositoryAWSCredentials

#19

Expo Calendar

GitHub

npm

A library that provides an API for interacting with the device's system calendars, events, reminders, and associated records.
Android
iOS
Bundled version:
~14.1.4
________________________________________
expo-calendar provides an API for interacting with the device's system calendars, events, reminders, and associated records.
Additionally, it provides methods to launch the system-provided calendar UI to allow user view or edit events. On Android, these methods start the system calendar app using an Intent. On iOS, they present either EKEventViewController or EKEventEditViewController as a modal.
Installation
Terminal
Copy
- npx expo install expo-calendar
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration in app config
You can configure expo-calendar using its built-in config plugin if you use config plugins in your project (EAS Build or npx expo run:[android|ios]). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.
Example app.json with config plugin
app.json
Copy
{
  "expo": {
    "plugins": [
      [
        "expo-calendar",
        {
          "calendarPermission": "The app needs to access your calendar."
        }
      ]
    ]
  }
}
Configurable properties
Name	Default	Description
calendarPermission	"Allow $(PRODUCT_NAME) to access your calendar"	Only for: 
iOS


A string to set the NSCalendarsUsageDescription permission message.

remindersPermission	"Allow $(PRODUCT_NAME) to access your reminders"	Only for: 
iOS


A string to set the NSRemindersUsageDescription permission message.

Are you using this library in an existing React Native app?
•	
•	
Usage
Basic Calendar usage
Copy
Open in Snack
import { useEffect } from 'react';
import { StyleSheet, View, Text, Button, Platform } from 'react-native';
import * as Calendar from 'expo-calendar';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Calendar.requestCalendarPermissionsAsync();
      if (status === 'granted') {
        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);
        console.log('Here are all your calendars:');
        console.log({ calendars });
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Calendar Module Example</Text>
      <Button title="Create a new calendar" onPress={createCalendar} />
    </View>
  );
}

async function getDefaultCalendarSource() {
  const defaultCalendar = await Calendar.getDefaultCalendarAsync();
  return defaultCalendar.source;
}

async function createCalendar() {
  const defaultCalendarSource =
    Platform.OS === 'ios'
      ? await getDefaultCalendarSource()
      : { isLocalAccount: true, name: 'Expo Calendar' };
  const newCalendarID = await Calendar.createCalendarAsync({
    title: 'Expo Calendar',
    color: 'blue',
    entityType: Calendar.EntityTypes.EVENT,
    sourceId: defaultCalendarSource.id,
    source: defaultCalendarSource,
    name: 'internalCalendarName',
    ownerAccount: 'personal',
    accessLevel: Calendar.CalendarAccessLevel.OWNER,
  });
  console.log(`Your new calendar ID is: ${newCalendarID}`);
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'space-around',
  },
});
Show More
API
import * as Calendar from 'expo-calendar';
Launching system-provided calendar dialogs
createEventInCalendarAsync(eventData, presentationOptions)
Parameter	Type	Description
eventData(optional)	Omit<Partial<Event>, 'id'>
A map of details for the event to be created.
Default:{}
presentationOptions(optional)	PresentationOptions
Configuration that influences how the calendar UI is presented.

Launches the calendar UI provided by the OS to create a new event.
Returns:
Promise<DialogEventResult>
A promise which resolves with information about the dialog result.
editEventInCalendarAsync(params, presentationOptions)
Parameter	Type
params	CalendarDialogParams

presentationOptions(optional)	PresentationOptions


Launches the calendar UI provided by the OS to edit or delete an event. On Android, this is the same as openEventInCalendarAsync.
Returns:
Promise<DialogEventResult>
A promise which resolves with information about the dialog result.
Deprecated Use openEventInCalendarAsync instead.
openEventInCalendar(id)
Only for: 
Android


Parameter	Type	Description
id	string	ID of the event to open.

Sends an intent to open the specified event in the OS Calendar app.
Returns:
void
openEventInCalendarAsync(params, presentationOptions)
Parameter	Type
params	CalendarDialogParams

presentationOptions(optional)	OpenEventPresentationOptions


Launches the calendar UI provided by the OS to preview an event.
Returns:
Promise<OpenEventDialogResult>
A promise which resolves with information about the dialog result.
Hooks
useCalendarPermissions(options)
Parameter	Type
options(optional)	PermissionHookOptions<object>


Check or request permissions to access the calendar. This uses both getCalendarPermissionsAsync and requestCalendarPermissionsAsync to interact with the permissions.
Returns:
[null | PermissionResponse, RequestPermissionMethod<PermissionResponse>, GetPermissionMethod<PermissionResponse>]
Example
const [status, requestPermission] = Calendar.useCalendarPermissions();
useRemindersPermissions(options)
Parameter	Type
options(optional)	PermissionHookOptions<object>


Check or request permissions to access reminders. This uses both getRemindersPermissionsAsync and requestRemindersPermissionsAsync to interact with the permissions.
Returns:
[null | PermissionResponse, RequestPermissionMethod<PermissionResponse>, GetPermissionMethod<PermissionResponse>]
Example
const [status, requestPermission] = Calendar.useRemindersPermissions();
Methods
Calendar.createAttendeeAsync(eventId, details)
Only for: 
Android


Parameter	Type	Description
eventId	string	ID of the event to add this attendee to.
details(optional)	Partial<Attendee>
A map of details for the attendee to be created.
Default:{}

Creates a new attendee record and adds it to the specified event. Note that if eventId specifies a recurring event, this will add the attendee to every instance of the event.
Returns:
Promise<string>
A string representing the ID of the newly created attendee record.
Calendar.createCalendarAsync(details)
Parameter	Type	Description
details(optional)	Partial<Calendar>
A map of details for the calendar to be created.
Default:{}

Creates a new calendar on the device, allowing events to be added later and displayed in the OS Calendar app.
Returns:
Promise<string>
A string representing the ID of the newly created calendar.
Calendar.createEventAsync(calendarId, eventData)
Parameter	Type	Description
calendarId	string	ID of the calendar to create this event in.
eventData(optional)	Omit<Partial<Event>, 'id' | 'organizer'>
A map of details for the event to be created.
Default:{}

Creates a new event on the specified calendar.
Returns:
Promise<string>
A promise which fulfils with a string representing the ID of the newly created event.
Calendar.createReminderAsync(calendarId, reminder)
Only for: 
iOS


Parameter	Type	Description
calendarId	null | string	ID of the calendar to create this reminder in (or null to add the calendar to the OS-specified default calendar for reminders).
reminder(optional)	Reminder
A map of details for the reminder to be created
Default:{}

Creates a new reminder on the specified calendar.
Returns:
Promise<string>
A promise which fulfils with a string representing the ID of the newly created reminder.
Calendar.deleteAttendeeAsync(id)
Only for: 
Android


Parameter	Type	Description
id	string	ID of the attendee to delete.

Deletes an existing attendee record from the device. Use with caution.
Returns:
Promise<void>
Calendar.deleteCalendarAsync(id)
Parameter	Type	Description
id	string	ID of the calendar to delete.

Deletes an existing calendar and all associated events/reminders/attendees from the device. Use with caution.
Returns:
Promise<void>
Calendar.deleteEventAsync(id, recurringEventOptions)
Parameter	Type	Description
id	string	ID of the event to be deleted.
recurringEventOptions(optional)	RecurringEventOptions
A map of options for recurring events.
Default:{}

Deletes an existing event from the device. Use with caution.
Returns:
Promise<void>
Calendar.deleteReminderAsync(id)
Only for: 
iOS


Parameter	Type	Description
id	string	ID of the reminder to be deleted.

Deletes an existing reminder from the device. Use with caution.
Returns:
Promise<void>
Calendar.getAttendeesForEventAsync(id, recurringEventOptions)
Parameter	Type	Description
id	string	ID of the event to return attendees for.
recurringEventOptions(optional)	RecurringEventOptions
A map of options for recurring events.
Default:{}

Gets all attendees for a given event (or instance of a recurring event).
Returns:
Promise<Attendee[]>
A promise which fulfils with an array of Attendee associated with the specified event.
Calendar.getCalendarPermissionsAsync()
Checks user's permissions for accessing user's calendars.
Returns:
Promise<PermissionResponse>
A promise that resolves to an object of type PermissionResponse.
Calendar.getCalendarsAsync(entityType)
Parameter	Type	Description
entityType(optional)	string	iOS Only. Not required, but if defined, filters the returned calendars to a specific entity type. Possible values are Calendar.EntityTypes.EVENT (for calendars shown in the Calendar app) and Calendar.EntityTypes.REMINDER (for the Reminders app).
Note: If not defined, you will need both permissions: CALENDAR and REMINDERS.

Gets an array of calendar objects with details about the different calendars stored on the device.
Returns:
Promise<Calendar[]>
An array of calendar objects matching the provided entity type (if provided).
Calendar.getDefaultCalendarAsync()
Only for: 
iOS


Gets an instance of the default calendar object.
Returns:
Promise<Calendar>
A promise resolving to the Calendar object that is the user's default calendar.
Calendar.getEventAsync(id, recurringEventOptions)
Parameter	Type	Description
id	string	ID of the event to return.
recurringEventOptions(optional)	RecurringEventOptions
A map of options for recurring events.
Default:{}

Returns a specific event selected by ID. If a specific instance of a recurring event is desired, the start date of this instance must also be provided, as instances of recurring events do not have their own unique and stable IDs on either iOS or Android.
Returns:
Promise<Event>
A promise which fulfils with an Event object matching the provided criteria, if one exists.
Calendar.getEventsAsync(calendarIds, startDate, endDate)
Parameter	Type	Description
calendarIds	string[]	Array of IDs of calendars to search for events in.
startDate	Date
Beginning of time period to search for events in.
endDate	Date
End of time period to search for events in.

Returns all events in a given set of calendars over a specified time period. The filtering has slightly different behavior per-platform - on iOS, all events that overlap at all with the [startDate, endDate] interval are returned, whereas on Android, only events that begin on or after the startDate and end on or before the endDate will be returned.
Returns:
Promise<Event[]>
A promise which fulfils with an array of Event objects matching the search criteria.
Calendar.getReminderAsync(id)
Only for: 
iOS


Parameter	Type	Description
id	string	ID of the reminder to return.

Returns a specific reminder selected by ID.
Returns:
Promise<Reminder>
A promise which fulfils with a Reminder matching the provided ID, if one exists.
Calendar.getRemindersAsync(calendarIds, status, startDate, endDate)
Only for: 
iOS


Parameter	Type	Description
calendarIds	(null | string)[]	Array of IDs of calendars to search for reminders in.
status	null | ReminderStatus
One of Calendar.ReminderStatus.COMPLETED or Calendar.ReminderStatus.INCOMPLETE.
startDate	null | Date
Beginning of time period to search for reminders in. Required if status is defined.
endDate	null | Date
End of time period to search for reminders in. Required if status is defined.

Returns a list of reminders matching the provided criteria. If startDate and endDate are defined, returns all reminders that overlap at all with the [startDate, endDate] interval - i.e. all reminders that end after the startDate or begin before the endDate.
Returns:
Promise<Reminder[]>
A promise which fulfils with an array of Reminder objects matching the search criteria.
Calendar.getRemindersPermissionsAsync()
Only for: 
iOS


Checks user's permissions for accessing user's reminders.
Returns:
Promise<PermissionResponse>
A promise that resolves to an object of type PermissionResponse.
Calendar.getSourceAsync(id)
Only for: 
iOS


Parameter	Type	Description
id	string	ID of the source to return.

Returns a specific source selected by ID.
Returns:
Promise<Source>
A promise which fulfils with an array of Source object matching the provided ID, if one exists.
Calendar.getSourcesAsync()
Only for: 
iOS


Returns:
Promise<Source[]>
A promise which fulfils with an array of Source objects all sources for calendars stored on the device.
Calendar.isAvailableAsync()
Returns whether the Calendar API is enabled on the current device. This does not check the app permissions.
Returns:
Promise<boolean>
Async boolean, indicating whether the Calendar API is available on the current device. Currently, this resolves true on iOS and Android only.
Calendar.requestCalendarPermissionsAsync()
Asks the user to grant permissions for accessing user's calendars.
Returns:
Promise<PermissionResponse>
A promise that resolves to an object of type PermissionResponse.
Deprecated Use requestCalendarPermissionsAsync() instead.
Calendar.requestPermissionsAsync()
Returns:
Promise<PermissionResponse>
Calendar.requestRemindersPermissionsAsync()
Only for: 
iOS


Asks the user to grant permissions for accessing user's reminders.
Returns:
Promise<PermissionResponse>
A promise that resolves to an object of type PermissionResponse.
Calendar.updateAttendeeAsync(id, details)
Only for: 
Android


Parameter	Type	Description
id	string	ID of the attendee record to be updated.
details(optional)	Partial<Attendee>
A map of properties to be updated.
Default:{}

Updates an existing attendee record. To remove a property, explicitly set it to null in details.
Returns:
Promise<string>
Calendar.updateCalendarAsync(id, details)
Parameter	Type	Description
id	string	ID of the calendar to update.
details(optional)	Partial<Calendar>
A map of properties to be updated.
Default:{}

Updates the provided details of an existing calendar stored on the device. To remove a property, explicitly set it to null in details.
Returns:
Promise<string>
Calendar.updateEventAsync(id, details, recurringEventOptions)
Parameter	Type	Description
id	string	ID of the event to be updated.
details(optional)	Omit<Partial<Event>, 'id'>
A map of properties to be updated.
Default:{}
recurringEventOptions(optional)	RecurringEventOptions
A map of options for recurring events.
Default:{}

Updates the provided details of an existing calendar stored on the device. To remove a property, explicitly set it to null in details.
Returns:
Promise<string>
Calendar.updateReminderAsync(id, details)
Only for: 
iOS


Parameter	Type	Description
id	string	ID of the reminder to be updated.
details(optional)	Reminder
A map of properties to be updated.
Default:{}

Updates the provided details of an existing reminder stored on the device. To remove a property, explicitly set it to null in details.
Returns:
Promise<string>
Types
Alarm
A method for having the OS automatically remind the user about a calendar item.
Property	Type	Description
absoluteDate(optional)	string	Only for: 
iOS


Date object or string representing an absolute time the alarm should occur. Overrides relativeOffset and structuredLocation if specified alongside either.
method(optional)	AlarmMethod
Only for: 
Android


Method of alerting the user that this alarm should use. On iOS this is always a notification.
relativeOffset(optional)	number	Number of minutes from the startDate of the calendar item that the alarm should occur. Use negative values to have the alarm occur before the startDate.
structuredLocation(optional)	AlarmLocation
-
AlarmLocation
Property	Type	Description
coords(optional)	{
  latitude: number, 
  longitude: number
}	-
proximity(optional)	string	-
radius(optional)	number	-
title(optional)	string	-
Attendee
A person or entity that is associated with an event by being invited or fulfilling some other role.
Property	Type	Description
email(optional)	string	Only for: 
Android


Email address of the attendee.
id(optional)	string	Only for: 
Android


Internal ID that represents this attendee on the device.
isCurrentUser(optional)	boolean	Only for: 
iOS


Indicates whether or not this attendee is the current OS user.
name	string	Displayed name of the attendee.
role	AttendeeRole
Role of the attendee at the event.
status	AttendeeStatus
Status of the attendee in relation to the event.
type	AttendeeType
Type of the attendee.
url(optional)	string	Only for: 
iOS


URL for the attendee.
Calendar
A calendar record upon which events (or, on iOS, reminders) can be stored. Settings here apply to the calendar as a whole and how its events are displayed in the OS calendar app.
Property	Type	Description
accessLevel(optional)	CalendarAccessLevel
Only for: 
Android


Level of access that the user has for the calendar.
allowedAttendeeTypes(optional)	AttendeeType[]
Only for: 
Android


Attendee types that this calendar supports.
allowedAvailabilities	Availability[]
Availability types that this calendar supports.
allowedReminders(optional)	AlarmMethod[]
Only for: 
Android


Alarm methods that this calendar supports.
allowsModifications	boolean	Boolean value that determines whether this calendar can be modified.
color	string	Color used to display this calendar's events.
entityType(optional)	EntityTypes
Only for: 
iOS


Whether the calendar is used in the Calendar or Reminders OS app.
id	string	Internal ID that represents this calendar on the device.
isPrimary(optional)	boolean	Only for: 
Android


Boolean value indicating whether this is the device's primary calendar.
isSynced(optional)	boolean	Only for: 
Android


Indicates whether this calendar is synced and its events stored on the device. Unexpected behavior may occur if this is not set to true.
isVisible(optional)	boolean	Only for: 
Android


Indicates whether the OS displays events on this calendar.
name(optional)	string | null	Only for: 
Android


Internal system name of the calendar.
ownerAccount(optional)	string	Only for: 
Android


Name for the account that owns this calendar.
source	Source
Object representing the source to be used for the calendar.
sourceId(optional)	string	Only for: 
iOS


ID of the source to be used for the calendar. Likely the same as the source for any other locally stored calendars.
timeZone(optional)	string	Only for: 
Android


Time zone for the calendar.
title	string	Visible name of the calendar.
type(optional)	CalendarType
Only for: 
iOS


Type of calendar this object represents.
CalendarDialogParams
Property	Type	Description
id	string	ID of the event to be presented in the calendar UI.
instanceStartDate(optional)	string | Date
Only for: 
iOS


Date object representing the start time of the desired instance, if looking for a single instance of a recurring event. If this is not provided and id represents a recurring event, the first instance of that event will be returned by default.
DaysOfTheWeek
Only for: 
iOS


Property	Type	Description
dayOfTheWeek	DayOfTheWeek
Sunday to Saturday - DayOfTheWeek enum.
weekNumber(optional)	number	-53 to 53 (0 ignores this field, and a negative indicates a value from the end of the range).
DialogEventResult
The result of presenting a calendar dialog for creating or editing an event.
Property	Type	Description
action	Extract<CalendarDialogResultActions, 'done' | 'saved' | 'canceled' | 'deleted'>
How user responded to the dialog. On Android, this is always done (Android doesn't provide enough information to determine the user's action - the user may have canceled the dialog, saved or deleted the event).
On iOS, it can be saved, canceled or deleted.
id	string | null	The ID of the event that was created or edited. On Android, this is always null.
On iOS, this is a string when user confirms the creation or editing of an event. Otherwise, it's null.
Event
An event record, or a single instance of a recurring event. On iOS, used in the Calendar app.
Property	Type	Description
accessLevel(optional)	EventAccessLevel
Only for: 
Android


User's access level for the event.
alarms	Alarm[]
Array of Alarm objects which control automated reminders to the user.
allDay	boolean	Whether the event is displayed as an all-day event on the calendar
availability	Availability
The availability setting for the event.
calendarId	string	ID of the calendar that contains this event.
creationDate(optional)	string | Date
Only for: 
iOS


Date when the event record was created.
endDate	string | Date
Date object or string representing the time when the event ends.
endTimeZone(optional)	string	Only for: 
Android


Time zone for the event end time.
guestsCanInviteOthers(optional)	boolean	Only for: 
Android


Whether invited guests can invite other guests.
guestsCanModify(optional)	boolean	Only for: 
Android


Whether invited guests can modify the details of the event.
guestsCanSeeGuests(optional)	boolean	Only for: 
Android


Whether invited guests can see other guests.
id	string	Internal ID that represents this event on the device.
instanceId(optional)	string	Only for: 
Android


For instances of recurring events, volatile ID representing this instance. Not guaranteed to always refer to the same instance.
isDetached(optional)	boolean	Only for: 
iOS


Boolean value indicating whether or not the event is a detached (modified) instance of a recurring event.
lastModifiedDate(optional)	string | Date
Only for: 
iOS


Date when the event record was last modified.
location	string | null	Location field of the event.
notes	string	Description or notes saved with the event.
organizer(optional)	Organizer
Only for: 
iOS


Organizer of the event. This property is only available on events associated with calendars that are managed by a service ie. Google Calendar or iCloud. The organizer is read-only and cannot be set.
organizerEmail(optional)	string	Only for: 
Android


Email address of the organizer of the event.
originalId(optional)	string	Only for: 
Android


For detached (modified) instances of recurring events, the ID of the original recurring event.
originalStartDate(optional)	string | Date
Only for: 
iOS


For recurring events, the start date for the first (original) instance of the event.
recurrenceRule	RecurrenceRule | null
Object representing rules for recurring or repeating events. Set to null for one-time events.
startDate	string | Date
Date object or string representing the time when the event starts.
status	EventStatus
Status of the event.
timeZone	string	Time zone the event is scheduled in.
title	string	Visible name of the event.
url(optional)	string	Only for: 
iOS


URL for the event.
OpenEventDialogResult
The result of presenting the calendar dialog for opening (viewing) an event.
Property	Type	Description
action	Extract<CalendarDialogResultActions, 'done' | 'canceled' | 'deleted' | 'responded'>
Indicates how user responded to the dialog. On Android, the action is always done. On iOS, it can be done, canceled, deleted or responded.
OpenEventPresentationOptions
Type: PresentationOptions extended by:
Property	Type	Description
allowsCalendarPreview(optional)	boolean	Only for: 
iOS


Determines whether event can be shown in calendar day view preview. This property applies only to invitations.
Default:false
allowsEditing(optional)	boolean	Only for: 
iOS


Whether to allow the user to edit the previewed event. This property applies only to events in calendars created by the user.
Note that if the user edits the event, the returned action is the one that user performs last. For example, when user previews the event, confirms some edits and finally dismisses the dialog, the event is edited, but response is canceled.
Default:false
PermissionExpiration
Literal Type: union
Permission expiration time. Currently, all permissions are granted permanently.
Acceptable values are: 'never' | number
PermissionHookOptions
Literal Type: union
Acceptable values are: PermissionHookBehavior | Options
PermissionResponse
An object obtained by permissions get and request functions.
Property	Type	Description
canAskAgain	boolean	Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.
expires	PermissionExpiration
Determines time when the permission expires.
granted	boolean	A convenience boolean that indicates if the permission is granted.
status	PermissionStatus
Determines the status of the permission.
PresentationOptions
Property	Type	Description
startNewActivityTask(optional)	boolean	Only for: 
Android


Whether to launch the Activity as a new task. If true, the promise resolves with 'done' action immediately after opening the calendar activity.
Default:true
RecurrenceRule
A recurrence rule for events or reminders, allowing the same calendar item to recur multiple times. This type is based on the iOS interface which is in turn based on the iCal RFC so you can refer to those to learn more about this potentially complex interface.
Not all the combinations make sense. For example, when frequency is DAILY, setting daysOfTheMonth makes no sense.
Property	Type	Description
daysOfTheMonth(optional)	number[]	Only for: 
iOS


The days of the month this event occurs on. -31 to 31 (not including 0). Negative indicates a value from the end of the range. This field is only valid for Calendar.Frequency.Monthly.
daysOfTheWeek(optional)	DaysOfTheWeek[]
Only for: 
iOS


The days of the week the event should recur on. An array of DaysOfTheWeek object.

daysOfTheYear(optional)	number[]	Only for: 
iOS


The days of the year this event occurs on. -366 to 366 (not including 0). Negative indicates a value from the end of the range. This field is only valid for Calendar.Frequency.Yearly.
endDate(optional)	string | Date
Date on which the calendar item should stop recurring; overrides occurrence if both are specified.
frequency	Frequency
How often the calendar item should recur.
interval(optional)	number	Interval at which the calendar item should recur. For example, an interval: 2 with frequency: DAILY would yield an event that recurs every other day.
Default:1
monthsOfTheYear(optional)	MonthOfTheYear[]
Only for: 
iOS


The months this event occurs on. This field is only valid for Calendar.Frequency.Yearly.
occurrence(optional)	number	Number of times the calendar item should recur before stopping.
setPositions(optional)	number[]	Only for: 
iOS


TAn array of numbers that filters which recurrences to include. For example, for an event that recurs every Monday, passing 2 here will make it recur every other Monday. -366 to 366 (not including 0). Negative indicates a value from the end of the range. This field is only valid for Calendar.Frequency.Yearly.
weeksOfTheYear(optional)	number[]	Only for: 
iOS


The weeks of the year this event occurs on. -53 to 53 (not including 0). Negative indicates a value from the end of the range. This field is only valid for Calendar.Frequency.Yearly.
RecurringEventOptions
Only for: 
iOS


Property	Type	Description
futureEvents(optional)	boolean	Whether future events in the recurring series should also be updated. If true, will apply the given changes to the recurring instance specified by instanceStartDate and all future events in the series. If false, will only apply the given changes to the instance specified by instanceStartDate.
instanceStartDate(optional)	string | Date
Date object representing the start time of the desired instance, if looking for a single instance of a recurring event. If this is not provided and id represents a recurring event, the first instance of that event will be returned by default.
Reminder
Only for: 
iOS


A reminder record, used in the iOS Reminders app. No direct analog on Android.
Property	Type	Description
alarms(optional)	Alarm[]
Array of Alarm objects which control automated alarms to the user about the task.
calendarId(optional)	string	ID of the calendar that contains this reminder.
completed(optional)	boolean	Indicates whether or not the task has been completed.
completionDate(optional)	string | Date
Date object or string representing the date of completion, if completed is true. Setting this property of a nonnull Date will automatically set the reminder's completed value to true.
creationDate(optional)	string | Date
Date when the reminder record was created.
dueDate(optional)	string | Date
Date object or string representing the time when the reminder task is due.
id(optional)	string	Internal ID that represents this reminder on the device.
lastModifiedDate(optional)	string | Date
Date when the reminder record was last modified.
location(optional)	string	Location field of the reminder
notes(optional)	string	Description or notes saved with the reminder.
recurrenceRule(optional)	RecurrenceRule | null
Object representing rules for recurring or repeated reminders. null for one-time tasks.
startDate(optional)	string | Date
Date object or string representing the start date of the reminder task.
timeZone(optional)	string	Time zone the reminder is scheduled in.
title(optional)	string	Visible name of the reminder.
url(optional)	string	URL for the reminder.
Source
A source account that owns a particular calendar. Expo apps will typically not need to interact with Source objects.
Property	Type	Description
id(optional)	string	Only for: 
iOS


Internal ID that represents this source on the device.
isLocalAccount(optional)	boolean	Only for: 
Android


Whether this source is the local phone account. Must be true if type is undefined.
name	string	Name for the account that owns this calendar and was used to sync the calendar to the device.
type	string | SourceType
Type of the account that owns this calendar and was used to sync it to the device. If isLocalAccount is falsy then this must be defined, and must match an account on the device along with name, or the OS will delete the calendar. On iOS, one of SourceTypes.

Enums
AlarmMethod
Only for: 
Android


ALARM
AlarmMethod.ALARM ＝ "alarm"
ALERT
AlarmMethod.ALERT ＝ "alert"
DEFAULT
AlarmMethod.DEFAULT ＝ "default"
EMAIL
AlarmMethod.EMAIL ＝ "email"
SMS
AlarmMethod.SMS ＝ "sms"
AttendeeRole
ATTENDEE
Only for: 
Android


AttendeeRole.ATTENDEE ＝ "attendee"
CHAIR
Only for: 
iOS


AttendeeRole.CHAIR ＝ "chair"
NONE
Only for: 
Android


AttendeeRole.NONE ＝ "none"
NON_PARTICIPANT
Only for: 
iOS


AttendeeRole.NON_PARTICIPANT ＝ "nonParticipant"
OPTIONAL
Only for: 
iOS


AttendeeRole.OPTIONAL ＝ "optional"
ORGANIZER
Only for: 
Android


AttendeeRole.ORGANIZER ＝ "organizer"
PERFORMER
Only for: 
Android


AttendeeRole.PERFORMER ＝ "performer"
REQUIRED
Only for: 
iOS


AttendeeRole.REQUIRED ＝ "required"
SPEAKER
Only for: 
Android


AttendeeRole.SPEAKER ＝ "speaker"
UNKNOWN
Only for: 
iOS


AttendeeRole.UNKNOWN ＝ "unknown"
AttendeeStatus
ACCEPTED
AttendeeStatus.ACCEPTED ＝ "accepted"
COMPLETED
Only for: 
iOS


AttendeeStatus.COMPLETED ＝ "completed"
DECLINED
AttendeeStatus.DECLINED ＝ "declined"
DELEGATED
Only for: 
iOS


AttendeeStatus.DELEGATED ＝ "delegated"
IN_PROCESS
Only for: 
iOS


AttendeeStatus.IN_PROCESS ＝ "inProcess"
INVITED
Only for: 
Android


AttendeeStatus.INVITED ＝ "invited"
NONE
Only for: 
Android


AttendeeStatus.NONE ＝ "none"
PENDING
Only for: 
iOS


AttendeeStatus.PENDING ＝ "pending"
TENTATIVE
AttendeeStatus.TENTATIVE ＝ "tentative"
UNKNOWN
Only for: 
iOS


AttendeeStatus.UNKNOWN ＝ "unknown"
AttendeeType
GROUP
Only for: 
iOS


AttendeeType.GROUP ＝ "group"
NONE
Only for: 
Android


AttendeeType.NONE ＝ "none"
OPTIONAL
Only for: 
Android


AttendeeType.OPTIONAL ＝ "optional"
PERSON
Only for: 
iOS


AttendeeType.PERSON ＝ "person"
REQUIRED
Only for: 
Android


AttendeeType.REQUIRED ＝ "required"
RESOURCE
AttendeeType.RESOURCE ＝ "resource"
ROOM
Only for: 
iOS


AttendeeType.ROOM ＝ "room"
UNKNOWN
Only for: 
iOS


AttendeeType.UNKNOWN ＝ "unknown"
Availability
BUSY
Availability.BUSY ＝ "busy"
FREE
Availability.FREE ＝ "free"
NOT_SUPPORTED
Only for: 
iOS


Availability.NOT_SUPPORTED ＝ "notSupported"
TENTATIVE
Availability.TENTATIVE ＝ "tentative"
UNAVAILABLE
Only for: 
iOS


Availability.UNAVAILABLE ＝ "unavailable"
CalendarAccessLevel
Only for: 
Android


CONTRIBUTOR
CalendarAccessLevel.CONTRIBUTOR ＝ "contributor"
EDITOR
CalendarAccessLevel.EDITOR ＝ "editor"
FREEBUSY
CalendarAccessLevel.FREEBUSY ＝ "freebusy"
NONE
CalendarAccessLevel.NONE ＝ "none"
OVERRIDE
CalendarAccessLevel.OVERRIDE ＝ "override"
OWNER
CalendarAccessLevel.OWNER ＝ "owner"
READ
CalendarAccessLevel.READ ＝ "read"
RESPOND
CalendarAccessLevel.RESPOND ＝ "respond"
ROOT
CalendarAccessLevel.ROOT ＝ "root"
CalendarDialogResultActions
Enum containing all possible user responses to the calendar UI dialogs. Depending on what dialog is presented, a subset of the values applies.
canceled
Only for: 
iOS


CalendarDialogResultActions.canceled ＝ "canceled"
The user canceled or dismissed the dialog.
deleted
Only for: 
iOS


CalendarDialogResultActions.deleted ＝ "deleted"
The user deleted the event.
done
CalendarDialogResultActions.done ＝ "done"
On Android, this is the only possible result because the OS doesn't provide enough information to determine the user's action - the user may have canceled the dialog, modified the event, or deleted it.
On iOS, this means the user simply closed the dialog.
responded
Only for: 
iOS


CalendarDialogResultActions.responded ＝ "responded"
The user responded to and saved a pending event invitation.
saved
Only for: 
iOS


CalendarDialogResultActions.saved ＝ "saved"
The user saved a new event or modified an existing one.
CalendarType
Only for: 
iOS


BIRTHDAYS
CalendarType.BIRTHDAYS ＝ "birthdays"
CALDAV
CalendarType.CALDAV ＝ "caldav"
EXCHANGE
CalendarType.EXCHANGE ＝ "exchange"
LOCAL
CalendarType.LOCAL ＝ "local"
SUBSCRIBED
CalendarType.SUBSCRIBED ＝ "subscribed"
UNKNOWN
CalendarType.UNKNOWN ＝ "unknown"
DayOfTheWeek
Only for: 
iOS


Sunday
DayOfTheWeek.Sunday ＝ 1
Monday
DayOfTheWeek.Monday ＝ 2
Tuesday
DayOfTheWeek.Tuesday ＝ 3
Wednesday
DayOfTheWeek.Wednesday ＝ 4
Thursday
DayOfTheWeek.Thursday ＝ 5
Friday
DayOfTheWeek.Friday ＝ 6
Saturday
DayOfTheWeek.Saturday ＝ 7
EntityTypes
platform ios
EVENT
EntityTypes.EVENT ＝ "event"
REMINDER
EntityTypes.REMINDER ＝ "reminder"
EventAccessLevel
Only for: 
Android


CONFIDENTIAL
EventAccessLevel.CONFIDENTIAL ＝ "confidential"
DEFAULT
EventAccessLevel.DEFAULT ＝ "default"
PRIVATE
EventAccessLevel.PRIVATE ＝ "private"
PUBLIC
EventAccessLevel.PUBLIC ＝ "public"
EventStatus
CANCELED
EventStatus.CANCELED ＝ "canceled"
CONFIRMED
EventStatus.CONFIRMED ＝ "confirmed"
NONE
EventStatus.NONE ＝ "none"
TENTATIVE
EventStatus.TENTATIVE ＝ "tentative"
Frequency
DAILY
Frequency.DAILY ＝ "daily"
MONTHLY
Frequency.MONTHLY ＝ "monthly"
WEEKLY
Frequency.WEEKLY ＝ "weekly"
YEARLY
Frequency.YEARLY ＝ "yearly"
MonthOfTheYear
Only for: 
iOS


January
MonthOfTheYear.January ＝ 1
February
MonthOfTheYear.February ＝ 2
March
MonthOfTheYear.March ＝ 3
April
MonthOfTheYear.April ＝ 4
May
MonthOfTheYear.May ＝ 5
June
MonthOfTheYear.June ＝ 6
July
MonthOfTheYear.July ＝ 7
August
MonthOfTheYear.August ＝ 8
September
MonthOfTheYear.September ＝ 9
October
MonthOfTheYear.October ＝ 10
November
MonthOfTheYear.November ＝ 11
December
MonthOfTheYear.December ＝ 12
PermissionStatus
DENIED
PermissionStatus.DENIED ＝ "denied"
User has denied the permission.
GRANTED
PermissionStatus.GRANTED ＝ "granted"
User has granted the permission.
UNDETERMINED
PermissionStatus.UNDETERMINED ＝ "undetermined"
User hasn't granted or denied the permission yet.
ReminderStatus
Only for: 
iOS


COMPLETED
ReminderStatus.COMPLETED ＝ "completed"
INCOMPLETE
ReminderStatus.INCOMPLETE ＝ "incomplete"
SourceType
Only for: 
iOS


BIRTHDAYS
SourceType.BIRTHDAYS ＝ "birthdays"
CALDAV
SourceType.CALDAV ＝ "caldav"
EXCHANGE
SourceType.EXCHANGE ＝ "exchange"
LOCAL
SourceType.LOCAL ＝ "local"
MOBILEME
SourceType.MOBILEME ＝ "mobileme"
SUBSCRIBED
SourceType.SUBSCRIBED ＝ "subscribed"
Permissions
Android
If you only intend to use the system-provided calendar UI, you don't need to request any permissions.
Otherwise, you must add the following permissions to your app.json inside the expo.android.permissions array.
Android Permission	Description
READ_CALENDAR	Allows an application to read the user's calendar data.
WRITE_CALENDAR	Allows an application to write the user's calendar data.
iOS
The following usage description keys are used by this library:
Info.plist Key	Description
NSCalendarsUsageDescription	A message that tells the user why the app is requesting access to the user’s calendar data.
NSRemindersUsageDescription	A message that tells the user why the app is requesting access to the user’s reminders.

#20

Expo Camera

GitHub

npm

A React component that renders a preview for the device's front or back camera.
Android (device only)
iOS (device only)
Web
Bundled version:
~16.1.8
________________________________________
expo-camera provides a React component that renders a preview of the device's front or back camera. The camera's parameters such as zoom, torch, and flash mode are adjustable. Using CameraView, you can take photos and record videos that are saved to the app's cache. The component is also capable of detecting bar codes appearing in the preview. Run the example on your device to see all these features working together.
Installation
Terminal
Copy
- npx expo install expo-camera
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration in app config
You can configure expo-camera using its built-in config plugin if you use config plugins in your project (EAS Build or npx expo run:[android|ios]). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.
Example app.json with config plugin
app.json
Copy
{
  "expo": {
    "plugins": [
      [
        "expo-camera",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera",
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone",
          "recordAudioAndroid": true
        }
      ]
    ]
  }
}
Configurable properties
Name	Default	Description
cameraPermission	"Allow $(PRODUCT_NAME) to access your camera"	Only for: 
iOS


A string to set the NSCameraUsageDescription permission message.

microphonePermission	"Allow $(PRODUCT_NAME) to access your microphone"	Only for: 
iOS


A string to set the NSMicrophoneUsageDescription permission message.

recordAudioAndroid	true	Only for: 
Android


A boolean that determines whether to enable the RECORD_AUDIO permission on Android.
Are you using this library in an existing React Native app?
•	
•	
•	
Usage
Only one Camera preview can be active at any given time. If you have multiple screens in your app, you should unmount Camera components whenever a screen is unfocused.
Basic Camera Usage
Copy
Open in Snack
import { CameraView, CameraType, useCameraPermissions } from 'expo-camera';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [facing, setFacing] = useState<CameraType>('back');
  const [permission, requestPermission] = useCameraPermissions();

  if (!permission) {
    // Camera permissions are still loading.
    return <View />;
  }

  if (!permission.granted) {
    // Camera permissions are not granted yet.
    return (
      <View style={styles.container}>
        <Text style={styles.message}>We need your permission to show the camera</Text>
        <Button onPress={requestPermission} title="grant permission" />
      </View>
    );
  }

  function toggleCameraFacing() {
    setFacing(current => (current === 'back' ? 'front' : 'back'));
  }

  return (
    <View style={styles.container}>
      <CameraView style={styles.camera} facing={facing}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>
            <Text style={styles.text}>Flip Camera</Text>
          </TouchableOpacity>
        </View>
      </CameraView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  message: {
    textAlign: 'center',
    paddingBottom: 10,
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: 'transparent',
    margin: 64,
  },
  button: {
    flex: 1,
    alignSelf: 'flex-end',
    alignItems: 'center',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
});
Show More
Advanced usage

Camera app example
A complete example that shows how to take a picture and display it. Written in TypeScript.

Web support
Most browsers support a version of web camera functionality, you can check out the web camera browser support here. Image URIs are always returned as base64 strings because local file system paths are unavailable in the browser.
Chrome iframe usage
When using Chrome versions 64+, if you try to use a web camera in a cross-origin iframe nothing will render. To add support for cameras in your iframe simply add the attribute allow="microphone; camera;" to the iframe element:
<iframe src="..." allow="microphone; camera;">
  <!-- <CameraView /> -->
</iframe>
API
import { CameraView } from 'expo-camera';
Component
CameraView
Type: React.Component<CameraViewProps>
CameraViewProps
active
Only for: 
iOS


Optional • Type: boolean • Default: true
A boolean that determines whether the camera should be active. Useful in situations where the camera may not have unmounted but you still want to stop the camera session.
animateShutter
Optional • Type: boolean • Default: true
A boolean that determines whether the camera shutter animation should be enabled.
autofocus
Only for: 
iOS


Optional • Type: FocusMode • Default: off
Indicates the focus mode to use.
barcodeScannerSettings
Optional • Type: BarcodeSettings
Example
<CameraView
  barcodeScannerSettings={{
    barcodeTypes: ["qr"],
  }}
/>
enableTorch
Optional • Type: boolean • Default: false
A boolean to enable or disable the torch.
facing
Optional • Type: CameraType • Default: 'back'
Camera facing. Use one of CameraType. When front, use the front-facing camera. When back, use the back-facing camera.
flash
Optional • Type: FlashMode • Default: 'off'
Camera flash mode. Use one of FlashMode values. When on, the flash on your device will turn on when taking a picture. When off, it won't. Setting it to auto will fire flash if required.
mirror
Optional • Type: boolean • Default: false
A boolean that determines whether the camera should mirror the image when using the front camera.
mode
Optional • Type: CameraMode • Default: 'picture'
Used to select image or video output.
mute
Optional • Type: boolean • Default: false
If present, video will be recorded with no sound.
onAvailableLensesChanged
Only for: 
iOS


Optional • Type: (event: AvailableLenses) => void
Callback invoked when the cameras available lenses change.
event: AvailableLenses
result object that contains a lenses property containing an array of available lenses.
onBarcodeScanned
Optional • Type: (scanningResult: BarcodeScanningResult) => void
Callback that is invoked when a barcode has been successfully scanned. The callback is provided with an object of the BarcodeScanningResult shape, where the type refers to the barcode type that was scanned, and the data is the information encoded in the barcode (in this case of QR codes, this is often a URL). See BarcodeType for supported values.
onCameraReady
Optional • Type: () => void
Callback invoked when camera preview has been set.
onMountError
Optional • Type: (event: CameraMountError) => void
Callback invoked when camera preview could not start.
event: CameraMountError
Error object that contains a message.
onResponsiveOrientationChanged
Only for: 
iOS


Optional • Type: (event: ResponsiveOrientationChanged) => void
Callback invoked when responsive orientation changes. Only applicable if responsiveOrientationWhenOrientationLocked is true.
event: ResponsiveOrientationChanged
result object that contains updated orientation of camera
pictureSize
Optional • Type: string
A string representing the size of pictures takePictureAsync will take. Available sizes can be fetched with getAvailablePictureSizesAsync. Setting this prop will cause the ratio prop to be ignored as the aspect ratio is determined by the selected size.
poster
Only for: 
Web


Optional • Type: string
A URL for an image to be shown while the camera is loading.
ratio
Only for: 
Android


Optional • Type: CameraRatio
A string representing the aspect ratio of the preview. For example, 4:3 and 16:9. Note: Setting the aspect ratio here will change the scaleType of the camera preview from FILL to FIT. Also, when using 1:1, devices only support certain sizes. If you specify an unsupported size, the closest supported ratio will be used.
responsiveOrientationWhenOrientationLocked
Only for: 
iOS


Optional • Type: boolean
Whether to allow responsive orientation of the camera when the screen orientation is locked (that is, when set to true, landscape photos will be taken if the device is turned that way, even if the app or device orientation is locked to portrait).
selectedLens
Only for: 
iOS


Optional • Type: string • Default: 'builtInWideAngleCamera'
Available lenses are emitted to the onAvailableLensesChanged callback whenever the currently selected camera changes or by calling getAvailableLensesAsync. You can read more about the available lenses in the Apple documentation.
videoBitrate
Optional • Type: number
The bitrate of the video recording in bits per second. Note: On iOS, you must specify the video codec when calling recordAsync to use this option.
Example
10_000_000
videoQuality
Optional • Type: VideoQuality
Specify the quality of the recorded video. Use one of VideoQuality possible values: for 16:9 resolution 2160p, 1080p, 720p, 480p : Android only and for 4:3 4:3 (the size is 640x480). If the chosen quality is not available for a device, the highest available is chosen.
videoStabilizationMode
Only for: 
iOS


Optional • Type: VideoStabilization
The video stabilization mode used for a video recording. Use one of VideoStabilization.<value>. You can read more about each stabilization type in Apple Documentation.
zoom
Optional • Type: number • Default: 0
A value between 0 and 1 being a percentage of device's max zoom, where 0 means not zoomed and 1 means maximum zoom.
Inherited Props
•	ViewProps
Static Methods
dismissScanner()
Only for: 
iOS


Dismiss the scanner presented by launchScanner.
On Android, the scanner is dismissed automatically when a barcode is scanned.
Returns:
Promise<void>
getAvailableVideoCodecsAsync()
Only for: 
iOS


Queries the device for the available video codecs that can be used in video recording.
Returns:
Promise<VideoCodec[]>
A promise that resolves to a list of strings that represents available codecs.
isAvailableAsync()
Only for: 
Web


Check whether the current device has a camera. This is useful for web and simulators cases. This isn't influenced by the Permissions API (all platforms), or HTTP usage (in the browser). You will still need to check if the native permission has been accepted.
Returns:
Promise<boolean>
launchScanner(options)
Only for: 
Android
iOS


Parameter	Type
options(optional)	ScanningOptions


On Android, we will use the Google code scanner. On iOS, presents a modal view controller that uses the DataScannerViewController available on iOS 16+.
Returns:
Promise<void>
onModernBarcodeScanned(listener)
Only for: 
Android
iOS


Parameter	Type	Description
listener	(event: ScanningResult) => void
Invoked with the ScanningResult when a bar code has been successfully scanned.


Invokes the listener function when a bar code has been successfully scanned. The callback is provided with an object of the ScanningResult shape, where the type refers to the bar code type that was scanned and the data is the information encoded in the bar code (in this case of QR codes, this is often a URL). See BarcodeType for supported values.
Returns:
EventSubscription
Component Methods
getAvailableLensesAsync()
Only for: 
iOS


Returns the available lenses for the currently selected camera.
Returns:
Promise<string[]>
Returns a Promise that resolves to an array of strings representing the lens type that can be passed to selectedLens prop.
getAvailablePictureSizesAsync()
Get picture sizes that are supported by the device.
Returns:
Promise<string[]>
Returns a Promise that resolves to an array of strings representing picture sizes that can be passed to pictureSize prop. The list varies across Android devices but is the same for every iOS.
getSupportedFeatures()
Returns an object with the supported features of the camera on the current device.
Returns:
{
  isModernBarcodeScannerAvailable: boolean, 
  toggleRecordingAsyncAvailable: boolean
}
pausePreview()
Pauses the camera preview. It is not recommended to use takePictureAsync when preview is paused.
Returns:
Promise<void>
recordAsync(options)
Only for: 
Android
iOS


Parameter	Type	Description
options(optional)	CameraRecordingOptions
A map of CameraRecordingOptions type.

Starts recording a video that will be saved to cache directory. Videos are rotated to match device's orientation. Flipping camera during a recording results in stopping it.
Returns:
Promise<undefined | { uri: string }>
Returns a Promise that resolves to an object containing video file uri property and a codec property on iOS. The Promise is returned if stopRecording was invoked, one of maxDuration and maxFileSize is reached or camera preview is stopped.
resumePreview()
Resumes the camera preview.
Returns:
Promise<void>
stopRecording()
Only for: 
Android
iOS


Stops recording if any is in progress.
Returns:
void
takePictureAsync(options)
Parameter	Type	Description
options	CameraPictureOptions & {
  pictureRef: true
}	An object in form of CameraPictureOptions type.

Takes a picture and saves it to app's cache directory. Photos are rotated to match device's orientation (if options.skipProcessing flag is not enabled) and scaled to match the preview.
Note: Make sure to wait for the onCameraReady callback before calling this method.
Returns:
Promise<PictureRef>
Returns a Promise that resolves to CameraCapturedPicture object, where uri is a URI to the local image file on Android, iOS, and a base64 string on web (usable as the source for an Image element). The width and height properties specify the dimensions of the image.
base64 is included if the base64 option was truthy, and is a string containing the JPEG data of the image in Base64. Prepend it with 'data:image/jpg;base64,' to get a data URI, which you can use as the source for an Image element for example.
exif is included if the exif option was truthy, and is an object containing EXIF data for the image. The names of its properties are EXIF tags and their values are the values for those tags.
On native platforms, the local image URI is temporary. Use FileSystem.copyAsync to make a permanent copy of the image.
Note: Avoid calling this method while the preview is paused. On Android, this will throw an error. On iOS, this will take a picture of the last frame that is currently on screen.
takePictureAsync(options)
Parameter	Type	Description
options(optional)	CameraPictureOptions
An object in form of CameraPictureOptions type.

Takes a picture and saves it to app's cache directory. Photos are rotated to match device's orientation (if options.skipProcessing flag is not enabled) and scaled to match the preview.
Note: Make sure to wait for the onCameraReady callback before calling this method.
Returns:
Promise<CameraCapturedPicture>
Returns a Promise that resolves to CameraCapturedPicture object, where uri is a URI to the local image file on Android, iOS, and a base64 string on web (usable as the source for an Image element). The width and height properties specify the dimensions of the image.
base64 is included if the base64 option was truthy, and is a string containing the JPEG data of the image in Base64. Prepend it with 'data:image/jpg;base64,' to get a data URI, which you can use as the source for an Image element for example.
exif is included if the exif option was truthy, and is an object containing EXIF data for the image. The names of its properties are EXIF tags and their values are the values for those tags.
On native platforms, the local image URI is temporary. Use FileSystem.copyAsync to make a permanent copy of the image.
Note: Avoid calling this method while the preview is paused. On Android, this will throw an error. On iOS, this will take a picture of the last frame that is currently on screen.
toggleRecordingAsync()
Pauses or resumes the video recording. Only has an effect if there is an active recording. On iOS, this method only supported on iOS 18.
Returns:
Promise<undefined | void>
Example
const { toggleRecordingAsyncAvailable } = getSupportedFeatures()

return (
 {toggleRecordingAsyncAvailable && (
   <Button title="Toggle Recording" onPress={toggleRecordingAsync} />
 )}
)
Hooks
useCameraPermissions(options)
Parameter	Type
options(optional)	PermissionHookOptions<object>


Check or request permissions to access the camera. This uses both requestCameraPermissionsAsync and getCameraPermissionsAsync to interact with the permissions.
Returns:
[null | PermissionResponse, RequestPermissionMethod<PermissionResponse>, GetPermissionMethod<PermissionResponse>]
Example
const [status, requestPermission] = useCameraPermissions();
useMicrophonePermissions(options)
Parameter	Type
options(optional)	PermissionHookOptions<object>


Check or request permissions to access the microphone. This uses both requestMicrophonePermissionsAsync and getMicrophonePermissionsAsync to interact with the permissions.
Returns:
[null | PermissionResponse, RequestPermissionMethod<PermissionResponse>, GetPermissionMethod<PermissionResponse>]
Example
const [status, requestPermission] = Camera.useMicrophonePermissions();
Classes
CameraNativeModule
Type: Class extends _default<CameraEvents>
CameraNativeModule Properties
dismissScanner
Read Only • Type: () => Promise<void>
getAvailableVideoCodecsAsync
Read Only • Type: () => Promise<VideoCodec[]>
getCameraPermissionsAsync
Read Only • Type: () => Promise<PermissionResponse>
getMicrophonePermissionsAsync
Read Only • Type: () => Promise<PermissionResponse>
isAvailableAsync
Read Only • Type: () => Promise<boolean>
isModernBarcodeScannerAvailable
Read Only • Type: boolean
launchScanner
Read Only • Type: (options?: ScanningOptions) => Promise<void>
requestCameraPermissionsAsync
Read Only • Type: () => Promise<PermissionResponse>
requestMicrophonePermissionsAsync
Read Only • Type: () => Promise<PermissionResponse>
scanFromURLAsync
Read Only • Type: (url: string, barcodeTypes?: BarcodeType[]) => Promise<BarcodeScanningResult[]>
toggleRecordingAsyncAvailable
Read Only • Type: boolean
PictureRef
Type: Class extends SharedRef<'image'>
A reference to a native instance of the image.
PictureRef Properties
height
Type: number
Height of the image.
nativeRefType
Type: string
The type of the native reference.
width
Type: number
Width of the image.
PictureRef Methods
savePictureAsync(options)
Parameter	Type	Description
options(optional)	SavePictureOptions
A map defining how modified image should be saved.

Saves the image to the file system in the cache directory.
Returns:
Promise<PhotoResult>
Methods
Camera.scanFromURLAsync(url, barcodeTypes)
Parameter	Type	Description
url	string	URL to get the image from.
barcodeTypes(optional)	BarcodeType[]
An array of bar code types. Defaults to all supported bar code types on the platform.
Note: Only QR codes are supported on iOS. On android, the barcode should take up the majority of the image for best results.

Scan bar codes from the image at the given URL.
Returns:
Promise<BarcodeScanningResult[]>
A possibly empty array of objects of the BarcodeScanningResult shape, where the type refers to the barcode type that was scanned and the data is the information encoded in the barcode.
Interfaces
Subscription
A subscription object that allows to conveniently remove an event listener from the emitter.
Subscription Methods
remove()
Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.
Returns:
void
Types
AvailableLenses
Property	Type	Description
lenses	string[]	-
BarcodeBounds
Property	Type	Description
origin	BarcodePoint
The origin point of the bounding box.
size	BarcodeSize
The size of the bounding box.
BarcodePoint
Type: Point
These coordinates are represented in the coordinate space of the camera source (e.g. when you are using the camera view, these values are adjusted to the dimensions of the view).
BarcodeScanningResult
Property	Type	Description
bounds	BarcodeBounds
The BarcodeBounds object. bounds in some case will be representing an empty rectangle. Moreover, bounds doesn't have to bound the whole barcode. For some types, they will represent the area used by the scanner.
cornerPoints	BarcodePoint[]
Corner points of the bounding box. cornerPoints is not always available and may be empty. On iOS, for code39 and pdf417 you don't get this value.
data	string	The parsed information encoded in the barcode.
extra(optional)	AndroidBarcode
Only for: 
Android


Extra information returned by the specific type of barcode.
type	string	The barcode type.
BarcodeSettings
Property	Type	Description
barcodeTypes	BarcodeType[]
-
BarcodeSize
Property	Type	Description
height	number	The height value.
width	number	The width value.
BarcodeType
Literal Type: string
The available barcode types that can be scanned.
Acceptable values are: 'aztec' | 'ean13' | 'ean8' | 'qr' | 'pdf417' | 'upc_e' | 'datamatrix' | 'code39' | 'code93' | 'itf14' | 'codabar' | 'code128' | 'upc_a'
CameraCapturedPicture
Property	Type	Description
base64(optional)	string	A Base64 representation of the image.
exif(optional)	Partial<MediaTrackSettings> | any
On Android and iOS this object may include various fields based on the device and operating system. On web, it is a partial representation of the MediaTrackSettings dictionary.

format	'jpg' | 'png'	The format of the captured image.
height	number	Captured image height.
uri	string	On web, the value of uri is the same as base64 because file system URLs are not supported in the browser.
width	number	Captured image width.
CameraEvents
Property	Type	Description
onModernBarcodeScanned	(event: ScanningResult) => void
-
CameraMode
Literal Type: string
Acceptable values are: 'picture' | 'video'
CameraMountError
Property	Type	Description
message	string	-
CameraOrientation
Literal Type: string
Acceptable values are: 'portrait' | 'portraitUpsideDown' | 'landscapeLeft' | 'landscapeRight'
CameraPictureOptions
Property	Type	Description
additionalExif(optional)	Record<string, any>	Only for: 
Android
iOS


Additional EXIF data to be included for the image. Only useful when exif option is set to true.
base64(optional)	boolean	Whether to also include the image data in Base64 format.
exif(optional)	boolean	Whether to also include the EXIF data for the image.
imageType(optional)	ImageType
-
isImageMirror(optional)	boolean	-
mirror(optional)	boolean	Deprecated Use mirror prop on CameraView instead.
Only for: 
Android
iOS


When set to true, the output image will be flipped along the vertical axis when using the front camera.
Default:false
onPictureSaved(optional)	(picture: CameraCapturedPicture) => void	A callback invoked when picture is saved. If set, the promise of this method will resolve immediately with no data after picture is captured. The data that it should contain will be passed to this callback. If displaying or processing a captured photo right after taking it is not your case, this callback lets you skip waiting for it to be saved.
pictureRef(optional)	boolean	Whether the camera should return an image ref that can be used directly in the Image component.
quality(optional)	number	Specify the compression quality from 0 to 1. 0 means compress for small size, and 1 means compress for maximum quality.
Default:1
scale(optional)	number	-
shutterSound(optional)	boolean	To programmatically disable the camera shutter sound
Default:true
skipProcessing(optional)	boolean	If set to true, camera skips orientation adjustment and returns an image straight from the device's camera. If enabled, quality option is discarded (processing pipeline is skipped as a whole). Although enabling this option reduces image delivery time significantly, it may cause the image to appear in a wrong orientation in the Image component (at the time of writing, it does not respect EXIF orientation of the images).
Note: Enabling skipProcessing would cause orientation uncertainty. Image component does not respect EXIF stored orientation information, that means obtained image would be displayed wrongly (rotated by 90°, 180° or 270°). Different devices provide different orientations. For example some Sony Xperia or Samsung devices don't provide correctly oriented images by default. To always obtain correctly oriented image disable skipProcessing option.
CameraRatio
Literal Type: string
Acceptable values are: '4:3' | '16:9' | '1:1'
CameraRecordingOptions
Property	Type	Description
codec(optional)	VideoCodec
Only for: 
iOS


This option specifies what codec to use when recording the video. See VideoCodec for the possible values.

maxDuration(optional)	number	Maximum video duration in seconds.
maxFileSize(optional)	number	Maximum video file size in bytes.
mirror(optional)	boolean	Deprecated Use mirror prop on CameraView instead.
If true, the recorded video will be flipped along the vertical axis. iOS flips videos recorded with the front camera by default, but you can reverse that back by setting this to true. On Android, this is handled in the user's device settings.
CameraType
Literal Type: string
Acceptable values are: 'front' | 'back'
FlashMode
Literal Type: string
Acceptable values are: 'off' | 'on' | 'auto'
FocusMode
Literal Type: string
This option specifies the mode of focus on the device.
•	on - Indicates that the device should autofocus once and then lock the focus.
•	off - Indicates that the device should automatically focus when needed.
Acceptable values are: 'on' | 'off'
ImageType
Literal Type: string
Acceptable values are: 'png' | 'jpg'
PermissionExpiration
Literal Type: union
Permission expiration time. Currently, all permissions are granted permanently.
Acceptable values are: 'never' | number
PermissionHookOptions
Literal Type: union
Acceptable values are: PermissionHookBehavior | Options
PermissionResponse
An object obtained by permissions get and request functions.
Property	Type	Description
canAskAgain	boolean	Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.
expires	PermissionExpiration
Determines time when the permission expires.
granted	boolean	A convenience boolean that indicates if the permission is granted.
status	PermissionStatus
Determines the status of the permission.
PhotoResult
Property	Type	Description
base64(optional)	string	A Base64 representation of the image.
height	number	Height of the image.
uri	string	A URI to the modified image (usable as the source for an Image or Video element).
width	number	Width of the image.
Point
Property	Type	Description
x	number	-
y	number	-
ResponsiveOrientationChanged
Property	Type	Description
orientation	CameraOrientation
-
SavePictureOptions
A map defining how modified image should be saved.
Property	Type	Description
base64(optional)	boolean	Whether to also include the image data in Base64 format.
metadata(optional)	Record<string, any>	Additional metadata to be included for the image.
quality(optional)	number	Specify the compression quality from 0 to 1. 0 means compress for small size, and 1 means compress for maximum quality.
ScanningOptions
Only for: 
iOS


Property	Type	Description
barcodeTypes	BarcodeType[]
The type of codes to scan for.
isGuidanceEnabled(optional)	boolean	Only for: 
iOS


Guidance text, such as “Slow Down,” appears over the live video.
Default:true
isHighlightingEnabled(optional)	boolean	Only for: 
iOS


Indicates whether the scanner displays highlights around recognized items.
Default:false
isPinchToZoomEnabled(optional)	boolean	Only for: 
iOS


Indicates whether people can use a two-finger pinch-to-zoom gesture.
Default:true
ScanningResult
Type: Omit<BarcodeScanningResult, 'bounds' | 'cornerPoints'>
VideoCodec
Only for: 
iOS


Literal Type: string
This option specifies what codec to use when recording a video.
Acceptable values are: 'avc1' | 'hvc1' | 'jpeg' | 'apcn' | 'ap4h'
VideoQuality
Literal Type: string
Acceptable values are: '2160p' | '1080p' | '720p' | '480p' | '4:3'
VideoStabilization
Only for: 
iOS


Literal Type: string
This option specifies the stabilization mode to use when recording a video.
Acceptable values are: 'off' | 'standard' | 'cinematic' | 'auto'
Enums
PermissionStatus
DENIED
PermissionStatus.DENIED ＝ "denied"
User has denied the permission.
GRANTED
PermissionStatus.GRANTED ＝ "granted"
User has granted the permission.
UNDETERMINED
PermissionStatus.UNDETERMINED ＝ "undetermined"
User hasn't granted or denied the permission yet.
Permissions
Android
This package automatically adds the CAMERA permission to your app. If you want to record videos with audio, you have to include the RECORD_AUDIO in your app.json inside the expo.android.permissions array.
Android Permission	Description
CAMERA	Required to be able to access the camera device.
RECORD_AUDIO	Allows an application to record audio.
iOS
The following usage description keys are used by this library:
Info.plist Key	Description
NSCameraUsageDescription	A message that tells the user why the app is requesting access to the device’s camera.
NSMicrophoneUsageDescription	A message that tells the user why the app is requesting access to the device’s microphone.

#21

Expo Cellular

GitHub

npm

An API that provides information about the user's cellular service provider.
Android
iOS
Web
Bundled version:
~7.1.4
________________________________________
expo-cellular provides information about the user's cellular service provider, such as its unique identifier, cellular connection type, and whether it allows VoIP calls on its network.
Installation
Terminal
Copy
- npx expo install expo-cellular
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration
Are you using this library in an existing React Native app?
API
import * as Cellular from 'expo-cellular';
Constants
Deprecated Use allowsVoipAsync() instead.
Cellular.allowsVoip
Type: boolean | null
Indicates if the carrier allows making VoIP calls on its network. On Android, this checks whether the system supports SIP-based VoIP API. See the Android documentation for more information.
On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the boolean value indicating the carrier’s policy regarding VoIP. If you then install a new SIM card, its VoIP policy boolean replaces the previous value of this property.
On web, this returns null.
Example
Cellular.allowsVoip; // true or false
Deprecated Use getCarrierNameAsync() instead.
Cellular.carrier
Type: string | null
The name of the user’s home cellular service provider. If the device has dual SIM cards, only the carrier for the currently active SIM card will be returned. On Android, this value is only available when the SIM state is SIM_STATE_READY. Otherwise, this returns null.
On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the name of the carrier. If you then install a new SIM card, its carrier name replaces the previous value of this property. The value for this property is null if the user never configured a carrier for the device.
On web, this returns null.
Example
Cellular.carrier; // "T-Mobile" or "Verizon"
Deprecated Use getIsoCountryCodeAsync() instead.
Cellular.isoCountryCode
Type: string | null
The ISO country code for the user’s cellular service provider. On iOS, the value is null if any of the following apply:
•	The device is in airplane mode.
•	There is no SIM card in the device.
•	The device is outside of cellular service range.
On web, this returns null.
Example
Cellular.isoCountryCode; // "us" or "au"
Deprecated Use getMobileCountryCodeAsync() instead.
Cellular.mobileCountryCode
Type: string | null
The mobile country code (MCC) for the user’s current registered cellular service provider. On Android, this value is only available when SIM state is SIM_STATE_READY. Otherwise, this returns null. On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode. Furthermore, the value for this property is null if any of the following apply:
•	There is no SIM card in the device.
•	The device is outside of cellular service range.
On web, this returns null.
Example
Cellular.mobileCountryCode; // "310"
Deprecated Use getMobileNetworkCodeAsync() instead.
Cellular.mobileNetworkCode
Type: string | null
The ISO country code for the user’s cellular service provider. On iOS, the value is null if any of the following apply:
•	The device is in airplane mode.
•	There is no SIM card in the device.
•	The device is outside of cellular service range.
On web, this returns null.
Example
Cellular.mobileNetworkCode; // "260"
Hooks
usePermissions(options)
Parameter	Type
options(optional)	PermissionHookOptions<object>


Check or request permissions to access the phone state. This uses both Cellular.requestPermissionsAsync and Cellular.getPermissionsAsync to interact with the permissions.
Returns:
[null | PermissionResponse, RequestPermissionMethod<PermissionResponse>, GetPermissionMethod<PermissionResponse>]
Example
const [status, requestPermission] = Cellular.usePermissions();
Methods
Cellular.allowsVoipAsync()
Returns:
Promise<boolean | null>
Returns if the carrier allows making VoIP calls on its network. On Android, this checks whether the system supports SIP-based VoIP API. See here to view more information.
On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the boolean value indicating the carrier’s policy regarding VoIP. If you then install a new SIM card, its VoIP policy boolean replaces the previous value of this property.
On web, this returns null.
Example
await Cellular.allowsVoipAsync(); // true or false
Cellular.getCarrierNameAsync()
Returns:
Promise<string | null>
Returns name of the user’s home cellular service provider. If the device has dual SIM cards, only the carrier for the currently active SIM card will be returned.
On Android, this value is only available when the SIM state is SIM_STATE_READY. Otherwise, this returns null.
On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the name of the carrier. If you then install a new SIM card, its carrier name replaces the previous value of this property. The value for this property is null if the user never configured a carrier for the device.
On web, this returns null.
Example
await Cellular.getCarrierNameAsync(); // "T-Mobile" or "Verizon"
Cellular.getCellularGenerationAsync()
Returns:
Promise<CellularGeneration>
Returns a promise which fulfils with a Cellular.CellularGeneration enum value that represents the current cellular-generation type.
You will need to check if the native permission has been accepted to obtain generation. If the permission is denied getCellularGenerationAsync will resolve to Cellular.Cellular Generation.UNKNOWN.
On web, this method uses navigator.connection.effectiveType to detect the effective type of the connection using a combination of recently observed round-trip time and downlink values. See here to view browser compatibility.
Example
await Cellular.getCellularGenerationAsync();
// CellularGeneration.CELLULAR_4G
Cellular.getIsoCountryCodeAsync()
Returns:
Promise<string | null>
Returns the ISO country code for the user’s cellular service provider.
On iOS, the value is null if any of the following apply:
•	The device is in airplane mode.
•	There is no SIM card in the device.
•	The device is outside of cellular service range.
On web, this returns null.
Example
await Cellular.getIsoCountryCodeAsync(); // "us" or "au"
Cellular.getMobileCountryCodeAsync()
Returns:
Promise<string | null>
Returns mobile country code (MCC) for the user’s current registered cellular service provider.
On Android, this value is only available when SIM state is SIM_STATE_READY. Otherwise, this returns null. On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode. Furthermore, the value for this property is null if any of the following apply:
•	There is no SIM card in the device.
•	The device is outside of cellular service range.
On web, this returns null.
Example
await Cellular.getMobileCountryCodeAsync(); // "310"
Cellular.getMobileNetworkCodeAsync()
Returns:
Promise<string | null>
Returns the mobile network code (MNC) for the user’s current registered cellular service provider.
On Android, this value is only available when SIM state is SIM_STATE_READY. Otherwise, this returns null. On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode. Furthermore, the value for this property is null if any of the following apply:
•	There is no SIM card in the device.
•	The device is outside of cellular service range.
On web, this returns null.
Example
await Cellular.getMobileNetworkCodeAsync(); // "310"
Cellular.getPermissionsAsync()
Checks user's permissions for accessing phone state.
Returns:
Promise<PermissionResponse>
Cellular.requestPermissionsAsync()
Asks the user to grant permissions for accessing the phone state.
Returns:
Promise<PermissionResponse>
Enums
CellularGeneration
Describes the current generation of the cellular connection. It is an enum with these possible values:
UNKNOWN
CellularGeneration.UNKNOWN ＝ 0
Either we are not currently connected to a cellular network or type could not be determined.
CELLULAR_2G
CellularGeneration.CELLULAR_2G ＝ 1
Currently connected to a 2G cellular network. Includes CDMA, EDGE, GPRS, and IDEN type connections.
CELLULAR_3G
CellularGeneration.CELLULAR_3G ＝ 2
Currently connected to a 3G cellular network. Includes EHRPD, EVDO, HSPA, HSUPA, HSDPA, HSPAP, and UTMS type connections.
CELLULAR_4G
CellularGeneration.CELLULAR_4G ＝ 3
Currently connected to a 4G cellular network. Includes LTE type connections.
CELLULAR_5G
CellularGeneration.CELLULAR_5G ＝ 4
Currently connected to a 5G cellular network. Includes NR and NRNSA type connections.
Error codes
Code	Description
ERR_CELLULAR_GENERATION_UNKNOWN_NETWORK_TYPE	Unable to access network type or not connected to a cellular network
Permissions
Android
You must add the following permissions to your app.json inside the expo.android.permissions array.
Android Permission	Description
READ_PHONE_STATE	Allows read only access to phone state, including the current cellular network information, the status of any ongoing calls, and a list of any PhoneAccounts registered on the device.
Allows read only access to phone state, including the current cellular network information, the status of any ongoing calls, and a list of any PhoneAccounts registered on the device.

iOS
No permissions required.
#22

Expo Checkbox

GitHub

npm

A universal React component that provides basic checkbox functionality.
Android
iOS
Web
Bundled version:
~4.1.4
________________________________________
expo-checkbox provides a basic boolean input element for all platforms.
Installation
Terminal
Copy
- npx expo install expo-checkbox
Usage
Basic Checkbox usage
Copy
Open in Snack
import Checkbox from 'expo-checkbox';
import { useState } from 'react';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const [isChecked, setChecked] = useState(false);

  return (
    <View style={styles.container}>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Normal checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox
          style={styles.checkbox}
          value={isChecked}
          onValueChange={setChecked}
          color={isChecked ? '#4630EB' : undefined}
        />
        <Text style={styles.paragraph}>Custom colored checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Disabled checkbox</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginHorizontal: 16,
    marginVertical: 32,
  },
  section: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  paragraph: {
    fontSize: 15,
  },
  checkbox: {
    margin: 8,
  },
});
Show More
API
import Checkbox from 'expo-checkbox';
Component
Checkbox
Type: React.Element<CheckboxProps>
CheckboxProps
color
Optional • Type: ColorValue
The tint or color of the checkbox. This overrides the disabled opaque style.
disabled
Optional • Type: boolean
If the checkbox is disabled, it becomes opaque and uncheckable.
onChange
Optional • Type: (event: NativeSyntheticEvent<CheckboxEvent> | SyntheticEvent<HTMLInputElement, CheckboxEvent>) => void
Callback that is invoked when the user presses the checkbox.
event: NativeSyntheticEvent<CheckboxEvent> | SyntheticEvent<HTMLInputElement, CheckboxEvent>
A native event containing the checkbox change.
onValueChange
Optional • Type: (value: boolean) => void
Callback that is invoked when the user presses the checkbox.
value: boolean
A boolean indicating the new checked state of the checkbox.
value
Optional • Type: boolean • Default: false
Value indicating if the checkbox should be rendered as checked or not.
Inherited Props
•	ViewProps
Types
CheckboxEvent
Property	Type	Description
target	any	On native platforms, a NodeHandle for the element on which the event has occurred. On web, a DOM node on which the event has occurred.
value	boolean	A boolean representing checkbox current value.

#23

Expo Clipboard

GitHub

npm

A universal library that allows getting and setting Clipboard content.
Android
iOS
Web
Bundled version:
~7.1.4
________________________________________
expo-clipboard provides an interface for getting and setting Clipboard content on Android, iOS, and Web.
Installation
Terminal
Copy
- npx expo install expo-clipboard
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Clipboard
Copy
Open in Snack
import { useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import * as Clipboard from 'expo-clipboard';

export default function App() {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = async () => {
    await Clipboard.setStringAsync('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getStringAsync();
    setCopiedText(text);
  };

  return (
    <View style={styles.container}>
      <Button title="Click here to copy to Clipboard" onPress={copyToClipboard} />
      <Button title="View copied text" onPress={fetchCopiedText} />
      <Text style={styles.copiedText}>{copiedText}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});
Show More
API
import * as Clipboard from 'expo-clipboard';
On Web, this module uses the AsyncClipboard API, which might behave differently between browsers or not be fully supported. Especially on WebKit, there's an issue which makes this API unusable in asynchronous code. Click here for more details.
Component
ClipboardPasteButton
Type: React.Element<ClipboardPasteButtonProps>
This component displays the UIPasteControl button on your screen. This allows pasting from the clipboard without requesting permission from the user.
You should only attempt to render this if Clipboard.isPasteButtonAvailable is true. This component will render nothing if it is not available, and you will get a warning in development mode (__DEV__ === true).
The properties of this component extend from View; however, you should not attempt to set backgroundColor, color or borderRadius with the style property. Apple restricts customisation of this view. Instead, you should use the backgroundColor and foregroundColor properties to set the colors of the button, the cornerStyle property to change the border radius, and the displayMode property to change the appearance of the icon and label. The word "Paste" is not editable and neither is the icon.
Make sure to attach height and width via the style props as without these styles, the button will not appear on the screen.
See: Apple Documentation for more details.
ClipboardPasteButtonProps
acceptedContentTypes
Optional • Type: AcceptedContentType[] • Default: ['plain-text', 'image']
An array of the content types that will cause the button to become active.
Do not include plain-text and html at the same time as this will cause all text to be treated as html.
backgroundColor
Optional • Literal type: union
The backgroundColor of the button. Leaving this as the default allows the color to adjust to the system theme settings.
Acceptable values are: string | null
cornerStyle
Optional • Literal type: union • Default: 'capsule'
The cornerStyle of the button.
See: Apple Documentation for more details.
Acceptable values are: CornerStyleType | null
displayMode
Optional • Literal type: union • Default: 'iconAndLabel'
The displayMode of the button.
See: Apple Documentation for more details.
Acceptable values are: DisplayModeType | null
foregroundColor
Optional • Literal type: union • Default: 'white'
The foregroundColor of the button.
Acceptable values are: string | null
imageOptions
Optional • Literal type: union
The options to use when pasting an image from the clipboard.
Acceptable values are: GetImageOptions | null
onPress
Type: (data: PasteEventPayload) => void
A callback that is called with the result of the paste action. Inspect the type property to determine the type of the pasted data.
Can be one of text or image.
Example
  onPress={(data) => {
    if (data.type === 'image') {
      setImageData(data);
   } else {
      setTextData(data);
    }
  }}
style
Optional • Type: StyleProp<Omit<ViewStyle, 'backgroundColor' | 'borderRadius' | 'color'>>
The custom style to apply to the button. Should not include backgroundColor, borderRadius or color properties.
Inherited Props
•	ViewProps
Constants
isPasteButtonAvailable
Type: boolean
Property that determines if the ClipboardPasteButton is available.
This requires the users device to be using at least iOS 16.
true if the component is available, and false otherwise.
Methods
getImageAsync(options)
Parameter	Type	Description
options	GetImageOptions
A GetImageOptions object to specify the desired format of the image.

Gets the image from the user's clipboard and returns it in the specified format. Please note that calling this method on web will prompt the user to grant your app permission to "see text and images copied to the clipboard."
Returns:
Promise<ClipboardImage | null>
If there was an image in the clipboard, the promise resolves to a ClipboardImage object containing the base64 string and metadata of the image. Otherwise, it resolves to null.
Example
const img = await Clipboard.getImageAsync({ format: 'png' });
// ...
<Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />
getStringAsync(options)
Parameter	Type	Description
options(optional)	GetStringOptions
Options for the clipboard content to be retrieved.
Default:{}

Gets the content of the user's clipboard. Please note that calling this method on web will prompt the user to grant your app permission to "see text and images copied to the clipboard."
Returns:
Promise<string>
A promise that resolves to the content of the clipboard.
getUrlAsync()
Only for: 
iOS


Gets the URL from the user's clipboard.
Returns:
Promise<string | null>
A promise that fulfills to the URL in the clipboard.
hasImageAsync()
Returns whether the clipboard has an image content.
On web, this requires the user to grant your app permission to "see text and images copied to the clipboard".
Returns:
Promise<boolean>
A promise that fulfills to true if clipboard has image content, resolves to false otherwise.
hasStringAsync()
Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).
On web, this requires the user to grant your app permission to "see text and images copied to the clipboard".
Returns:
Promise<boolean>
A promise that fulfills to true if clipboard has text content, resolves to false otherwise.
hasUrlAsync()
Only for: 
iOS


Returns whether the clipboard has a URL content.
Returns:
Promise<boolean>
A promise that fulfills to true if clipboard has URL content, resolves to false otherwise.
setImageAsync(base64Image)
Parameter	Type	Description
base64Image	string	Image encoded as a base64 string, without MIME type.

Sets an image in the user's clipboard.
Returns:
Promise<void>
Example
const result = await ImagePicker.launchImageLibraryAsync({
  mediaTypes: ImagePicker.MediaTypeOptions.Images,
  base64: true,
});
await Clipboard.setImageAsync(result.base64);
Deprecated Use setStringAsync() instead.
setString(text)
Parameter	Type
text	string

Sets the content of the user's clipboard.
Returns:
void
On web, this returns a boolean value indicating whether or not the string was saved to the user's clipboard. On iOS and Android, nothing is returned.
setStringAsync(text, options)
Parameter	Type	Description
text	string	The string to save to the clipboard.
options(optional)	SetStringOptions
Options for the clipboard content to be set.
Default:{}

Sets the content of the user's clipboard.
Returns:
Promise<boolean>
On web, this returns a promise that fulfills to a boolean value indicating whether or not the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to true.
setUrlAsync(url)
Only for: 
iOS


Parameter	Type	Description
url	string	The URL to save to the clipboard.

Sets a URL in the user's clipboard.
This function behaves the same as setStringAsync(), except that it sets the clipboard content type to be a URL. It lets your app or other apps know that the clipboard contains a URL and behave accordingly.
Returns:
Promise<void>
Event Subscriptions
addClipboardListener(listener)
Parameter	Type	Description
listener	(event: ClipboardEvent) => void	Callback to execute when listener is triggered. The callback is provided a single argument that is an object containing information about clipboard contents.

Adds a listener that will fire whenever the content of the user's clipboard changes. This method is a no-op on Web.
Returns:
EventSubscription
Example
Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {
  if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {
    Clipboard.getStringAsync().then(content => {
      alert('Copy pasta! Here\'s the string that was copied: ' + content)
    });
  } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {
    alert('Yay! Clipboard contains an image');
  }
});
removeClipboardListener(subscription)
Parameter	Type	Description
subscription	EventSubscription	The subscription to remove (created by addClipboardListener).

Removes the listener added by addClipboardListener. This method is a no-op on Web.
Returns:
void
Example
const subscription = addClipboardListener(() => {
  alert('Copy pasta!');
});
removeClipboardListener(subscription);
Interfaces
Subscription
A subscription object that allows to conveniently remove an event listener from the emitter.
Subscription Methods
remove()
Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.
Returns:
void
Types
AcceptedContentType
Literal Type: string
Acceptable values are: 'plain-text' | 'image' | 'url' | 'html'
ClipboardEvent
Property	Type	Description
content	string	Deprecated Returns empty string. Use getStringAsync() instead to retrieve clipboard content.

contentTypes	ContentType[]
An array of content types that are available on the clipboard.
ClipboardImage
Property	Type	Description
data	string	A Base64-encoded string of the image data. Its format is dependent on the format option. You can use it directly as the source of an Image element.
NOTE: The string is already prepended with data:image/png;base64, or data:image/jpeg;base64, prefix.
Example
<Image
  source={{ uri: clipboardImage.data }}
  style={{ width: 200, height: 200 }}
/>
size	{
  height: number, 
  width: number
}	Dimensions (width and height) of the image pasted from clipboard.
CornerStyleType
Literal Type: string
Acceptable values are: 'dynamic' | 'fixed' | 'capsule' | 'large' | 'medium' | 'small'
DisplayModeType
Literal Type: string
Acceptable values are: 'iconAndLabel' | 'iconOnly' | 'labelOnly'
GetImageOptions
Property	Type	Description
format	'png' | 'jpeg'	The format of the clipboard image to be converted to.
jpegQuality(optional)	number	Specify the quality of the returned image, between 0 and 1. Defaults to 1 (highest quality). Applicable only when format is set to jpeg, ignored otherwise.
Default:1
GetStringOptions
Property	Type	Description
preferredFormat(optional)	StringFormat
The target format of the clipboard string to be converted to, if possible.
Default:StringFormat.PLAIN_TEXT
ImagePasteEvent
Type: ClipboardImage extended by:
Property	Type	Description
type	'image'	-
PasteEventPayload
Literal Type: union
Acceptable values are: TextPasteEvent | ImagePasteEvent
SetStringOptions
Property	Type	Description
inputFormat(optional)	StringFormat
The input format of the provided string. Adjusting this option can help other applications interpret copied string properly.
Default:StringFormat.PLAIN_TEXT
TextPasteEvent
Property	Type	Description
text	string	-
type	'text'	-
Enums
ContentType
Type used to define what type of data is stored in the clipboard.
HTML
ContentType.HTML ＝ "html"
IMAGE
ContentType.IMAGE ＝ "image"
PLAIN_TEXT
ContentType.PLAIN_TEXT ＝ "plain-text"
URL
Only for: 
iOS


ContentType.URL ＝ "url"
StringFormat
Type used to determine string format stored in the clipboard.
HTML
StringFormat.HTML ＝ "html"
PLAIN_TEXT
StringFormat.PLAIN_TEXT ＝ "plainText"

#24

Expo Constants

GitHub

npm

An API that provides system information that remains constant throughout the lifetime of your app's installation.
Android
iOS
tvOS
Web
Bundled version:
~17.1.6
________________________________________
expo-constants provides system information that remains constant throughout the lifetime of your app's installation.
Installation
Terminal
Copy
- npx expo install expo-constants
If you are installing this in an existing React Native app, make sure to install expo in your project.
API
import Constants from 'expo-constants';
Types
AndroidManifest
Only for: 
Android


Type: Record<string, any> extended by:
Property	Type	Description
versionCode	number	Deprecated Use expo-application's Application.nativeBuildVersion.
The version code set by android.versionCode in app.json. The value is set to null in case you run your app in Expo Go.
ClientScopingConfig
Type: ClientScopingConfigForReExport
EASConfig
Type: ManifestsEASConfig
ExpoGoConfig
Type: ManifestsExpoGoConfig
ExpoGoPackagerOpts
Type: ExpoGoPackagerOptsForReExport
IOSManifest
Only for: 
iOS


Type: Record<string, any> extended by:
Property	Type	Description
buildNumber	string | null	The build number specified in the embedded Info.plist value for CFBundleVersion in this app. In a standalone app, you can set this with the ios.buildNumber value in app.json. This may differ from the value in Constants.expoConfig.ios.buildNumber because the manifest can be updated, whereas this value will never change for a given native binary. The value is set to null in case you run your app in Expo Go.
model	string | null	Deprecated Moved to expo-device as Device.modelName.
The human-readable model name of this device. For example, "iPhone 7 Plus" if it can be determined, otherwise will be null.
platform	string	Deprecated Use expo-device's Device.modelId.
The Apple internal model identifier for this device.
Example
iPhone1,1
systemVersion	string	Deprecated Use expo-device's Device.osVersion.
The version of iOS running on this device.
Example
10.3
userInterfaceIdiom	UserInterfaceIdiom
Deprecated Use expo-device's Device.getDeviceTypeAsync().
The user interface idiom of the current device, such as whether the app is running on an iPhone, iPad, Mac or Apple TV.
Manifest
Type: ExpoUpdatesManifest
ManifestAsset
Type: ManifestAssetForReExport
ManifestExtra
Type: ManifestExtraForReExport
NativeConstants
Type: Record<string, any> extended by:
Property	Type	Description
appOwnership	AppOwnership | null
Deprecated Use Constants.executionEnvironment instead.
Returns expo when running in Expo Go, otherwise null.
debugMode	boolean	Returns true when the app is running in debug mode (__DEV__). Otherwise, returns false.
deviceName(optional)	string	A human-readable name for the device type.
deviceYearClass	number | null	Deprecated Moved to expo-device as Device.deviceYearClass.
The device year class of this device.

easConfig	ManifestsEASConfig | null
The standard EAS config object populated when using EAS.
executionEnvironment	ExecutionEnvironment
Returns the current execution environment.
experienceUrl	string	-
expoConfig	ExpoConfig & { hostUri: string } | null
The standard Expo config object defined in app.json and app.config.js files. For both classic and modern manifests, whether they are embedded or remote.
expoGoConfig	ManifestsExpoGoConfig | null
The standard Expo Go config object populated when running in Expo Go.
expoRuntimeVersion	string | null	Nullable only on the web.
expoVersion	string | null	The version string of the Expo Go app currently running. Returns null in bare workflow and web.
getWebViewUserAgentAsync	() => Promise<string | null>
Gets the user agent string which would be included in requests sent by a web view running on this device. This is probably not the same user agent you might be providing in your JS fetch requests.
intentUri(optional)	string	-
isDetached(optional)	boolean	-
isHeadless	boolean	Returns true if the app is running in headless mode. Otherwise, returns false.
linkingUri	string	-
manifest2	ExpoUpdatesManifest | null
Manifest for Expo apps using modern Expo Updates from a remote source, such as apps that use EAS Update. Constants.expoConfig should be used for accessing the Expo config object.
platform(optional)	PlatformManifest
Returns the specific platform manifest object.
Note: This is distinct from the manifest and manifest2.
sessionId	string	A string that is unique to the current session of your app. It is different across apps and across multiple launches of the same app.
statusBarHeight	number	The default status bar height for the device. Does not factor in changes when location tracking is in use or a phone call is active.
systemFonts	string[]	A list of the system font names available on the current device.
systemVersion(optional)	number	-
PlatformManifest
Type: Record<string, any> extended by:
Property	Type	Description
android(optional)	AndroidManifest
-
detach(optional)	{
  scheme: string
}	-
developer(optional)	string	-
hostUri(optional)	string	-
ios(optional)	IOSManifest
-
scheme(optional)	string	-
web(optional)	WebManifest
-
WebManifest
Only for: 
Web


Type: Record<string, any>
Enums
AppOwnership
Deprecated Use Constants.executionEnvironment instead.
Expo
AppOwnership.Expo ＝ "expo"
The experience is running inside the Expo Go app.
ExecutionEnvironment
Bare
ExecutionEnvironment.Bare ＝ "bare"
Standalone
ExecutionEnvironment.Standalone ＝ "standalone"
StoreClient
ExecutionEnvironment.StoreClient ＝ "storeClient"
UserInterfaceIdiom
Current supported values are handset, tablet, desktop and tv. CarPlay will show up as unsupported.
Desktop
UserInterfaceIdiom.Desktop ＝ "desktop"
Handset
UserInterfaceIdiom.Handset ＝ "handset"
Tablet
UserInterfaceIdiom.Tablet ＝ "tablet"
TV
UserInterfaceIdiom.TV ＝ "tv"
Unsupported
UserInterfaceIdiom.Unsupported ＝ "unsupported"

#25

Expo Contacts

GitHub

npm

A library that provides access to the phone's system contacts.
Android
iOS
Bundled version:
~14.2.5
________________________________________
expo-contacts provides access to the device's system contacts, allowing you to get contact information as well as adding, editing, or removing contacts.
On iOS, contacts have a multi-layered grouping system that you can also access through this API.
Installation
Terminal
Copy
- npx expo install expo-contacts
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration in app config
You can configure expo-contacts using its built-in config plugin if you use config plugins in your project (EAS Build or npx expo run:[android|ios]). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.
Example app.json with config plugin
app.json
Copy
{
  "expo": {
    "plugins": [
      [
        "expo-contacts",
        {
          "contactsPermission": "Allow $(PRODUCT_NAME) to access your contacts."
        }
      ]
    ]
  }
}
Configurable properties
Name	Default	Description
contactsPermission	"Allow $(PRODUCT_NAME) to access your contacts"	Only for: 
iOS


A string to set the NSContactsUsageDescription permission message.

Are you using this library in an existing React Native app?
•	
•	
Usage
Basic Contacts Usage
Copy
Open in Snack
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Contacts from 'expo-contacts';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Contacts.requestPermissionsAsync();
      if (status === 'granted') {
        const { data } = await Contacts.getContactsAsync({
          fields: [Contacts.Fields.Emails],
        });

        if (data.length > 0) {
          const contact = data[0];
          console.log(contact);
        }
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Contacts Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
Show More
API
import * as Contacts from 'expo-contacts';
Component
ContactAccessButton
Only for: 
iOS 18.0+


Type: React.PureComponent<ContactAccessButtonProps>
Creates a contact access button to quickly add contacts under limited-access authorization.
For more details, you can read the Apple docs about the underlying ContactAccessButton SwiftUI view.
ContactAccessButtonProps
backgroundColor
Only for: 
iOS 18.0+


Optional • Type: ColorValue
A color of the button's background. Provided color should not be transparent, otherwise it may not satisfy platform requirements for button legibility.
caption
Only for: 
iOS 18.0+


Optional • Literal type: string
When the query produces a single result, the contact access button shows the caption under the matching contact name. It can be nothing (default), email address or phone number.
Acceptable values are: 'default' | 'email' | 'phone'
ignoredEmails
Only for: 
iOS 18.0+


Optional • Type: string[]
An array of email addresses. The search omits contacts matching query that also match any email address in this array.
ignoredPhoneNumbers
Only for: 
iOS 18.0+


Optional • Type: string[]
An array of phone numbers. The search omits contacts matching query that also match any phone number in this set.
query
Only for: 
iOS 18.0+


Optional • Type: string
A string to match against contacts not yet exposed to the app. You typically get this value from a search UI that your app presents, like a text field.
textColor
Only for: 
iOS 18.0+


Optional • Type: ColorValue
A color of the button's title. Slightly dimmed version of this color is used for the caption text. Make sure there is a good contrast between the text and the background, otherwise platform requirements for button legibility may not be satisfied.
tintColor
Only for: 
iOS 18.0+


Optional • Type: ColorValue
A tint color of the button and the modal that is presented when there is more than one match.
Inherited Props
•	ViewProps
Static Methods
isAvailable()
Returns a boolean whether the ContactAccessButton is available on the platform. This is true only on iOS 18.0 and newer.
Returns:
boolean
Methods
Contacts.addContactAsync(contact, containerId)
Parameter	Type	Description
contact	Contact
A contact with the changes you wish to persist. The id parameter will not be used.
containerId(optional)	string	Only for: 
iOS
The container that will parent the contact.

Creates a new contact and adds it to the system.
Note: For Android users, the Expo Go app does not have the required WRITE_CONTACTS permission to write to Contacts. You will need to create a development build and add permission in there manually to use this method.
Returns:
Promise<string>
A promise that fulfills with ID of the new system contact.
Example
const contact = {
  [Contacts.Fields.FirstName]: 'Bird',
  [Contacts.Fields.LastName]: 'Man',
  [Contacts.Fields.Company]: 'Young Money',
};
const contactId = await Contacts.addContactAsync(contact);
Contacts.addExistingContactToGroupAsync(contactId, groupId)
Only for: 
iOS


Parameter	Type	Description
contactId	string	ID of the contact you want to edit.
groupId	string	ID for the group you want to add membership to.

Add a contact as a member to a group. A contact can be a member of multiple groups.
Returns:
Promise<any>
Example
await Contacts.addExistingContactToGroupAsync(
  '665FDBCFAE55-D614-4A15-8DC6-161A368D',
  '161A368D-D614-4A15-8DC6-665FDBCFAE55'
);
Contacts.addExistingGroupToContainerAsync(groupId, containerId)
Only for: 
iOS


Parameter	Type	Description
groupId	string	The group you want to target.
containerId	string	The container you want to add membership to.

Add a group to a container.
Returns:
Promise<any>
Example
await Contacts.addExistingGroupToContainerAsync(
  '161A368D-D614-4A15-8DC6-665FDBCFAE55',
  '665FDBCFAE55-D614-4A15-8DC6-161A368D'
);
Contacts.createGroupAsync(name, containerId)
Only for: 
iOS


Parameter	Type	Description
name(optional)	string	Name of the new group.
containerId(optional)	string	The container you to add membership to.

Create a group with a name, and add it to a container. If the container is undefined, the default container will be targeted.
Returns:
Promise<string>
A promise that fulfills with ID of the new group.
Example
const groupId = await Contacts.createGroupAsync('Sailor Moon');
Contacts.getContactByIdAsync(id, fields)
Parameter	Type	Description
id	string	The ID of a system contact.
fields(optional)	FieldType[]
If specified, the fields defined will be returned. When skipped, all fields will be returned.

Used for gathering precise data about a contact. Returns a contact matching the given id.
Returns:
Promise<Contact | undefined>
A promise that fulfills with Contact object with ID matching the input ID, or undefined if there is no match.
Example
const contact = await Contacts.getContactByIdAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
if (contact) {
  console.log(contact);
}
Contacts.getContactsAsync(contactQuery)
Parameter	Type	Description
contactQuery(optional)	ContactQuery
Object used to query contacts.
Default:{}

Return a list of contacts that fit a given criteria. You can get all of the contacts by passing no criteria.
Returns:
Promise<ContactResponse>
A promise that fulfills with ContactResponse object returned from the query.
Example
const { data } = await Contacts.getContactsAsync({
  fields: [Contacts.Fields.Emails],
});

if (data.length > 0) {
  const contact = data[0];
  console.log(contact);
}
Contacts.getContainersAsync(containerQuery)
Only for: 
iOS


Parameter	Type	Description
containerQuery	ContainerQuery
Information used to gather containers.

Query a list of system containers.
Returns:
Promise<Container[]>
A promise that fulfills with array of containers that fit the query.
Example
const allContainers = await Contacts.getContainersAsync({
  contactId: '665FDBCFAE55-D614-4A15-8DC6-161A368D',
});
Contacts.getDefaultContainerIdAsync()
Only for: 
iOS


Get the default container's ID.
Returns:
Promise<string>
A promise that fulfills with default container ID.
Example
const containerId = await Contacts.getDefaultContainerIdAsync();
Contacts.getGroupsAsync(groupQuery)
Only for: 
iOS


Parameter	Type	Description
groupQuery	GroupQuery
Information regarding which groups you want to get.

Query and return a list of system groups.
Returns:
Promise<Group[]>
A promise that fulfills with array of groups that fit the query.
Example
const groups = await Contacts.getGroupsAsync({ groupName: 'sailor moon' });
const allGroups = await Contacts.getGroupsAsync({});
Contacts.getPagedContactsAsync(contactQuery)
Parameter	Type
contactQuery(optional)	ContactQuery


Returns:
Promise<ContactResponse>
Contacts.getPermissionsAsync()
Checks user's permissions for accessing contacts data.
Returns:
Promise<ContactsPermissionResponse>
A promise that resolves to a ContactsPermissionResponse object.
Contacts.isAvailableAsync()
Returns whether the Contacts API is enabled on the current device. This method does not check the app permissions.
Returns:
Promise<boolean>
A promise that fulfills with a boolean, indicating whether the Contacts API is available on the current device. It always resolves to false on web.
Contacts.presentAccessPickerAsync()
Only for: 
iOS 18.0+


Presents a modal which allows the user to select which contacts the app has access to. Using this function is reasonable only when the app has "limited" permissions.
Returns:
Promise<string[]>
A promise that resolves with an array of contact identifiers that were newly granted to the app. Contacts which the app lost access to are not listed. On platforms other than iOS and below 18.0, the promise rejects immediately.
Contacts.presentContactPickerAsync()
Presents a native contact picker to select a single contact from the system. On Android, the READ_CONTACTS permission is required. You can obtain this permission by calling the Contacts.requestPermissionsAsync() method. On iOS, no permissions are required to use this method.
Returns:
Promise<Contact | null>
A promise that fulfills with a single Contact object if a contact is selected or null if no contact is selected (when selection is canceled).
Contacts.presentFormAsync(contactId, contact, formOptions)
Parameter	Type	Description
contactId(optional)	null | string	The ID of a system contact.
contact(optional)	null | Contact
A contact with the changes you want to persist.
formOptions(optional)	FormOptions
Options for the native editor.
Default:{}

Present a native form for manipulating contacts.
Returns:
Promise<any>
Example
await Contacts.presentFormAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
Contacts.removeContactAsync(contactId)
Only for: 
iOS


Parameter	Type	Description
contactId	string	ID of the contact you want to delete.

Delete a contact from the system.
Returns:
Promise<any>
Example
await Contacts.removeContactAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
Contacts.removeContactFromGroupAsync(contactId, groupId)
Only for: 
iOS


Parameter	Type	Description
contactId	string	ID of the contact you want to remove.
groupId	string	ID for the group you want to remove membership of.

Remove a contact's membership from a given group. This will not delete the contact.
Returns:
Promise<any>
Example
await Contacts.removeContactFromGroupAsync(
  '665FDBCFAE55-D614-4A15-8DC6-161A368D',
  '161A368D-D614-4A15-8DC6-665FDBCFAE55'
);
Contacts.removeGroupAsync(groupId)
Only for: 
iOS


Parameter	Type	Description
groupId	string	ID of the group you want to remove.

Delete a group from the device.
Returns:
Promise<any>
Example
await Contacts.removeGroupAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
Contacts.requestPermissionsAsync()
Asks the user to grant permissions for accessing contacts data.
Returns:
Promise<ContactsPermissionResponse>
A promise that resolves to a ContactsPermissionResponse object.
Contacts.shareContactAsync(contactId, message, shareOptions)
Parameter	Type
contactId	string
message	string
shareOptions(optional)	ShareOptions


Returns:
Promise<any>
Contacts.updateContactAsync(contact)
Parameter	Type	Description
contact	{
  id: string
} & Partial<Omit<Contact, 'id'>>
A contact object including the wanted changes. Contact id is required.

Mutate the information of an existing contact. Due to an iOS bug, nonGregorianBirthday field cannot be modified.
Returns:
Promise<string>
A promise that fulfills with ID of the updated system contact if mutation was successful.
Example
const contact = {
  id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',
  [Contacts.Fields.FirstName]: 'Drake',
  [Contacts.Fields.Company]: 'Young Money',
};
await Contacts.updateContactAsync(contact);
Contacts.updateGroupNameAsync(groupName, groupId)
Only for: 
iOS


Parameter	Type	Description
groupName	string	New name for an existing group.
groupId	string	ID of the group you want to edit.

Change the name of an existing group.
Returns:
Promise<any>
Example
await Contacts.updateGroupName('Expo Friends', '161A368D-D614-4A15-8DC6-665FDBCFAE55');
Contacts.writeContactToFileAsync(contactQuery)
Parameter	Type	Description
contactQuery(optional)	ContactQuery
Used to query contact you want to write.
Default:{}

Query a set of contacts and write them to a local URI that can be used for sharing.
Returns:
Promise<string | undefined>
A promise that fulfills with shareable local URI, or undefined if there was no match.
Example
const localUri = await Contacts.writeContactToFileAsync({
  id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',
});
Share.share({ url: localUri, message: 'Call me!' });
Types
Address
Property	Type	Description
city(optional)	string	City name.
country(optional)	string	Country name
id(optional)	string	Unique ID. This value will be generated by the OS.
isoCountryCode(optional)	string	Standard country code.

label	string	Localized display name.
neighborhood(optional)	string	Neighborhood name.
poBox(optional)	string	P.O. Box.
postalCode(optional)	string	Local post code.
region(optional)	string	Region or state name.
street(optional)	string	Street name.
CalendarFormatType
Literal Type: union
Acceptable values are: CalendarFormats | {CalendarFormats}
Contact
A set of fields that define information about a single contact entity.
Property	Type	Description
addresses(optional)	Address[]
Locations.
birthday(optional)	Date
Birthday information in Gregorian format.
company(optional)	string	Organization the entity belongs to.
contactType	ContactType
Denoting a person or company.
dates(optional)	Date[]
A labeled list of other relevant user dates in Gregorian format.
department(optional)	string	Job department.
emails(optional)	Email[]
Email addresses.
firstName(optional)	string	Given name.
id(optional)	string	Immutable identifier used for querying and indexing. This value will be generated by the OS when the contact is created.
image(optional)	Image
Thumbnail image. On iOS it size is set to 320×320px, on Android it may vary.
imageAvailable(optional)	boolean	Used for efficient retrieval of images.
instantMessageAddresses(optional)	InstantMessageAddress[]
Instant messaging connections.
isFavorite(optional)	boolean	Only for: 
Android


Whether the contact is starred.
jobTitle(optional)	string	Job description.
lastName(optional)	string	Last name.
maidenName(optional)	string	Maiden name.
middleName(optional)	string	Middle name
name	string	Full name with proper format.
namePrefix(optional)	string	Dr., Mr., Mrs., and so on.
nameSuffix(optional)	string	Jr., Sr., and so on.
nickname(optional)	string	An alias to the proper name.
nonGregorianBirthday(optional)	Date
Only for: 
iOS


Birthday that doesn't conform to the Gregorian calendar format, interpreted based on the calendar format setting.

note(optional)	string	Additional information.
The note field requires your app to request additional entitlements. The Expo Go app does not contain those entitlements, so in order to test this feature you will need to request the entitlement from Apple, set the ios.accessesContactNotes field in app config to true, and create your development build.

phoneNumbers(optional)	PhoneNumber[]
Phone numbers.
phoneticFirstName(optional)	string	Pronunciation of the first name.
phoneticLastName(optional)	string	Pronunciation of the last name.
phoneticMiddleName(optional)	string	Pronunciation of the middle name.
rawImage(optional)	Image
Raw image without cropping, usually large.
relationships(optional)	Relationship[]
Names of other relevant user connections.
socialProfiles(optional)	SocialProfile[]
Only for: 
iOS


Social networks.
urlAddresses(optional)	UrlAddress[]
Associated web URLs.
ContactQuery
Used to query contacts from the user's device.
Property	Type	Description
containerId(optional)	string	Only for: 
iOS


Get all contacts that belong to the container matching this ID.
fields(optional)	FieldType[]
If specified, the defined fields will be returned. If skipped, all fields will be returned.
groupId(optional)	string	Only for: 
iOS


Get all contacts that belong to the group matching this ID.
id(optional)	string | string[]	Get contacts with a matching ID or array of IDs.
name(optional)	string	Get all contacts whose name contains the provided string (not case-sensitive).
pageOffset(optional)	number	The number of contacts to skip before gathering contacts.
pageSize(optional)	number	The max number of contacts to return. If skipped or set to 0 all contacts will be returned.
rawContacts(optional)	boolean	Only for: 
iOS


Prevent unification of contacts when gathering.
Default:false
sort(optional)	ContactSort
Sort method used when gathering contacts.
ContactResponse
The return value for queried contact operations like getContactsAsync.
Property	Type	Description
data	Contact[]
An array of contacts that match a particular query.
hasNextPage	boolean	This will be true if there are more contacts to retrieve beyond what is returned.
hasPreviousPage	boolean	This will be true if there are previous contacts that weren't retrieved due to pageOffset limit.
ContactSort
String union of SortTypes values.
ContactsPermissionResponse
Type: PermissionResponse extended by:
Property	Type	Description
accessPrivileges(optional)	'all' | 'limited' | 'none'	Indicates if your app has access to the whole or only part of the contact library. Possible values are:
•	'all' if the user granted your app access to the whole contact library
•	'limited' if the user granted your app access only to selected contacts (only available on iOS 18+)
•	'none'
ContactType
Literal Type: union
Acceptable values are: ContactTypes | {ContactTypes}
Container
Property	Type	Description
id	string	-
name	string	-
type	ContainerType
-
ContainerQuery
Only for: 
iOS


Used to query native contact containers.
Property	Type	Description
contactId(optional)	string	Query all the containers that parent a contact.
containerId(optional)	string | string[]	Query all the containers that matches ID or an array od IDs.
groupId(optional)	string	Query all the containers that parent a group.
ContainerType
Literal Type: union
Acceptable values are: ContainerTypes | {ContainerTypes}
Date
Property	Type	Description
day	number	Day.
format(optional)	CalendarFormatType
Format for the date. This is provided by the OS, do not set this manually.
id(optional)	string	Unique ID. This value will be generated by the OS.
label(optional)	string	Localized display name.
month	number	Month - adjusted for JavaScript Date which starts at 0.
year(optional)	number	Year.
Email
Property	Type	Description
email(optional)	string	Email address.
id(optional)	string	Unique ID. This value will be generated by the OS.
isPrimary(optional)	boolean	Flag signifying if it is a primary email address.
label	string	Localized display name.
FieldType
Literal Type: union
Acceptable values are: Fields | {Fields}
FormOptions
Denotes the functionality of a native contact form.
Property	Type	Description
allowsActions(optional)	boolean	Actions like share, add, create.
allowsEditing(optional)	boolean	Allows for contact mutation.
alternateName(optional)	string	Used if contact doesn't have a name defined.
cancelButtonTitle(optional)	string	The name of the left bar button.
displayedPropertyKeys(optional)	FieldType[]
The properties that will be displayed. On iOS those properties does nothing while in editing mode.
groupId(optional)	string	The parent group for a new contact.
isNew(optional)	boolean	Present the new contact controller. If set to false the unknown controller will be shown.
message(optional)	string	Controller title.
preventAnimation(optional)	boolean	Prevents the controller from animating in.
shouldShowLinkedContacts(optional)	boolean	Show or hide the similar contacts.
Group
Only for: 
iOS


A parent to contacts. A contact can belong to multiple groups. Here are some query operations you can perform:
•	Child Contacts: getContactsAsync({ groupId })
•	Groups From Container: getGroupsAsync({ containerId })
•	Groups Named: getContainersAsync({ groupName })
Property	Type	Description
id(optional)	string	The editable name of a group.
name(optional)	string	Immutable id representing the group.
GroupQuery
Only for: 
iOS


Used to query native contact groups.
Property	Type	Description
containerId(optional)	string	Query all groups that belong to a certain container.
groupId(optional)	string	Query the group with a matching ID.
groupName(optional)	string	Query all groups matching a name.
Image
Information regarding thumbnail images.
On Android you can get dimensions using Image.getSize method.
Property	Type	Description
base64(optional)	string	Image as Base64 string.
height(optional)	number	Only for: 
iOS


Image height
uri(optional)	string	A local image URI.
Note: If you have a remote URI, download it first using FileSystem.downloadAsync.

width(optional)	number	Only for: 
iOS


Image width.
InstantMessageAddress
Property	Type	Description
id(optional)	string	Unique ID. This value will be generated by the OS.
label	string	Localized display name.
localizedService(optional)	string	Localized name of app.
service(optional)	string	Name of instant messaging app.
username(optional)	string	Username in IM app.
PermissionExpiration
Literal Type: union
Permission expiration time. Currently, all permissions are granted permanently.
Acceptable values are: 'never' | number
PermissionResponse
An object obtained by permissions get and request functions.
Property	Type	Description
canAskAgain	boolean	Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.
expires	PermissionExpiration
Determines time when the permission expires.
granted	boolean	A convenience boolean that indicates if the permission is granted.
status	PermissionStatus
Determines the status of the permission.
PhoneNumber
Property	Type	Description
countryCode(optional)	string	Country code.
Example
us
digits(optional)	string	Phone number without format.
Example
8674305
id(optional)	string	Unique ID. This value will be generated by the OS.
isPrimary(optional)	boolean	Flag signifying if it is a primary phone number.
label	string	Localized display name.
number(optional)	string	Phone number.
Relationship
Property	Type	Description
id(optional)	string	Unique ID. This value will be generated by the OS.
label	string	Localized display name.
name(optional)	string	Name of related contact.
SocialProfile
Only for: 
iOS


Property	Type	Description
id(optional)	string	Unique ID. This value will be generated by the OS.
label	string	Localized display name.
localizedProfile(optional)	string	Localized profile name.
service(optional)	string	Name of social app.
url(optional)	string	Web URL.
userId(optional)	string	Username ID in social app.
username(optional)	string	Username in social app.
UrlAddress
Property	Type	Description
id(optional)	string	Unique ID. This value will be generated by the OS.
label	string	Localized display name.
url(optional)	string	Web URL.
Enums
CalendarFormats
This format denotes the common calendar format used to specify how a date is calculated in nonGregorianBirthday fields.
Buddhist
Only for: 
iOS


CalendarFormats.Buddhist ＝ "buddhist"
Chinese
Only for: 
iOS


CalendarFormats.Chinese ＝ "chinese"
Coptic
Only for: 
iOS


CalendarFormats.Coptic ＝ "coptic"
EthiopicAmeteAlem
Only for: 
iOS


CalendarFormats.EthiopicAmeteAlem ＝ "ethiopicAmeteAlem"
EthiopicAmeteMihret
Only for: 
iOS


CalendarFormats.EthiopicAmeteMihret ＝ "ethiopicAmeteMihret"
Gregorian
CalendarFormats.Gregorian ＝ "gregorian"
Hebrew
Only for: 
iOS


CalendarFormats.Hebrew ＝ "hebrew"
Indian
Only for: 
iOS


CalendarFormats.Indian ＝ "indian"
Islamic
Only for: 
iOS


CalendarFormats.Islamic ＝ "islamic"
IslamicCivil
Only for: 
iOS


CalendarFormats.IslamicCivil ＝ "islamicCivil"
IslamicTabular
Only for: 
iOS


CalendarFormats.IslamicTabular ＝ "islamicTabular"
IslamicUmmAlQura
Only for: 
iOS


CalendarFormats.IslamicUmmAlQura ＝ "islamicUmmAlQura"
ISO8601
Only for: 
iOS


CalendarFormats.ISO8601 ＝ "iso8601"
Japanese
Only for: 
iOS


CalendarFormats.Japanese ＝ "japanese"
Persian
Only for: 
iOS


CalendarFormats.Persian ＝ "persian"
RepublicOfChina
Only for: 
iOS


CalendarFormats.RepublicOfChina ＝ "republicOfChina"
ContactTypes
Company
ContactTypes.Company ＝ "company"
Contact is group or company.
Person
ContactTypes.Person ＝ "person"
Contact is a human.
ContainerTypes
Only for: 
iOS


CardDAV
ContainerTypes.CardDAV ＝ "cardDAV"
With cardDAV protocol used for sharing.
Exchange
ContainerTypes.Exchange ＝ "exchange"
In association with email server.
Local
ContainerTypes.Local ＝ "local"
A local non-iCloud container.
Unassigned
ContainerTypes.Unassigned ＝ "unassigned"
Unknown container.
Fields
Possible fields to retrieve for a contact.
Addresses
Fields.Addresses ＝ "addresses"
Birthday
Fields.Birthday ＝ "birthday"
Company
Fields.Company ＝ "company"
ContactType
Fields.ContactType ＝ "contactType"
Dates
Fields.Dates ＝ "dates"
Department
Fields.Department ＝ "department"
Emails
Fields.Emails ＝ "emails"
ExtraNames
Fields.ExtraNames ＝ "extraNames"
FirstName
Fields.FirstName ＝ "firstName"
ID
Fields.ID ＝ "id"
Image
Fields.Image ＝ "image"
ImageAvailable
Fields.ImageAvailable ＝ "imageAvailable"
InstantMessageAddresses
Fields.InstantMessageAddresses ＝ "instantMessageAddresses"
IsFavorite
Only for: 
Android


Fields.IsFavorite ＝ "isFavorite"
JobTitle
Fields.JobTitle ＝ "jobTitle"
LastName
Fields.LastName ＝ "lastName"
MaidenName
Fields.MaidenName ＝ "maidenName"
MiddleName
Fields.MiddleName ＝ "middleName"
Name
Fields.Name ＝ "name"
NamePrefix
Fields.NamePrefix ＝ "namePrefix"
NameSuffix
Fields.NameSuffix ＝ "nameSuffix"
Nickname
Fields.Nickname ＝ "nickname"
NonGregorianBirthday
Only for: 
iOS


Fields.NonGregorianBirthday ＝ "nonGregorianBirthday"
Note
Fields.Note ＝ "note"
PhoneNumbers
Fields.PhoneNumbers ＝ "phoneNumbers"
PhoneticFirstName
Fields.PhoneticFirstName ＝ "phoneticFirstName"
PhoneticLastName
Fields.PhoneticLastName ＝ "phoneticLastName"
PhoneticMiddleName
Fields.PhoneticMiddleName ＝ "phoneticMiddleName"
RawImage
Fields.RawImage ＝ "rawImage"
Relationships
Fields.Relationships ＝ "relationships"
SocialProfiles
Only for: 
iOS


Fields.SocialProfiles ＝ "socialProfiles"
UrlAddresses
Fields.UrlAddresses ＝ "urlAddresses"
PermissionStatus
DENIED
PermissionStatus.DENIED ＝ "denied"
User has denied the permission.
GRANTED
PermissionStatus.GRANTED ＝ "granted"
User has granted the permission.
UNDETERMINED
PermissionStatus.UNDETERMINED ＝ "undetermined"
User hasn't granted or denied the permission yet.
SortTypes
FirstName
SortTypes.FirstName ＝ "firstName"
Sort by first name in ascending order.
LastName
SortTypes.LastName ＝ "lastName"
Sort by last name in ascending order.
None
SortTypes.None ＝ "none"
No sorting should be applied.
UserDefault
Only for: 
Android


SortTypes.UserDefault ＝ "userDefault"
The user default method of sorting.
Permissions
Android
This library automatically adds READ_CONTACTS and WRITE_CONTACTS permissions to your app:
Android Permission	Description
READ_CONTACTS	Allows an application to read the user's contacts data.
WRITE_CONTACTS	Allows an application to write the user's contacts data.
iOS
The following usage description keys are used by this library:
Info.plist Key	Description
NSContactsUsageDescription	A message that tells the user why the app is requesting access to the user’s contacts.

#26

Expo Crypto

GitHub

npm

A universal library for crypto operations.
Android
iOS
tvOS
Web
Bundled version:
~14.1.5
________________________________________
expo-crypto enables you to hash data in an equivalent manner to the Node.js core crypto API.
Installation
Terminal
Copy
- npx expo install expo-crypto
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Basic Crypto usage
Copy
Open in Snack
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Crypto from 'expo-crypto';

export default function App() {
  useEffect(() => {
    (async () => {
      const digest = await Crypto.digestStringAsync(
        Crypto.CryptoDigestAlgorithm.SHA256,
        'GitHub stars are neat 🌟'
      );
      console.log('Digest: ', digest);
      /* Some crypto operation... */
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Crypto Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
Show More
API
import * as Crypto from 'expo-crypto';
Methods
Crypto.digest(algorithm, data)
Parameter	Type	Description
algorithm	CryptoDigestAlgorithm
The cryptographic hash function to use to transform a block of data into a fixed-size output.
data	BufferSource	The value that will be used to generate a digest.

The digest() method of Crypto generates a digest of the supplied TypedArray of bytes data with the provided digest algorithm. A digest is a short fixed-length value derived from some variable-length input. Cryptographic digests should exhibit collision-resistance, meaning that it's very difficult to generate multiple inputs that have equal digest values. On web, this method can only be called from a secure origin (HTTPS) otherwise, an error will be thrown.
Returns:
Promise<ArrayBuffer>
A Promise which fulfills with an ArrayBuffer representing the hashed input.
Example
const array = new Uint8Array([1, 2, 3, 4, 5]);
const digest = await Crypto.digest(Crypto.CryptoDigestAlgorithm.SHA512, array);
console.log('Your digest: ' + digest);
Crypto.digestStringAsync(algorithm, data, options)
Parameter	Type	Description
algorithm	CryptoDigestAlgorithm
The cryptographic hash function to use to transform a block of data into a fixed-size output.
data	string	The value that will be used to generate a digest.
options(optional)	CryptoDigestOptions
Format of the digest string. Defaults to: CryptoDigestOptions.HEX.

The digestStringAsync() method of Crypto generates a digest of the supplied data string with the provided digest algorithm. A digest is a short fixed-length value derived from some variable-length input. Cryptographic digests should exhibit collision-resistance, meaning that it's very difficult to generate multiple inputs that have equal digest values. You can specify the returned string format as one of CryptoEncoding. By default, the resolved value will be formatted as a HEX string. On web, this method can only be called from a secure origin (HTTPS) otherwise, an error will be thrown.
Returns:
Promise<Digest>
Return a Promise which fulfills with a value representing the hashed input.
Example
const digest = await Crypto.digestStringAsync(
  Crypto.CryptoDigestAlgorithm.SHA512,
  '🥓 Easy to Digest! 💙'
);
Crypto.getRandomBytes(byteCount)
Parameter	Type	Description
byteCount	number	A number within the range from 0 to 1024. Anything else will throw a TypeError.

Generates completely random bytes using native implementations. The byteCount property is a number indicating the number of bytes to generate in the form of a Uint8Array. Falls back to Math.random during development to prevent issues with React Native Debugger.
Returns:
Uint8Array
An array of random bytes with the same length as the byteCount.
Crypto.getRandomBytesAsync(byteCount)
Parameter	Type	Description
byteCount	number	A number within the range from 0 to 1024. Anything else will throw a TypeError.

Generates completely random bytes using native implementations. The byteCount property is a number indicating the number of bytes to generate in the form of a Uint8Array.
Returns:
Promise<Uint8Array>
A promise that fulfills with an array of random bytes with the same length as the byteCount.
Crypto.getRandomValues(typedArray)
Parameter	Type	Description
typedArray	T	An integer based TypedArray to fill with cryptographically secure random values. It modifies the input array in place.


The getRandomValues() method of Crypto fills a provided TypedArray with cryptographically secure random values.
Returns:
T
The input array filled with cryptographically secure random values.
Example
const byteArray = new Uint8Array(16);
Crypto.getRandomValues(byteArray);
console.log('Your lucky bytes: ' + byteArray);
Crypto.randomUUID()
The randomUUID() method returns a unique identifier based on the V4 UUID spec (RFC4122). It uses cryptographically secure random values to generate the UUID.
Returns:
string
A string containing a newly generated UUIDv4 identifier
Example
const UUID = Crypto.randomUUID();
console.log('Your UUID: ' + UUID);
Types
CryptoDigestOptions
Property	Type	Description
encoding	CryptoEncoding
Format the digest is returned in.
Digest
Type: string
Enums
CryptoDigestAlgorithm
Cryptographic hash function
MD2
Only for: 
iOS


CryptoDigestAlgorithm.MD2 ＝ "MD2"
128 bits.
MD4
Only for: 
iOS


CryptoDigestAlgorithm.MD4 ＝ "MD4"
128 bits.
MD5
Only for: 
Android
iOS


CryptoDigestAlgorithm.MD5 ＝ "MD5"
128 bits.
SHA1
CryptoDigestAlgorithm.SHA1 ＝ "SHA-1"
160 bits.
SHA256
CryptoDigestAlgorithm.SHA256 ＝ "SHA-256"
256 bits. Collision Resistant.
SHA384
CryptoDigestAlgorithm.SHA384 ＝ "SHA-384"
384 bits. Collision Resistant.
SHA512
CryptoDigestAlgorithm.SHA512 ＝ "SHA-512"
512 bits. Collision Resistant.
CryptoEncoding
BASE64
CryptoEncoding.BASE64 ＝ "base64"
Has trailing padding. Does not wrap lines. Does not have a trailing newline.
HEX
CryptoEncoding.HEX ＝ "hex"
Error codes
Code	Description
ERR_CRYPTO_UNAVAILABLE	Web Only. Access to the WebCrypto API is restricted to secure origins (localhost/https).
ERR_CRYPTO_DIGEST	An invalid encoding type provided.

#27

Expo DevClient

GitHub

npm

A library that allows creating a development build and includes useful development tools.
Android
iOS
Bundled version:
~5.2.1
________________________________________
expo-dev-client adds various useful development tools to your debug builds:
•	A configurable launcher UI, so you can launch updates (such as from PR previews) and switch between development servers without needing to recompile the native app
•	Improved debugging tools (such as support for inspecting network requests)
•	A powerful and extensible developer menu UI
Expo documentation refers to debug builds that include expo-dev-client as development builds.
Installation
Terminal
Copy
- npx expo install expo-dev-client
If you are installing this in an existing React Native app, start by installing expo in your project. Then, follow the instructions from Install expo-dev-client in an existing React Native project.
Configuration in app config
You can configure development client launcher using its built-in config plugin if you use config plugins in your project (EAS Build or npx expo run:[android|ios]). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.
Example app.json with config plugin
app.json
Copy
{
  "expo": {
    "plugins": [
      [
        "expo-dev-client",
        {
          "launchMode": "most-recent"
        }
      ]
    ]
  }
}
Configurable properties
Name	Default	Description
launchMode	"most-recent"	Determines whether to launch the most recently opened project or navigate to the launcher screen.
•	most-recent - Attempt to launch directly into a previously opened project and if unable to connect, fall back to the launcher screen.
•	launcher - Opens the launcher screen.
addGeneratedScheme	true	By default, expo-dev-client will register a custom URL scheme to open a project. Set this property to false to disable this scheme.
API
import * as DevClient from 'expo-dev-client';
Methods
DevClient.closeMenu()
A method that closes development client menu when called.
Returns:
void
DevClient.hideMenu()
A method that hides development client menu when called.
Returns:
void
DevClient.isDevelopmentBuild()
A method that returns a boolean to indicate if the current application is a development build.
Returns:
boolean
DevClient.openMenu()
A method that opens development client menu when called.
Returns:
void
DevClient.registerDevMenuItems(items)
Parameter	Type
items	ExpoDevMenuItem[]


A method that allows to specify custom entries in the development client menu.
Returns:
Promise<void>
Types
ExpoDevMenuItem
An object representing the custom development client menu entry.
Property	Type	Description
callback	() => void	Callback to fire, when user selects an item.
name	string	Name of the entry, will be used as label.
shouldCollapse(optional)	boolean	A boolean specifying if the menu should close after the user interaction.
Default:false

#28

Expo Device

GitHub

npm

A universal library provides access to system information about the physical device.
Android
iOS
tvOS
Web
Bundled version:
~7.1.4
________________________________________
expo-device provides access to system information about the physical device, such as its manufacturer and model.
Installation
Terminal
Copy
- npx expo install expo-device
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Basic Device Usage
Copy
Open in Snack
import { Text, View } from 'react-native';
import * as Device from 'expo-device';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>
        {Device.manufacturer}: {Device.modelName}
      </Text>
    </View>
  );
}
API
import * as Device from 'expo-device';
Constants
Device.brand
Only for: 
Android
iOS


Type: string | null
The device brand. The consumer-visible brand of the product/hardware. On web, this value is always null.
Example
Device.brand; // Android: "google", "xiaomi"; iOS: "Apple"; web: null
Device.designName
Only for: 
Android


Type: string | null
The specific configuration or name of the industrial design. It represents the device's name when it was designed during manufacturing into mass production. On Android, it corresponds to Build.DEVICE. On web and iOS, this value is always null.
Example
Device.designName; // Android: "kminilte"; iOS: null; web: null
Device.deviceName
Type: string | null
The human-readable name of the device, which may be set by the device's user. If the device name is unavailable, particularly on web, this value is null.
On iOS 16 and newer, this value will be set to generic "iPhone" until you add the correct entitlement, see iOS Capabilities page to learn how to add one and check out Apple documentation for more details on this change.
Example
Device.deviceName; // "Vivian's iPhone XS"
Device.deviceType
Type: DeviceType | null
The type of the device as a DeviceType enum value.
On Android, for devices other than TVs, the device type is determined by the screen resolution (screen diagonal size), so the result may not be completely accurate. If the screen diagonal length is between 3" and 6.9", the method returns DeviceType.PHONE. For lengths between 7" and 18", the method returns DeviceType.TABLET. Otherwise, the method returns DeviceType.UNKNOWN.
Example
Device.deviceType; // UNKNOWN, PHONE, TABLET, TV, DESKTOP
Device.deviceYearClass
Type: number | null
The device year class of this device. On web, this value is always null.
Device.isDevice
Type: boolean
true if the app is running on a real device and false if running in a simulator or emulator. On web, this is always set to true.
Device.manufacturer
Type: string | null
The actual device manufacturer of the product or hardware. This value of this field may be null if it cannot be determined.
To view difference between brand and manufacturer on Android see official documentation.
Example
Device.manufacturer; // Android: "Google", "xiaomi"; iOS: "Apple"; web: "Google", null
Device.modelId
Only for: 
iOS


Type: any
The internal model ID of the device. This is useful for programmatically identifying the type of device and is not a human-friendly string. On web and Android, this value is always null.
Example
Device.modelId; // iOS: "iPhone7,2"; Android: null; web: null
Device.modelName
Type: string | null
The human-friendly name of the device model. This is the name that people would typically use to refer to the device rather than a programmatic model identifier. This value of this field may be null if it cannot be determined.
Example
Device.modelName; // Android: "Pixel 2"; iOS: "iPhone XS Max"; web: "iPhone", null
Device.osBuildFingerprint
Only for: 
Android


Type: string | null
A string that uniquely identifies the build of the currently running system OS. On Android, it follows this template:
•	$(BRAND)/$(PRODUCT)/$(DEVICE)/$(BOARD):$(VERSION.RELEASE)/$(ID)/$(VERSION.INCREMENTAL):$(TYPE)/\$(TAGS) On web and iOS, this value is always null.
Example
Device.osBuildFingerprint;
// Android: "google/sdk_gphone_x86/generic_x86:9/PSR1.180720.075/5124027:user/release-keys";
// iOS: null; web: null
Device.osBuildId
Type: string | null
The build ID of the OS that more precisely identifies the version of the OS. On Android, this corresponds to Build.DISPLAY (not Build.ID) and currently is a string as described here. On iOS, this corresponds to kern.osversion and is the detailed OS version sometimes displayed next to the more human-readable version. On web, this value is always null.
Example
Device.osBuildId; // Android: "PSR1.180720.075"; iOS: "16F203"; web: null
Device.osInternalBuildId
Type: string | null
The internal build ID of the OS running on the device. On Android, this corresponds to Build.ID. On iOS, this is the same value as Device.osBuildId. On web, this value is always null.
Example
Device.osInternalBuildId; // Android: "MMB29K"; iOS: "16F203"; web: null,
Device.osName
Type: string | null
The name of the OS running on the device.
Example
Device.osName; // Android: "Android"; iOS: "iOS" or "iPadOS"; web: "iOS", "Android", "Windows"
Device.osVersion
Type: string | null
The human-readable OS version string. Note that the version string may not always contain three numbers separated by dots.
Example
Device.osVersion; // Android: "4.0.3"; iOS: "12.3.1"; web: "11.0", "8.1.0"
Device.platformApiLevel
Only for: 
Android


Type: number | null
The Android SDK version of the software currently running on this hardware device. This value never changes while a device is booted, but it may increase when the hardware manufacturer provides an OS update. See here to see all possible version codes and corresponding versions. On iOS and web, this value is always null.
Example
Device.platformApiLevel; // Android: 19; iOS: null; web: null
Device.productName
Only for: 
Android


Type: string | null
The device's overall product name chosen by the device implementer containing the development name or code name of the device. Corresponds to Build.PRODUCT. On web and iOS, this value is always null.
Example
Device.productName; // Android: "kminiltexx"; iOS: null; web: null
Device.supportedCpuArchitectures
Type: string[] | null
A list of supported processor architecture versions. The device expects the binaries it runs to be compiled for one of these architectures. This value is null if the supported architectures could not be determined, particularly on web.
Example
Device.supportedCpuArchitectures; // ['arm64 v8', 'Intel x86-64h Haswell', 'arm64-v8a', 'armeabi-v7a", 'armeabi']
Device.totalMemory
Type: number | null
The device's total memory, in bytes. This is the total memory accessible to the kernel, but not necessarily to a single app. This is basically the amount of RAM the device has, not including below-kernel fixed allocations like DMA buffers, RAM for the baseband CPU, etc… On web, this value is always null.
Example
Device.totalMemory; // 17179869184
Methods
Device.getDeviceTypeAsync()
Checks the type of the device as a DeviceType enum value.
On Android, for devices other than TVs, the device type is determined by the screen resolution (screen diagonal size), so the result may not be completely accurate. If the screen diagonal length is between 3" and 6.9", the method returns DeviceType.PHONE. For lengths between 7" and 18", the method returns DeviceType.TABLET. Otherwise, the method returns DeviceType.UNKNOWN.
Returns:
Promise<DeviceType>
Returns a promise that resolves to a DeviceType enum value.
Example
await Device.getDeviceTypeAsync();
// DeviceType.PHONE
Device.getMaxMemoryAsync()
Only for: 
Android


Returns the maximum amount of memory that the Java VM will attempt to use. If there is no inherent limit then Number.MAX_SAFE_INTEGER is returned.
Returns:
Promise<number>
Returns a promise that resolves to the maximum available memory that the Java VM will use, in bytes.
Example
await Device.getMaxMemoryAsync();
// 402653184
Device.getPlatformFeaturesAsync()
Only for: 
Android


Gets a list of features that are available on the system. The feature names are platform-specific. See Android documentation to learn more about this implementation.
Returns:
Promise<string[]>
Returns a promise that resolves to an array of strings, each of which is a platform-specific name of a feature available on the current device. On iOS and web, the promise always resolves to an empty array.
Example
await Device.getPlatformFeaturesAsync();
// [
//   'android.software.adoptable_storage',
//   'android.software.backup',
//   'android.hardware.sensor.accelerometer',
//   'android.hardware.touchscreen',
// ]
Device.getUptimeAsync()
Only for: 
Android
iOS


Gets the uptime since the last reboot of the device, in milliseconds. Android devices do not count time spent in deep sleep.
Returns:
Promise<number>
Returns a promise that resolves to a number that represents the milliseconds since last reboot.
Example
await Device.getUptimeAsync();
// 4371054
Device.hasPlatformFeatureAsync(feature)
Only for: 
Android


Parameter	Type	Description
feature	string	The platform-specific name of the feature to check for on the device. You can get all available system features with Device.getSystemFeatureAsync(). See Android documentation to view acceptable feature strings.


Tells if the device has a specific system feature.
Returns:
Promise<boolean>
Returns a promise that resolves to a boolean value indicating whether the device has the specified system feature. On iOS and web, the promise always resolves to false.
Example
await Device.hasPlatformFeatureAsync('amazon.hardware.fire_tv');
// true or false
Device.isRootedExperimentalAsync()
This method is experimental and is not completely reliable. See description below.
Checks whether the device has been rooted (Android) or jailbroken (iOS). This is not completely reliable because there exist solutions to bypass root-detection on both iOS and Android. Further, many root-detection checks can be bypassed via reverse engineering.
•	On Android, it's implemented in a way to find all possible files paths that contain the "su" executable but some devices that are not rooted may also have this executable. Therefore, there's no guarantee that this method will always return correctly.
•	On iOS, these jailbreak checks are used to detect if a device is rooted/jailbroken. However, since there are closed-sourced solutions such as xCon that aim to hook every known method and function responsible for informing an application of a jailbroken device, this method may not reliably detect devices that have xCon or similar packages installed.
•	On web, this always resolves to false even if the device is rooted.
Returns:
Promise<boolean>
Returns a promise that resolves to a boolean that specifies whether this device is rooted.
Example
await Device.isRootedExperimentalAsync();
// true or false
Device.isSideLoadingEnabledAsync()
Only for: 
Android


Using this method requires you to add the REQUEST_INSTALL_PACKAGES permission. Returns whether applications can be installed for this user via the system's ACTION_INSTALL_PACKAGE mechanism rather than through the OS's default app store, like Google Play.
Returns:
Promise<boolean>
Returns a promise that resolves to a boolean that represents whether the calling package is allowed to request package installation.
Example
await Device.isSideLoadingEnabledAsync();
// true or false
Enums
DeviceType
An enum representing the different types of devices supported by Expo.
UNKNOWN
DeviceType.UNKNOWN ＝ 0
An unrecognized device type.
PHONE
DeviceType.PHONE ＝ 1
Mobile phone handsets, typically with a touch screen and held in one hand.
TABLET
DeviceType.TABLET ＝ 2
Tablet computers, typically with a touch screen that is larger than a usual phone.
DESKTOP
DeviceType.DESKTOP ＝ 3
Desktop or laptop computers, typically with a keyboard and mouse.
TV
DeviceType.TV ＝ 4
Device with TV-based interfaces.
Error codes
Code	Description
ERR_DEVICE_ROOT_DETECTION	Error code thrown for isRootedExperimentalAsync. This may be thrown if there's no read access to certain system files.

#29

Expo DeviceMotion

GitHub

npm

A library that provides access to a device's motion and orientation sensors.
Android
iOS
Web
Bundled version:
~14.1.4
________________________________________
DeviceMotion from expo-sensors provides access to the device motion and orientation sensors. All data is presented in terms of three axes that run through a device. According to portrait orientation: X runs from left to right, Y from bottom to top and Z perpendicularly through the screen from back to front.
Installation
Terminal
Copy
- npx expo install expo-sensors
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration in app config
You can configure DeviceMotion from expo-sensor using its built-in config plugin if you use config plugins in your project (EAS Build or npx expo run:[android|ios]). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.
Example app.json with config plugin
app.json
Copy
{
  "expo": {
    "plugins": [
      [
        "expo-sensors",
        {
          "motionPermission": "Allow $(PRODUCT_NAME) to access your device motion."
        }
      ]
    ]
  }
}
Configurable properties
Name	Default	Description
motionPermission	"Allow $(PRODUCT_NAME) to access your device motion"	Only for: 
iOS


A string to set the NSMotionUsageDescription permission message.

Are you using this library in an existing React Native app?
API
import { DeviceMotion } from 'expo-sensors';
Constants
Gravity
Type: number
Constant value representing standard gravitational acceleration for Earth (9.80665 m/s^2).
Classes
DeviceMotion
Type: Class extends DeviceSensor<DeviceMotionMeasurement>
A base class for subscribable sensors. The events emitted by this class are measurements specified by the parameter type Measurement.
DeviceMotion Properties
Gravity
Type: number • Default: ExponentDeviceMotion.Gravity
Constant value representing standard gravitational acceleration for Earth (9.80665 m/s^2).
DeviceMotion Methods
addListener(listener)
Parameter	Type	Description
listener	Listener<DeviceMotionMeasurement>
A callback that is invoked when a device motion sensor update is available. When invoked, the listener is provided a single argument that is a DeviceMotionMeasurement object.

Subscribe for updates to the device motion sensor.
Returns:
EventSubscription
A subscription that you can call remove() on when you would like to unsubscribe the listener.
getListenerCount()
Returns the registered listeners count.
Returns:
number
getPermissionsAsync()
Checks user's permissions for accessing sensor.
Returns:
Promise<PermissionResponse>
hasListeners()
Returns boolean which signifies if sensor has any listeners registered.
Returns:
boolean
isAvailableAsync()
You should always check the sensor availability before attempting to use it.
Returns whether the accelerometer is enabled on the device.
On mobile web, you must first invoke DeviceMotion.requestPermissionsAsync() in a user interaction (i.e. touch event) before you can use this module. If the status is not equal to granted then you should inform the end user that they may have to open settings.
On web this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the device orientation API disabled in Settings > Safari > Motion & Orientation Access. Some devices will also not fire if the site isn't hosted with HTTPS as DeviceMotion is now considered a secure API. There is no formal API for detecting the status of DeviceMotion so this API can sometimes be unreliable on web.
Returns:
Promise<boolean>
A promise that resolves to a boolean denoting the availability of device motion sensor.
removeAllListeners()
Removes all registered listeners.
Returns:
void
removeSubscription(subscription)
Parameter	Type	Description
subscription	EventSubscription	A subscription to remove.

Removes the given subscription.
Returns:
void
requestPermissionsAsync()
Asks the user to grant permissions for accessing sensor.
Returns:
Promise<PermissionResponse>
setUpdateInterval(intervalMs)
Parameter	Type	Description
intervalMs	number	Desired interval in milliseconds between sensor updates.
Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.
If you need an update interval less than 200ms, you should:
•	add android.permission.HIGH_SAMPLING_RATE_SENSORS to app.json permissions field
•	or if you are using bare workflow, add <uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS"/> to AndroidManifest.xml.

Set the sensor update interval.
Returns:
void
Interfaces
Subscription
A subscription object that allows to conveniently remove an event listener from the emitter.
Subscription Methods
remove()
Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.
Returns:
void
Types
DeviceMotionMeasurement
Property	Type	Description
acceleration	null | {
  timestamp: number, 
  x: number, 
  y: number, 
  z: number
}	Device acceleration on the three axis as an object with x, y, z keys. Expressed in meters per second squared (m/s^2).
accelerationIncludingGravity	{
  timestamp: number, 
  x: number, 
  y: number, 
  z: number
}	Device acceleration with the effect of gravity on the three axis as an object with x, y, z keys. Expressed in meters per second squared (m/s^2).
interval	number	Interval at which data is obtained from the native platform. Expressed in milliseconds (ms).
orientation	DeviceMotionOrientation
Device orientation based on screen rotation. Value is one of:
•	0 (portrait),
•	90 (right landscape),
•	180 (upside down),
•	-90 (left landscape).
rotation	{
  alpha: number, 
  beta: number, 
  gamma: number, 
  timestamp: number
}	Device's orientation in space as an object with alpha, beta, gamma keys where alpha is for rotation around Z axis, beta for X axis rotation and gamma for Y axis rotation.
rotationRate	null | {
  alpha: number, 
  beta: number, 
  gamma: number, 
  timestamp: number
}	Device's rate of rotation in space expressed in degrees per second (deg/s).
PermissionExpiration
Literal Type: union
Permission expiration time. Currently, all permissions are granted permanently.
Acceptable values are: 'never' | number
PermissionResponse
An object obtained by permissions get and request functions.
Property	Type	Description
canAskAgain	boolean	Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.
expires	PermissionExpiration
Determines time when the permission expires.
granted	boolean	A convenience boolean that indicates if the permission is granted.
status	PermissionStatus
Determines the status of the permission.
Enums
DeviceMotionOrientation
LeftLandscape
DeviceMotionOrientation.LeftLandscape ＝ -90
Portrait
DeviceMotionOrientation.Portrait ＝ 0
RightLandscape
DeviceMotionOrientation.RightLandscape ＝ 90
UpsideDown
DeviceMotionOrientation.UpsideDown ＝ 180
PermissionStatus
DENIED
PermissionStatus.DENIED ＝ "denied"
User has denied the permission.
GRANTED
PermissionStatus.GRANTED ＝ "granted"
User has granted the permission.
UNDETERMINED
PermissionStatus.UNDETERMINED ＝ "undetermined"
User hasn't granted or denied the permission yet.
Permissions
iOS
The following usage description keys are used by this library:
Info.plist Key	Description
NSMotionUsageDescription	A message that tells the user why the app is requesting access to the device’s motion data.

#30

Expo DocumentPicker

GitHub

npm

A library that provides access to the system's UI for selecting documents from the available providers on the user's device.
Android
iOS
Web
Bundled version:
~13.1.6
________________________________________
expo-document-picker provides access to the system's UI for selecting documents from the available providers on the user's device.
Installation
Terminal
Copy
- npx expo install expo-document-picker
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration in app config
You can configure expo-document-picker using its built-in config plugin if you use config plugins in your project (EAS Build or npx expo run:[android|ios]). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect. If your app does not use EAS Build, then you'll need to manually configure the package.
Example app.json with config plugin
If you want to enable iCloud storage features, set the expo.ios.usesIcloudStorage key to true in the app config file as specified configuration properties.
Running EAS Build locally will use iOS capabilities signing to enable the required capabilities before building.
app.json
Copy
{
  "expo": {
    "plugins": [
      [
        "expo-document-picker",
        {
          "iCloudContainerEnvironment": "Production"
        }
      ]
    ]
  }
}
Configurable properties
Name	Default	Description
iCloudContainerEnvironment	undefined	Only for: 
iOS


Sets the iOS com.apple.developer.icloud-container-environment entitlement used for AdHoc iOS builds. Possible values: Development, Production. Learn more.

kvStoreIdentifier	undefined	Only for: 
iOS


Overrides the default iOS com.apple.developer.ubiquity-kvstore-identifier entitlement, which uses your Apple Team ID and bundle identifier. This may be needed if your app was transferred to another Apple Team after enabling iCloud storage.
Are you using this library in an existing React Native app?
Using with expo-file-system
When using expo-document-picker with expo-file-system, it's not always possible for the file system to read the file immediately after the expo-document-picker picks it.
To allow the expo-file-system to read the file immediately after it is picked, you'll need to ensure that the copyToCacheDirectory option is set to true.
API
import * as DocumentPicker from 'expo-document-picker';
Component
getDocumentAsync
Type: React.Element<DocumentPickerOptions>
Display the system UI for choosing a document. By default, the chosen file is copied to the app's internal cache directory.
Notes for Web: The system UI can only be shown after user activation (e.g. a Button press). Therefore, calling getDocumentAsync in componentDidMount, for example, will not work as intended. The cancel event will not be returned in the browser due to platform restrictions and inconsistencies across browsers.
Types
DocumentPickerAsset
Property	Type	Description
file(optional)	File
Only for: 
Web


File object for the parity with web File API.
lastModified(optional)	number	Timestamp of last document modification.
mimeType(optional)	string	Document MIME type.
name	string	Document original name.
size(optional)	number	Document size in bytes.
uri	string	An URI to the local document file.
DocumentPickerCanceledResult
Type representing canceled pick result.
Property	Type	Description
assets	null	Always null when the request was canceled.
canceled	true	Always true when the request was canceled.
output(optional)	null	Only for: 
Web


Always null when the request was canceled.
DocumentPickerOptions
Property	Type	Description
base64(optional)	boolean	Only for: 
Web


If true, asset url is base64 from the file If false, asset url is the file url parameter
Default:true
copyToCacheDirectory(optional)	boolean	If true, the picked file is copied to FileSystem.CacheDirectory, which allows other Expo APIs to read the file immediately. This may impact performance for large files, so you should consider setting this to false if you expect users to pick particularly large files and your app does not need immediate read access.
Default:true
multiple(optional)	boolean	Allows multiple files to be selected from the system UI.
Default:false
type(optional)	string | string[]	The MIME type(s) of the documents that are available to be picked. It also supports wildcards like 'image/*' to choose any image. To allow any type of document you can use '*/*'.
Default:'*/*'
DocumentPickerResult
Literal Type: union
Type representing successful and canceled document pick result.
Acceptable values are: DocumentPickerSuccessResult | DocumentPickerCanceledResult
DocumentPickerSuccessResult
Type representing successful pick result.
Property	Type	Description
assets	DocumentPickerAsset[]
An array of picked assets.
canceled	false	If asset data have been returned this should always be false.
output(optional)	FileList
Only for: 
Web


FileList object for the parity with web File API.

#31

Expo FileSystem

GitHub

npm

A library that provides access to the local file system on the device.
Android
iOS
tvOS
Bundled version:
~18.1.10
________________________________________
expo-file-system provides access to a file system stored locally on the device. It is also capable of uploading and downloading files from network URLs.
Diagram explaining how expo-file-system interacts with different resources
 
How expo-file-system works differently inside of the Expo Go app
Installation
Terminal
Copy
- npx expo install expo-file-system
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Downloading files
Component.js
Copy
const callback = downloadProgress => {
  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;
  this.setState({
    downloadProgress: progress,
  });
};

const downloadResumable = FileSystem.createDownloadResumable(
  'http://techslides.com/demos/sample-videos/small.mp4',
  FileSystem.documentDirectory + 'small.mp4',
  {},
  callback
);

try {
  const { uri } = await downloadResumable.downloadAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

try {
  await downloadResumable.pauseAsync();
  console.log('Paused download operation, saving for future retrieval');
  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));
} catch (e) {
  console.error(e);
}

try {
  const { uri } = await downloadResumable.resumeAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:
const downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');
const downloadSnapshot = JSON.parse(downloadSnapshotJson);
const downloadResumable = new FileSystem.DownloadResumable(
  downloadSnapshot.url,
  downloadSnapshot.fileUri,
  downloadSnapshot.options,
  callback,
  downloadSnapshot.resumeData
);

try {
  const { uri } = await downloadResumable.resumeAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}
Show More
Managing Giphy's
Giphy example
Copy
Open in Snack
import * as FileSystem from 'expo-file-system';

const gifDir = FileSystem.cacheDirectory + 'giphy/';
const gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;
const gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;

// Checks if gif directory exists. If not, creates it
async function ensureDirExists() {
  const dirInfo = await FileSystem.getInfoAsync(gifDir);
  if (!dirInfo.exists) {
    console.log("Gif directory doesn't exist, creating…");
    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });
  }
}

// Downloads all gifs specified as array of IDs
export async function addMultipleGifs(gifIds: string[]) {
  try {
    await ensureDirExists();

    console.log('Downloading', gifIds.length, 'gif files…');
    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));
  } catch (e) {
    console.error("Couldn't download gif files:", e);
  }
}

// Returns URI to our local gif file
// If our gif doesn't exist locally, it downloads it
export async function getSingleGif(gifId: string) {
  await ensureDirExists();

  const fileUri = gifFileUri(gifId);
  const fileInfo = await FileSystem.getInfoAsync(fileUri);

  if (!fileInfo.exists) {
    console.log("Gif isn't cached locally. Downloading…");
    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);
  }

  return fileUri;
}

// Exports shareable URI - it can be shared outside your app
export async function getGifContentUri(gifId: string) {
  return FileSystem.getContentUriAsync(await getSingleGif(gifId));
}

// Deletes whole giphy directory with all its content
export async function deleteAllGifs() {
  console.log('Deleting all GIF files…');
  await FileSystem.deleteAsync(gifDir);
}
Show More
Server: handling multipart requests
The simple server in Node.js, which can save uploaded images to disk:
index.js
Copy
const express = require('express');
const app = express();
const fs = require('fs');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });

// This method will save the binary content of the request as a file.
app.patch('/binary-upload', (req, res) => {
  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));
  res.end('OK');
});

// This method will save a "photo" field from the request as a file.
app.patch('/multipart-upload', upload.single('photo'), (req, res) => {
  // You can access other HTTP parameters. They are located in the body object.
  console.log(req.body);
  res.end('OK');
});

app.listen(3000, () => {
  console.log('Working on port 3000');
});
Show More
API
import * as FileSystem from 'expo-file-system';
Directories
The API takes file:// URIs pointing to local files on the device to identify files. Each app only has read and write access to locations under the following directories:
•	FileSystem.documentDirectory
•	FileSystem.cacheDirectory
So, for example, the URI to a file named 'myFile' under 'myDirectory' in the app's user documents directory would be FileSystem.documentDirectory + 'myDirectory/myFile'.
Expo APIs that create files generally operate within these directories. This includes Audio recordings, Camera photos, ImagePicker results, SQLite databases and takeSnapShotAsync() results. This allows their use with the FileSystem API.
Some FileSystem functions are able to read from (but not write to) other locations.
SAF URI
A SAF URI is a URI that is compatible with the Storage Access Framework. It should look like this content://com.android.externalstorage.*. The easiest way to obtain such URI is by requestDirectoryPermissionsAsync method.
Constants
FileSystem.bundleDirectory
Type: null | string
URI to the directory where assets bundled with the application are stored.
FileSystem.cacheDirectory
Type: null | string
file:// URI pointing to the directory where temporary files used by this app will be stored. Files stored here may be automatically deleted by the system when low on storage. Example uses are for downloaded or generated files that the app just needs for one-time usage.
FileSystem.documentDirectory
Type: null | string
file:// URI pointing to the directory where user documents for this app will be stored. Files stored here will remain until explicitly deleted by the app. Ends with a trailing /. Example uses are for files the user saves that they expect to see again.
Classes
DownloadResumable
Type: Class extends FileSystemCancellableNetworkTask<DownloadProgressData>
DownloadResumable Properties
fileUri
Type: string
DownloadResumable Methods
cancelAsync()
Returns:
Promise<void>
downloadAsync()
Download the contents at a remote URI to a file in the app's file system.
Returns:
Promise<undefined | FileSystemDownloadResult>
Returns a Promise that resolves to FileSystemDownloadResult object, or to undefined when task was cancelled.
pauseAsync()
Pause the current download operation. resumeData is added to the DownloadResumable object after a successful pause operation. Returns an object that can be saved with AsyncStorage for future retrieval (the same object that is returned from calling FileSystem.DownloadResumable.savable()).
Returns:
Promise<DownloadPauseState>
Returns a Promise that resolves to DownloadPauseState object.
resumeAsync()
Resume a paused download operation.
Returns:
Promise<undefined | FileSystemDownloadResult>
Returns a Promise that resolves to FileSystemDownloadResult object, or to undefined when task was cancelled.
savable()
Method to get the object which can be saved with AsyncStorage for future retrieval.
Returns:
DownloadPauseState
Returns object in shape of DownloadPauseState type.
FileSystemCancellableNetworkTask
FileSystemCancellableNetworkTask Methods
cancelAsync()
Returns:
Promise<void>
UploadTask
Type: Class extends FileSystemCancellableNetworkTask<UploadProgressData>
UploadTask Methods
cancelAsync()
Returns:
Promise<void>
uploadAsync()
Returns:
Promise<undefined | FileSystemUploadResult>
Methods
FileSystem.copyAsync(options)
Parameter	Type	Description
options	RelocatingOptions
A map of move options represented by RelocatingOptions type.


Create a copy of a file or directory. Directories are recursively copied with all of their contents. It can be also used to copy content shared by other apps to local filesystem.
Returns:
Promise<void>
FileSystem.createDownloadResumable(uri, fileUri, options, callback, resumeData)
Parameter	Type	Description
uri	string	The remote URI to download from.
fileUri	string	The local URI of the file to download to. If there is no file at this URI, a new one is created. If there is a file at this URI, its contents are replaced. The directory for the file must exist.
options(optional)	DownloadOptions
A map of download options represented by DownloadOptions type.

callback(optional)	FileSystemNetworkTaskProgressCallback<DownloadProgressData>
This function is called on each data write to update the download progress.
Note: When the app has been moved to the background, this callback won't be fired until it's moved to the foreground.
resumeData(optional)	string	The string which allows the api to resume a paused download. This is set on the DownloadResumable object automatically when a download is paused. When initializing a new DownloadResumable this should be null.

Create a DownloadResumable object which can start, pause, and resume a download of contents at a remote URI to a file in the app's file system.
Note: You need to call downloadAsync(), on a DownloadResumable instance to initiate the download. The DownloadResumable object has a callback that provides download progress updates. Downloads can be resumed across app restarts by using AsyncStorage to store the DownloadResumable.savable() object for later retrieval. The savable object contains the arguments required to initialize a new DownloadResumable object to resume the download after an app restart. The directory for a local file uri must exist prior to calling this function.
Returns:
DownloadResumable
FileSystem.createUploadTask(url, fileUri, options, callback)
Parameter	Type
url	string
fileUri	string
options(optional)	FileSystemUploadOptions

callback(optional)	FileSystemNetworkTaskProgressCallback<UploadProgressData>


Returns:
UploadTask
FileSystem.deleteAsync(fileUri, options)
Parameter	Type	Description
fileUri	string	file:// or SAF URI to the file or directory.

options(optional)	DeletingOptions
A map of write options represented by DeletingOptions type.
Default:{}

Delete a file or directory. If the URI points to a directory, the directory and all its contents are recursively deleted.
Returns:
Promise<void>
FileSystem.deleteLegacyDocumentDirectoryAndroid()
Returns:
Promise<void>
FileSystem.downloadAsync(uri, fileUri, options)
Parameter	Type	Description
uri	string	The remote URI to download from.
fileUri	string	The local URI of the file to download to. If there is no file at this URI, a new one is created. If there is a file at this URI, its contents are replaced. The directory for the file must exist.
options(optional)	DownloadOptions
A map of download options represented by DownloadOptions type.
Default:{}

Download the contents at a remote URI to a file in the app's file system. The directory for a local file uri must exist prior to calling this function.
Returns:
Promise<FileSystemDownloadResult>
Returns a Promise that resolves to a FileSystemDownloadResult object.
Example
FileSystem.downloadAsync(
  'http://techslides.com/demos/sample-videos/small.mp4',
  FileSystem.documentDirectory + 'small.mp4'
)
  .then(({ uri }) => {
    console.log('Finished downloading to ', uri);
  })
  .catch(error => {
    console.error(error);
  });
FileSystem.getContentUriAsync(fileUri)
Only for: 
Android


Parameter	Type	Description
fileUri	string	The local URI of the file. If there is no file at this URI, an exception will be thrown.

Takes a file:// URI and converts it into content URI (content://) so that it can be accessed by other applications outside of Expo.
Returns:
Promise<string>
Returns a Promise that resolves to a string containing a content:// URI pointing to the file. The URI is the same as the fileUri input parameter but in a different format.
Example
FileSystem.getContentUriAsync(uri).then(cUri => {
  console.log(cUri);
  IntentLauncher.startActivityAsync('android.intent.action.VIEW', {
    data: cUri,
    flags: 1,
  });
});
FileSystem.getFreeDiskStorageAsync()
Gets the available internal disk storage size, in bytes. This returns the free space on the data partition that hosts all of the internal storage for all apps on the device.
Returns:
Promise<number>
Returns a Promise that resolves to the number of bytes available on the internal disk.
FileSystem.getInfoAsync(fileUri, options)
Parameter	Type	Description
fileUri	string	URI to the file or directory. See supported URI schemes.

options(optional)	InfoOptions
A map of options represented by InfoOptions type.
Default:{}

Get metadata information about a file, directory or external content/asset.
Returns:
Promise<FileInfo>
A Promise that resolves to a FileInfo object. If no item exists at this URI, the returned Promise resolves to FileInfo object in form of { exists: false, isDirectory: false }.
FileSystem.getTotalDiskCapacityAsync()
Gets total internal disk storage size, in bytes. This is the total capacity of the data partition that hosts all the internal storage for all apps on the device.
Returns:
Promise<number>
Returns a Promise that resolves to a number that specifies the total internal disk storage capacity in bytes.
FileSystem.makeDirectoryAsync(fileUri, options)
Parameter	Type	Description
fileUri	string	file:// URI to the new directory to create.
options(optional)	MakeDirectoryOptions
A map of create directory options represented by MakeDirectoryOptions type.
Default:{}

Create a new empty directory.
Returns:
Promise<void>
FileSystem.moveAsync(options)
Parameter	Type	Description
options	RelocatingOptions
A map of move options represented by RelocatingOptions type.


Move a file or directory to a new location.
Returns:
Promise<void>
FileSystem.readAsStringAsync(fileUri, options)
Parameter	Type	Description
fileUri	string	file:// or SAF URI to the file or directory.

options(optional)	ReadingOptions
A map of read options represented by ReadingOptions type.
Default:{}

Read the entire contents of a file as a string. Binary will be returned in raw format, you will need to append data:image/png;base64, to use it as Base64.
Returns:
Promise<string>
A Promise that resolves to a string containing the entire contents of the file.
FileSystem.readDirectoryAsync(fileUri)
Parameter	Type	Description
fileUri	string	file:// URI to the directory.

Enumerate the contents of a directory.
Returns:
Promise<string[]>
A Promise that resolves to an array of strings, each containing the name of a file or directory contained in the directory at fileUri.
FileSystem.uploadAsync(url, fileUri, options)
Parameter	Type	Description
url	string	The remote URL, where the file will be sent.
fileUri	string	The local URI of the file to send. The file must exist.
options(optional)	FileSystemUploadOptions
A map of download options represented by FileSystemUploadOptions type.
Default:{}

Upload the contents of the file pointed by fileUri to the remote url.
Returns:
Promise<FileSystemUploadResult>
Returns a Promise that resolves to FileSystemUploadResult object.
Example
Client
import * as FileSystem from 'expo-file-system';

try {
  const response = await FileSystem.uploadAsync(`http://192.168.0.1:1234/binary-upload`, fileUri, {
    fieldName: 'file',
    httpMethod: 'PATCH',
    uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT,
  });
  console.log(JSON.stringify(response, null, 4));
} catch (error) {
  console.log(error);
}
Server
Please refer to the "Server: Handling multipart requests" example - there is code for a simple Node.js server.
FileSystem.writeAsStringAsync(fileUri, contents, options)
Parameter	Type	Description
fileUri	string	file:// or SAF URI to the file or directory.
Note: when you're using SAF URI the file needs to exist. You can't create a new file.
contents	string	The string to replace the contents of the file with.
options(optional)	WritingOptions
A map of write options represented by WritingOptions type.
Default:{}

Write the entire contents of a file as a string.
Returns:
Promise<void>
Namespaces
StorageAccessFramework
Only for: 
Android


The StorageAccessFramework is a namespace inside of the expo-file-system module, which encapsulates all functions which can be used with SAF URIs. You can read more about SAF in the Android documentation.
Example
Basic Usage
import { StorageAccessFramework } from 'expo-file-system';

// Requests permissions for external directory
const permissions = await StorageAccessFramework.requestDirectoryPermissionsAsync();

if (permissions.granted) {
  // Gets SAF URI from response
  const uri = permissions.directoryUri;

  // Gets all files inside of selected directory
  const files = await StorageAccessFramework.readDirectoryAsync(uri);
  alert(`Files inside ${uri}:\n\n${JSON.stringify(files)}`);
}
Migrating an album
import * as MediaLibrary from 'expo-media-library';
import * as FileSystem from 'expo-file-system';
const { StorageAccessFramework } = FileSystem;

async function migrateAlbum(albumName: string) {
  // Gets SAF URI to the album
  const albumUri = StorageAccessFramework.getUriForDirectoryInRoot(albumName);

  // Requests permissions
  const permissions = await StorageAccessFramework.requestDirectoryPermissionsAsync(albumUri);
  if (!permissions.granted) {
    return;
  }

  const permittedUri = permissions.directoryUri;
  // Checks if users selected the correct folder
  if (!permittedUri.includes(albumName)) {
    return;
  }

  const mediaLibraryPermissions = await MediaLibrary.requestPermissionsAsync();
  if (!mediaLibraryPermissions.granted) {
    return;
  }

  // Moves files from external storage to internal storage
  await StorageAccessFramework.moveAsync({
    from: permittedUri,
    to: FileSystem.documentDirectory!,
  });

  const outputDir = FileSystem.documentDirectory! + albumName;
  const migratedFiles = await FileSystem.readDirectoryAsync(outputDir);

  // Creates assets from local files
  const [newAlbumCreator, ...assets] = await Promise.all(
    migratedFiles.map<Promise<MediaLibrary.Asset>>(
      async fileName => await MediaLibrary.createAssetAsync(outputDir + '/' + fileName)
    )
  );

  // Album was empty
  if (!newAlbumCreator) {
    return;
  }

  // Creates a new album in the scoped directory
  const newAlbum = await MediaLibrary.createAlbumAsync(albumName, newAlbumCreator, false);
  if (assets.length) {
    await MediaLibrary.addAssetsToAlbumAsync(assets, newAlbum, false);
  }
}
Show More
StorageAccessFramework Methods
copyAsync(options)
Only for: 
Android


Parameter	Type	Description
options	RelocatingOptions
A map of move options represented by RelocatingOptions type.


Alias for copyAsync method.
Returns:
Promise<void>
createFileAsync(parentUri, fileName, mimeType)
Only for: 
Android


Parameter	Type	Description
parentUri	string	The SAF URI to the parent directory.

fileName	string	The name of new file without the extension.
mimeType	string	The MIME type of new file.

Creates a new empty file.
Returns:
Promise<string>
A Promise that resolves to a SAF URI to the created file.
deleteAsync(fileUri, options)
Only for: 
Android


Parameter	Type	Description
fileUri	string	file:// or SAF URI to the file or directory.

options(optional)	DeletingOptions
A map of write options represented by DeletingOptions type.
Default:{}

Alias for deleteAsync method.
Returns:
Promise<void>
getUriForDirectoryInRoot(folderName)
Only for: 
Android


Parameter	Type	Description
folderName	string	The name of the folder which is located in the Android root directory.

Gets a SAF URI pointing to a folder in the Android root directory. You can use this function to get URI for StorageAccessFramework.requestDirectoryPermissionsAsync() when you trying to migrate an album. In that case, the name of the album is the folder name.
Returns:
string
Returns a SAF URI to a folder.
makeDirectoryAsync(parentUri, dirName)
Only for: 
Android


Parameter	Type	Description
parentUri	string	The SAF URI to the parent directory.

dirName	string	The name of new directory.

Creates a new empty directory.
Returns:
Promise<string>
A Promise that resolves to a SAF URI to the created directory.
moveAsync(options)
Only for: 
Android


Parameter	Type	Description
options	RelocatingOptions
A map of move options represented by RelocatingOptions type.


Alias for moveAsync method.
Returns:
Promise<void>
readAsStringAsync(fileUri, options)
Only for: 
Android


Parameter	Type	Description
fileUri	string	file:// or SAF URI to the file or directory.

options(optional)	ReadingOptions
A map of read options represented by ReadingOptions type.
Default:{}

Alias for readAsStringAsync method.
Returns:
Promise<string>
A Promise that resolves to a string containing the entire contents of the file.
readDirectoryAsync(dirUri)
Only for: 
Android


Parameter	Type	Description
dirUri	string	SAF URI to the directory.


Enumerate the contents of a directory.
Returns:
Promise<string[]>
A Promise that resolves to an array of strings, each containing the full SAF URI of a file or directory contained in the directory at fileUri.
requestDirectoryPermissionsAsync(initialFileUrl)
Only for: 
Android 11+


Parameter	Type	Description
initialFileUrl(optional)	null | string	The SAF URI of the directory that the file picker should display when it first loads. If URI is incorrect or points to a non-existing folder, it's ignored.
Default:null

Allows users to select a specific directory, granting your app access to all of the files and sub-directories within that directory.
Returns:
Promise<FileSystemRequestDirectoryPermissionsResult>
Returns a Promise that resolves to FileSystemRequestDirectoryPermissionsResult object.
writeAsStringAsync(fileUri, contents, options)
Only for: 
Android


Parameter	Type	Description
fileUri	string	file:// or SAF URI to the file or directory.
Note: when you're using SAF URI the file needs to exist. You can't create a new file.
contents	string	The string to replace the contents of the file with.
options(optional)	WritingOptions
A map of write options represented by WritingOptions type.
Default:{}

Alias for writeAsStringAsync method.
Returns:
Promise<void>
Types
DeletingOptions
Property	Type	Description
idempotent(optional)	boolean	If true, don't throw an error if there is no file or directory at this URI.
Default:false
DownloadOptions
Property	Type	Description
cache(optional)	boolean	-
headers(optional)	Record<string, string>	An object containing all the HTTP header fields and their values for the download network request. The keys and values of the object are the header names and values respectively.
md5(optional)	boolean	If true, include the MD5 hash of the file in the returned object. Provided for convenience since it is common to check the integrity of a file immediately after downloading.
Default:false
sessionType(optional)	FileSystemSessionType
Only for: 
iOS


A session type. Determines if tasks can be handled in the background. On Android, sessions always work in the background and you can't change it.
Default:FileSystemSessionType.BACKGROUND
DownloadPauseState
Property	Type	Description
fileUri	string	The local URI of the file to download to. If there is no file at this URI, a new one is created. If there is a file at this URI, its contents are replaced.
options	DownloadOptions
Object representing the file download options.
resumeData(optional)	string	The string which allows the API to resume a paused download.
url	string	The remote URI to download from.
Deprecated use FileSystemNetworkTaskProgressCallback<DownloadProgressData> instead.
DownloadProgressCallback
Type: FileSystemNetworkTaskProgressCallback<DownloadProgressData>
DownloadProgressData
Property	Type	Description
totalBytesExpectedToWrite	number	The total bytes expected to be written by the download operation. A value of -1 means that the server did not return the Content-Length header and the total size is unknown. Without this header, you won't be able to track the download progress.
totalBytesWritten	number	The total bytes written by the download operation.
Deprecated Use FileSystemDownloadResult instead.
DownloadResult
Type: FileSystemDownloadResult
FileInfo
Type: object shaped as below:
Property	Type	Description
exists	true	Signifies that the requested file exist.
isDirectory	boolean	Boolean set to true if this is a directory and false if it is a file.
md5(optional)	string	Present if the md5 option was truthy. Contains the MD5 hash of the file.
modificationTime	number	The last modification time of the file expressed in seconds since epoch.
size	number	The size of the file in bytes. If operating on a source such as an iCloud file, only present if the size option was truthy.
uri	string	A file:// URI pointing to the file. This is the same as the fileUri input parameter.
Or object shaped as below:
Property	Type	Description
exists	false	-
isDirectory	false	-
uri	string	-
FileSystemAcceptedUploadHttpMethod
Literal Type: string
Acceptable values are: 'POST' | 'PUT' | 'PATCH'
FileSystemDownloadResult
Type: FileSystemHttpResult extended by:
Property	Type	Description
md5(optional)	string	Present if the md5 option was truthy. Contains the MD5 hash of the file.
uri	string	A file:// URI pointing to the file. This is the same as the fileUri input parameter.
FileSystemHttpResult
Property	Type	Description
headers	Record<string, string>	An object containing all the HTTP response header fields and their values for the download network request. The keys and values of the object are the header names and values respectively.
mimeType	string | null	-
status	number	The HTTP response status code for the download network request.
FileSystemNetworkTaskProgressCallback(data)
Parameter	Type
data	T
Returns:
void
FileSystemRequestDirectoryPermissionsResult
Type: object shaped as below:
Property	Type	Description
granted	false	-
Or object shaped as below:
Property	Type	Description
directoryUri	string	The SAF URI to the user's selected directory. Available only if permissions were granted.

granted	true	-
FileSystemUploadOptions
Type: UploadOptionsBinary | UploadOptionsMultipart extended by:
Property	Type	Description
headers(optional)	Record<string, string>	An object containing all the HTTP header fields and their values for the upload network request. The keys and values of the object are the header names and values respectively.
httpMethod(optional)	FileSystemAcceptedUploadHttpMethod
The request method.
Default:FileSystemAcceptedUploadHttpMethod.POST
sessionType(optional)	FileSystemSessionType
Only for: 
iOS


A session type. Determines if tasks can be handled in the background. On Android, sessions always work in the background and you can't change it.
Default:FileSystemSessionType.BACKGROUND
FileSystemUploadResult
Type: FileSystemHttpResult extended by:
Property	Type	Description
body	string	The body of the server response.
InfoOptions
Property	Type	Description
md5(optional)	boolean	Whether to return the MD5 hash of the file.
Default:false
size(optional)	boolean	Explicitly specify that the file size should be included. For example, skipping this can prevent downloading the file if it's stored in iCloud. The size is always returned for file:// locations.
MakeDirectoryOptions
Property	Type	Description
intermediates(optional)	boolean	If true, don't throw an error if there is no file or directory at this URI.
Default:false
ProgressEvent
Property	Type	Description
data	T	-
uuid	string	-
ReadingOptions
Property	Type	Description
encoding(optional)	EncodingType | 'utf8' | 'base64'
The encoding format to use when reading the file.
Default:EncodingType.UTF8
length(optional)	number	Optional number of bytes to read. This option is only used when encoding: FileSystem.EncodingType.Base64 and position is defined.
position(optional)	number	Optional number of bytes to skip. This option is only used when encoding: FileSystem.EncodingType.Base64 and length is defined.
RelocatingOptions
Property	Type	Description
from	string	URI or SAF URI to the asset, file, or directory. See supported URI schemes.

to	string	file:// URI to the file or directory which should be its new location.
UploadOptionsBinary
Upload options when upload type is set to binary.
Property	Type	Description
uploadType(optional)	FileSystemUploadType
Upload type determines how the file will be sent to the server. Value will be FileSystemUploadType.BINARY_CONTENT.
UploadOptionsMultipart
Upload options when upload type is set to multipart.
Property	Type	Description
fieldName(optional)	string	The name of the field which will hold uploaded file. Defaults to the file name without an extension.
mimeType(optional)	string	The MIME type of the provided file. If not provided, the module will try to guess it based on the extension.
parameters(optional)	Record<string, string>	Additional form properties. They will be located in the request body.
uploadType	FileSystemUploadType
Upload type determines how the file will be sent to the server. Value will be FileSystemUploadType.MULTIPART.
UploadProgressData
Property	Type	Description
totalBytesExpectedToSend	number	The total bytes expected to be sent by the upload operation.
totalBytesSent	number	The total bytes sent by the upload operation.
WritingOptions
Property	Type	Description
encoding(optional)	EncodingType | 'utf8' | 'base64'
The encoding format to use when writing the file.
Default:FileSystem.EncodingType.UTF8
Enums
EncodingType
These values can be used to define how file system data is read / written.
Base64
EncodingType.Base64 ＝ "base64"
Binary, radix-64 representation.
UTF8
EncodingType.UTF8 ＝ "utf8"
Standard encoding format.
FileSystemSessionType
Only for: 
iOS


These values can be used to define how sessions work on iOS.
BACKGROUND
FileSystemSessionType.BACKGROUND ＝ 0
Using this mode means that the downloading/uploading session on the native side will work even if the application is moved to background. If the task completes while the application is in background, the Promise will be either resolved immediately or (if the application execution has already been stopped) once the app is moved to foreground again.
Note: The background session doesn't fail if the server or your connection is down. Rather, it continues retrying until the task succeeds or is canceled manually.
FOREGROUND
FileSystemSessionType.FOREGROUND ＝ 1
Using this mode means that downloading/uploading session on the native side will be terminated once the application becomes inactive (e.g. when it goes to background). Bringing the application to foreground again would trigger Promise rejection.
FileSystemUploadType
BINARY_CONTENT
FileSystemUploadType.BINARY_CONTENT ＝ 0
The file will be sent as a request's body. The request can't contain additional data.
MULTIPART
FileSystemUploadType.MULTIPART ＝ 1
An RFC 2387-compliant request body. The provided file will be encoded into HTTP request. This request can contain additional data represented by UploadOptionsMultipart type.
Supported URI schemes
In this table, you can see what type of URI can be handled by each method. For example, if you have an URI, which begins with content://, you cannot use FileSystem.readAsStringAsync(), but you can use FileSystem.copyAsync() which supports this scheme.
Method name	Android	iOS
getInfoAsync	file:///,
content://,
asset://,
no scheme	file://,
ph://,
assets-library://
readAsStringAsync	file:///,
asset://,
SAF URI
file://
writeAsStringAsync	file:///,
SAF URI
file://
deleteAsync	file:///,
SAF URI
file://
moveAsync	Source:
file:///,
SAF URI

Destination:
file://	Source:
file://

Destination:
file://
copyAsync	Source:
file:///,
content://,
asset://,
SAF URI,
no scheme

Destination:
file://	Source:
file://,
ph://,
assets-library://

Destination:
file://
makeDirectoryAsync	file:///	file://
readDirectoryAsync	file:///	file://
downloadAsync	Source:
http://,
https://

Destination:
file:///	Source:
http://,
https://

Destination:
file://
uploadAsync	Source:
file:///

Destination:
http://
https://	Source:
file://

Destination:
http://
https://
createDownloadResumable	Source:
http://,
https://

Destination:
file:///	Source:
http://,
https://

Destination:
file://
On Android no scheme defaults to a bundled resource.
Permissions
Android
The following permissions are added automatically through this library's AndroidManifest.xml.
Android Permission	Description
READ_EXTERNAL_STORAGE	Allows an application to read from external storage.
WRITE_EXTERNAL_STORAGE	Allows an application to write to external storage.
INTERNET	Allows applications to open network sockets.
iOS
No permissions required.

#32

Expo FileSystem (next)

GitHub

npm

A library that provides access to the local file system on the device.
Android
iOS
tvOS
Bundled version:
~18.1.10
________________________________________
The next version of the FileSystem API is included in the expo-file-system library. It can be used alongside the previous API, and offers a simplified, object oriented way of performing filesystem operations.
To provide quicker updates, expo-file-system/next is currently unsupported in Expo Go and Snack. To use it, create a development build.
expo-file-system/next provides access to the file system stored locally on the device. It can also download files from the network.
Installation
Terminal
Copy
- npx expo install expo-file-system
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Writing and reading text files
example.ts
Copy
import { File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.cache, 'example.txt');
  file.create(); // can throw an error if the file already exists or no permission to create it
  file.write('Hello, world!');
  console.log(file.text()); // Hello, world!
} catch (error) {
  console.error(error);
}
Downloading files
Using downloadFileAsync:
example.ts
Copy
import { File, Paths } from 'expo-file-system/next';

const url = 'https://pdfobject.com/pdf/sample.pdf';
const destination = new Directory(Paths.cache, 'pdfs');
try {
  destination.create();
  const output = await File.downloadFileAsync(url, destination);
  console.log(output.exists); // true
  console.log(output.uri); // path to the downloaded file, e.g. '${cacheDirectory}/pdfs/sample.pdf'
} catch (error) {
  console.error(error);
}
Or using expo/fetch:
example.ts
Copy
import { fetch } from 'expo/fetch';
import { File } from 'expo-file-system/next';

const url = 'https://pdfobject.com/pdf/sample.pdf';
const response = await fetch(url);
const src = new File(testDirectory, 'file.pdf');
src.write(await response.bytes());
Uploading files using expo/fetch
You can upload files as blobs directly with fetch built into the Expo package:
example.ts
Copy
import { fetch } from 'expo/fetch';
import { File } from 'expo-file-system/next';

const src = new File(testDirectory, 'file.txt');
file.write('Hello, world!');
const blob = src.blob();

const response = await fetch('https://example.com', {
  method: 'POST',
  body: blob,
});
Or using the FormData constructor:
example.ts
Copy
import { fetch } from 'expo/fetch';

const src = new File(testDirectory, 'file.txt');
file.write('Hello, world!');
const blob = src.blob();

const formData = new FormData();
formData.append('data', blob);

const response = await fetch('https://example.com', {
  method: 'POST',
  body: formData,
});
Moving and copying files
example.ts
Copy
import { File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.document, 'example.txt');
  file.create();
  console.log(file.uri); // '${documentDirectory}/example.txt'
  file.move(Paths.cache);
  console.log(file.uri); // '${cacheDirectory}/example.txt'
  file.move(new Directory(Paths.cache, 'newFolder'));
  console.log(file.uri); // '${cacheDirectory}/newFolder/example.txt'
} catch (error) {
  console.error(error);
}
Using legacy FileSystem API
example.ts
Copy
import * as FileSystem from 'expo-file-system';
import { File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.cache, 'example.txt');
  const content = await FileSystem.readAsStringAsync(file.uri);
  console.log(content);
} catch (error) {
  console.error(error);
}
Listing directory contents recursively
example.ts
Copy
import { Directory, Paths } from 'expo-file-system/next';

function printDirectory(directory: Directory, indent: number = 0) {
  console.log(`${' '.repeat(indent)} + ${directory.name}`);
  const contents = directory.list();
  for (const item of contents) {
    if (item instanceof Directory) {
      printDirectory(item, indent + 2);
    } else {
      console.log(`${' '.repeat(indent + 2)} - ${item.name} (${item.size} bytes)`);
    }
  }
}

try {
  printDirectory(new Directory(Paths.cache));
} catch (error) {
  console.error(error);
}
Show More
API
Classes
Directory
Type: Class extends FileSystemDirectory
Represents a directory on the filesystem.
A Directory instance can be created for any path, and does not need to exist on the filesystem during creation.
Directory Properties
exists
Type: boolean
A boolean representing if a directory exists. true if the directory exists, false otherwise. Also, false if the application does not have read access to the file.
uri
Read Only • Type: string
Represents the directory URI. The field is read-only, but it may change as a result of calling some methods such as move.
name
Type: string
Directory name.
parentDirectory
Type: Directory
Directory containing the file.
Directory Methods
copy(destination)
Parameter	Type
destination	Directory | File


Copies a directory.
Returns:
void
create(options)
Parameter	Type
options(optional)	CreateOptions


Creates a directory that the current uri points to.
Returns:
void
delete()
Deletes a directory. Also deletes all files and directories inside the directory.
Returns:
void
list()
Lists the contents of a directory. Calling this method if the parent directory does not exist will throw an error.
Returns:
(File | Directory)[]
An array of Directory and File instances.
move(destination)
Parameter	Type
destination	Directory | File


Moves a directory. Updates the uri property that now points to the new location.
Returns:
void
File
Type: Class extends FileSystemFile
File Properties
exists
Type: boolean
A boolean representing if a file exists. true if the file exists, false otherwise. Also, false if the application does not have read access to the file.
md5
Literal type: union
A md5 hash of the file. Null if the file does not exist, or it cannot be read.
Acceptable values are: null | string
size
Literal type: union
A size of the file in bytes. Null if the file does not exist, or it cannot be read.
Acceptable values are: null | number
type
Literal type: union
A mime type of the file. Null if the file does not exist, or it cannot be read.
Acceptable values are: null | string
uri
Read Only • Type: string
Represents the file URI. The field is read-only, but it may change as a result of calling some methods such as move.
extension
Type: string
File extension.
Example
'.png'
name
Type: string
File name. Includes the extension.
parentDirectory
Type: Directory
Directory containing the file.
File Methods
base64()
Retrieves content of the file as base64.
Returns:
string
The contents of the file as a base64 string.
blob()
Returns the file as a Blob. The blob can be used in @expo/fetch to send files over network and for other uses.
Returns:
Blob
bytes()
Retrieves byte content of the entire file.
Returns:
Uint8Array
The contents of the file as a Uint8Array.
copy(destination)
Parameter	Type
destination	Directory | File


Copies a file.
Returns:
void
create(options)
Parameter	Type
options(optional)	CreateOptions


Creates a file.
Returns:
void
delete()
Deletes a file.
Returns:
void
downloadFileAsync(url, destination)
Parameter	Type	Description
url	string	The URL of the file to download.
destination	Directory | File
The destination directory or file. If a directory is provided, the resulting filename will be determined based on the response headers.

A static method that downloads a file from the network.
Returns:
Promise<File>
A promise that resolves to the downloaded file.
Example
const file = await File.downloadFileAsync("https://example.com/image.png", new Directory(Paths.document));
move(destination)
Parameter	Type
destination	Directory | File


Moves a directory. Updates the uri property that now points to the new location.
Returns:
void
open()
Returns a FileHandle object that can be used to read and write data to the file.
Returns:
FileHandle
readableStream()
Returns:
ReadableStream<Uint8Array>
text()
Retrieves text from the file.
Returns:
string
The contents of the file as string.
writableStream()
Returns:
WritableStream<Uint8Array>
write(content)
Parameter	Type	Description
content	string | Uint8Array
The content to write into the file.

Writes content to the file.
Returns:
void
FileHandle
FileHandle Properties
offset
Literal type: union
A property that indicates the current byte offset in the file. Calling readBytes or writeBytes will read or write a specified amount of bytes starting from this offset. The offset is incremented by the number of bytes read or written. The offset can be set to any value within the file size. If the offset is set to a value greater than the file size, the next write operation will append data to the end of the file. Null if the file handle is closed.
Acceptable values are: null | number
size
Literal type: union
A size of the file in bytes or null if the file handle is closed.
Acceptable values are: null | number
FileHandle Methods
close()
Closes the file handle. This allows the file to be deleted, moved or read by a different process. Subsequent calls to readBytes or writeBytes will throw an error.
Returns:
void
readBytes(length)
Parameter	Type	Description
length	number	The number of bytes to read.

Reads the specified amount of bytes from the file at the current offset.
Returns:
Uint8Array
writeBytes(bytes)
Parameter	Type	Description
bytes	Uint8Array
A Uint8Array array containing bytes to write.

Writes the specified bytes to the file at the current offset.
Returns:
void
Paths
Type: Class extends PathUtilities
Paths Properties
appleSharedContainers
Type: Record<string, Directory>
cache
Type: Directory
A property containing the cache directory – a place to store files that can be deleted by the system when the device runs low on storage.
document
Type: Directory
A property containing the document directory – a place to store files that are safe from being deleted by the system.
Paths Methods
basename(path, ext)
Parameter	Type	Description
path	string | File | Directory
The path to get the base name from.
ext(optional)	string	An optional file extension.

Returns the base name of a path.
Returns:
string
A string representing the base name.
dirname(path)
Parameter	Type	Description
path	string | File | Directory
The path to get the directory name from.

Returns the directory name of a path.
Returns:
string
A string representing the directory name.
extname(path)
Parameter	Type	Description
path	string | File | Directory
The path to get the extension from.

Returns the extension of a path.
Returns:
string
A string representing the extension.
isAbsolute(path)
Parameter	Type	Description
path	string | File | Directory
The path to check.

Checks if a path is absolute.
Returns:
boolean
true if the path is absolute, false otherwise.
join(...paths)
Parameter	Type	Description
...paths	(string | File | Directory)[]
An array of path segments.

Joins path segments into a single path.
Returns:
string
A string representing the joined path.
normalize(path)
Parameter	Type	Description
path	string | File | Directory
The path to normalize.

Normalizes a path.
Returns:
string
A string representing the normalized path.
parse(path)
Parameter	Type	Description
path	string | File | Directory
The path to parse.

Parses a path into its components.
Returns:
{
  base: string, 
  dir: string, 
  ext: string, 
  name: string, 
  root: string
}
An object containing the parsed path components.
relative(from, to)
Parameter	Type	Description
from	string | File | Directory
The base path.
to	string | File | Directory
The relative path.

Resolves a relative path to an absolute path.
Returns:
string
A string representing the resolved path.
Types
CreateOptions
Property	Type	Description
intermediates(optional)	boolean	Whether to create intermediate directories if they do not exist.
Default:false
overwrite(optional)	boolean	Whether to overwrite the file or directory if it exists.
Default:false

#33

Expo Fingerprint

GitHub

npm

A library to generate a fingerprint from a React Native project.
Node
Bundled version:
~0.13.1
________________________________________
@expo/fingerprint provides an API to generate a fingerprint (hash) of your project for use in determining compatibility between the native layer and JavaScript layer of your app. The hash calculation is configurable, but is by default derived from hashing app dependencies, custom native code, native project files, and configuration.
Installation
@expo/fingerprint is included with expo and expo-updates by default.
If you wish to use @expo/fingerprint as a standalone package, you can install it by running the command:
Terminal
Copy
- npx expo install @expo/fingerprint
CLI Usage
Terminal
Copy
- npx @expo/fingerprint --help
Configuration
@expo/fingerprint provides defaults that should work for most projects, but also provides a few ways to configure the fingerprinting process to better fit your app structure and workflow.
.fingerprintignore
Placed in your project root, .fingerprintignore is a .gitignore-like ignore mechanism used to exclude files from hash calculation. It behaves similarly but instead uses minimatch for pattern matching which has some limitations (see documentation for ignorePaths under Options).
For example, to skip a folder but keep some files:
# Ignore the entire /app/ios folder
/app/ios/**/*

# But still keep /app/ios/Podfile and /app/ios/Podfile.lock
!/app/ios/Podfile
!/app/ios/Podfile.lock
fingerprint.config.js
Placed in your project root, fingerprint.config.js allows you to specify custom hash calculation configuration beyond what is configurable in the .fingerprintignore. For supported configurations, see Config and SourceSkips.
Below is an example fingerprint.config.js configuration, assuming you have @expo/fingerprint installed as a direct dependency:
fingerprint.config.js
Copy
/** @type {import('@expo/fingerprint').Config} */
const config = {
  sourceSkips: [
    'ExpoConfigRuntimeVersionIfString',
    'ExpoConfigVersions',
    'PackageJsonAndroidAndIosScriptsIfNotContainRun',
  ],
};
module.exports = config;
If you are using @expo/fingerprint through expo (where @expo/fingerprint is installed as a transitive dependency), you can import fingerprint from expo/fingerprint:
/** @type {import('expo/fingerprint').Config} */
Advanced: Customize sources before fingerprint hashing
•	
•	
•	
Limitations
Limited support for @expo/config-plugins raw functions
1.	
2.	
•	
•	
API
import * as Fingerprint from '@expo/fingerprint';
Constants
Fingerprint.DEFAULT_IGNORE_PATHS
Type: string[]
Fingerprint.DEFAULT_SOURCE_SKIPS
Type: PackageJsonAndroidAndIosScriptsIfNotContainRun
Methods
Fingerprint.createFingerprintAsync(projectRoot, options)
Parameter	Type
projectRoot	string
options(optional)	Options

Create a fingerprint for a project.
Returns:
Promise<Fingerprint>
Example
const fingerprint = await createFingerprintAsync('/app');
console.log(fingerprint);
Fingerprint.createProjectHashAsync(projectRoot, options)
Parameter	Type
projectRoot	string
options(optional)	Options

Create a native hash value for a project.
Returns:
Promise<string>
Example
const hash = await createProjectHashAsync('/app');
console.log(hash);
Fingerprint.diffFingerprintChangesAsync(fingerprint, projectRoot, options)
Parameter	Type
fingerprint	Fingerprint

projectRoot	string
options(optional)	Options

Diff the fingerprint with the fingerprint of the provided project.
Returns:
Promise<FingerprintDiffItem[]>
Example
// Create a fingerprint for the project
const fingerprint = await createFingerprintAsync('/app');

// Make some changes to the project

// Calculate the diff
const diff = await diffFingerprintChangesAsync(fingerprint, '/app');
console.log(diff);
Fingerprint.diffFingerprints(fingerprint1, fingerprint2)
Parameter	Type
fingerprint1	Fingerprint

fingerprint2	Fingerprint


Diff two fingerprints. The implementation assumes that the sources are sorted.
Returns:
FingerprintDiffItem[]
Example
// Create a fingerprint for the project
const fingerprint = await createFingerprintAsync('/app');

// Make some changes to the project

// Create a fingerprint again
const fingerprint2 = await createFingerprintAsync('/app');
const diff = await diffFingerprints(fingerprint, fingerprint2);
console.log(diff);
Interfaces
DebugInfoContents
Property	Type	Description
hash	string	-
isTransformed(optional)	boolean	Indicates whether the source is transformed by fileHookTransform.
DebugInfoDir
Property	Type	Description
children	(undefined | DebugInfoFile | DebugInfoDir)[]
-
hash	string	-
path	string	-
DebugInfoFile
Property	Type	Description
hash	string	-
isTransformed(optional)	boolean	Indicates whether the source is transformed by fileHookTransform.
path	string	-
Fingerprint
Property	Type	Description
hash	string	The final hash value of the whole project fingerprint.
sources	FingerprintSource[]
Sources and their hash values from which the project fingerprint was generated.
HashResultContents
Property	Type	Description
debugInfo(optional)	DebugInfoContents
-
hex	string	-
id	string	-
type	'contents'	-
HashResultDir
Property	Type	Description
debugInfo(optional)	DebugInfoDir
-
hex	string	-
id	string	-
type	'dir'	-
HashResultFile
Property	Type	Description
debugInfo(optional)	DebugInfoFile
-
hex	string	-
id	string	-
type	'file'	-
HashSourceContents
Property	Type	Description
contents	string | Buffer
-
id	string	-
reasons	string[]	Reasons of this source coming from.
type	'contents'	-
HashSourceDir
Property	Type	Description
filePath	string	-
reasons	string[]	Reasons of this source coming from.
type	'dir'	-
HashSourceFile
Property	Type	Description
filePath	string	-
reasons	string[]	Reasons of this source coming from.
type	'file'	-
Options
Property	Type	Description
concurrentIoLimit(optional)	number	I/O concurrency limit.
Default:The number of CPU cores.
debug(optional)	boolean	Whether to include verbose debug info in source output. Useful for debugging.
dirExcludes(optional)	string[]	Deprecated Use ignorePaths instead.
Exclude specified directories from hashing. The supported pattern is the same as glob(). Default is ['android/build', 'android/app/build', 'android/app/.cxx', 'ios/Pods'].
enableReactImportsPatcher(optional)	boolean	Enable ReactImportsPatcher to transform imports from React of the form #import "RCTBridge.h" to #import <React/RCTBridge.h>. This is useful when you want to have a stable fingerprint for Expo projects, since expo-modules-autolinking will change the import style on iOS.
Default:true for Expo SDK 51 and lower.
extraSources(optional)	HashSource[]
Additional sources for hashing.
fileHookTransform(optional)	FileHookTransformFunction
A custom hook function to transform file content sources before hashing.
hashAlgorithm(optional)	string	The algorithm to use for crypto.createHash().
Default:'sha1'
ignorePaths(optional)	string[]	Ignore files and directories from hashing. The supported pattern is the same as glob().
Please note that the pattern matching is slightly different from gitignore. Partial matching is unsupported. For example, build does not match android/build; instead, use '**' + '/build'.
See: minimatch implementations for further reference.
Fingerprint comes with implicit default ignorePaths defined in Options.DEFAULT_IGNORE_PATHS. If you want to override the default ignorePaths, use ! prefix in ignorePaths.
platforms(optional)	Platform[]
Limit native files to those for specified platforms.
Default:['android', 'ios']
silent(optional)	boolean	Whether running the functions should mute all console output. This is useful when fingerprinting is being done as part of a CLI that outputs a fingerprint and outputting anything else pollutes the results.
sourceSkips(optional)	SourceSkips
Skips some sources from fingerprint. Value is the result of bitwise-OR'ing desired values of SourceSkips.
Default:DEFAULT_SOURCE_SKIPS
useRNCoreAutolinkingFromExpo(optional)	boolean	Use the react-native core autolinking sources from expo-modules-autolinking rather than @react-native-community/cli.
Default:true for Expo SDK 52 and higher.
Types
Config
Supported options for use in fingerprint.config.js
Type: Pick<Options, 'concurrentIoLimit' | 'hashAlgorithm' | 'ignorePaths' | 'extraSources' | 'enableReactImportsPatcher' | 'useRNCoreAutolinkingFromExpo' | 'debug' | 'fileHookTransform'> extended by:
Property	Type	Description
sourceSkips(optional)	SourceSkips | SourceSkipsKeys[]
-
DebugInfo
Literal Type: union
Acceptable values are: DebugInfoFile | DebugInfoDir | DebugInfoContents
FileHookTransformFunction(source, chunk, isEndOfFile, encoding)
Hook function to transform file content sources before hashing.
Parameter	Type
source	FileHookTransformSource

chunk	Buffer | string | null

isEndOfFile	boolean
encoding	BufferEncoding

Returns:
Buffer | string | null
FileHookTransformSource
The source parameter for FileHookTransformFunction.
Type: object shaped as below:
Property	Type	Description
filePath	string	-
type	'file'	-
Or object shaped as below:
Property	Type	Description
id	string	-
type	'contents'	-
FingerprintDiffItem
Type: object shaped as below:
Property	Type	Description
addedSource	FingerprintSource
The added source.
op	'added'	The operation type of the diff item.
Or object shaped as below:
Property	Type	Description
op	'removed'	The operation type of the diff item.
removedSource	FingerprintSource
The removed source.
Or object shaped as below:
Property	Type	Description
afterSource	FingerprintSource
The source after.
beforeSource	FingerprintSource
The source before.
op	'changed'	The operation type of the diff item.
FingerprintSource
Type: HashSource extended by:
Property	Type	Description
debugInfo(optional)	DebugInfo
Debug info from the hashing process. Differs based on source type. Designed to be consumed by humans as opposed to programmatically.
hash	string | null	Hash value of the source. If the source is excluded the value will be null.
HashResult
Literal Type: union
Acceptable values are: HashResultFile | HashResultDir | HashResultContents
HashSource
Literal Type: union
Acceptable values are: HashSourceFile | HashSourceDir | HashSourceContents
Platform
Literal Type: string
Acceptable values are: 'android' | 'ios'
Enums
SourceSkips
Bitmask of values that can be used to skip certain parts of the sourcers when generating a fingerprint.
None
SourceSkips.None ＝ 0
Skip nothing
ExpoConfigVersions
SourceSkips.ExpoConfigVersions ＝ 1
Versions in app.json, including Android versionCode and iOS buildNumber
ExpoConfigRuntimeVersionIfString
SourceSkips.ExpoConfigRuntimeVersionIfString ＝ 2
runtimeVersion in app.json if it is a string
ExpoConfigNames
SourceSkips.ExpoConfigNames ＝ 4
App names in app.json, including shortName and description
ExpoConfigAndroidPackage
SourceSkips.ExpoConfigAndroidPackage ＝ 8
Android package name in app.json
ExpoConfigIosBundleIdentifier
SourceSkips.ExpoConfigIosBundleIdentifier ＝ 16
iOS bundle identifier in app.json
ExpoConfigSchemes
SourceSkips.ExpoConfigSchemes ＝ 32
Schemes in app.json
ExpoConfigEASProject
SourceSkips.ExpoConfigEASProject ＝ 64
EAS project information in app.json
ExpoConfigAssets
SourceSkips.ExpoConfigAssets ＝ 128
Assets in app.json, including icons and splash assets
ExpoConfigAll
SourceSkips.ExpoConfigAll ＝ 256
Skip the whole ExpoConfig. Prefer the other ExpoConfig source skips when possible and use this flag with caution. This will potentially ignore some native changes that should be part of most fingerprints. E.g., adding a new config plugin, changing the app icon, or changing the app name.
PackageJsonAndroidAndIosScriptsIfNotContainRun
SourceSkips.PackageJsonAndroidAndIosScriptsIfNotContainRun ＝ 512
package.json scripts if android and ios items do not contain "run". Because prebuild will change the scripts in package.json, this is useful to generate a consistent fingerprint before and after prebuild.
PackageJsonScriptsAll
SourceSkips.PackageJsonScriptsAll ＝ 1024
Skip the whole scripts section in the project's package.json.
GitIgnore
SourceSkips.GitIgnore ＝ 2048
Skip .gitignore files.
ExpoConfigExtraSection
SourceSkips.ExpoConfigExtraSection ＝ 4096
The extra section in app.json

#34

Expo Font

GitHub

npm

A library that allows loading fonts at runtime and using them in React Native components.
Android
iOS
tvOS
Web
Bundled version:
~13.3.1
________________________________________
expo-font allows loading fonts from the web and using them in React Native components. See more detailed usage information in the Fonts guide.
Installation
Terminal
Copy
- npx expo install expo-font
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration in app config
There are two ways to add fonts to your app: using the expo-font config plugin (recommended) or loading them at runtime.
The plugin allows you to embed font files at build time which is more efficient than useFonts or loadAsync. After you set up the config plugin and run prebuild, you can render custom fonts right away. The plugin can be configured in different ways, see the Fonts guide on how to use it.
Example app.json with config plugin
app.json
Copy
{
  "expo": {
    "plugins": [
      [
        "expo-font",
        {
          "fonts": ["./path/to/file.ttf"],
          "android": {
            "fonts": [
              {
                "fontFamily": "Source Serif 4",
                "fontDefinitions": [
                  {
                    "path": "./path/to/SourceSerif4-ExtraBold.ttf",
                    "weight": 800
                  }
                ]
              }
            ]
          }
        }
      ]
    ]
  }
}
Show More
Configurable properties
Name	Default	Description
fonts	[]	An array of font definitions to link to the native project. The paths should be relative to the project root. On Android, the file name becomes the font family name. On iOS, the font family name is always taken directly from the font file and may not be the same as the file name — follow the naming advice or use getLoadedFonts to see what fonts are available.

android	[]	An array of font definitions to link to the native project on Android. Use the object syntax to embed xml fonts with custom family name.
ios	[]	An array of font file paths to link to the native project on iOS. The font family name is taken directly from the font file.
Are you using this library in an existing React Native app?
•	
•	
Usage
If you don't want to use the config plugin, you can load a font at runtime with the useFonts hook, as shown in the snippet:
Example of loading and using a custom font
Copy
Open in Snack
import { useFonts } from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';
import { useEffect } from 'react';
import { Text, View, StyleSheet } from 'react-native';

SplashScreen.preventAutoHideAsync();

export default function App() {
  // Use `useFonts` only if you can't use the config plugin.
  const [loaded, error] = useFonts({
    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),
  });

  useEffect(() => {
    if (loaded || error) {
      SplashScreen.hideAsync();
    }
  }, [loaded, error]);

  if (!loaded && !error) {
    return null;
  }

  return (
    <View style={styles.container}>
      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>
      <Text style={{ fontSize: 30 }}>Platform Default</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
Show More
API
import * as Font from 'expo-font';
Hooks
useFonts(map)
Parameter	Type	Description
map	string | Record<string, FontSource>
A map of fontFamilys to FontSources. After loading the font you can use the key in the fontFamily style prop of a Text element.

Load a map of fonts with loadAsync. This returns a boolean if the fonts are loaded and ready to use. It also returns an error if something went wrong, to use in development.
Note, the fonts are not "reloaded" when you dynamically change the font map.
Returns:
[boolean, null | Error]
•	loaded (boolean) - A boolean to detect if the font for fontFamily has finished loading.
•	error (Error | null) - An error encountered when loading the fonts.
Example
const [loaded, error] = useFonts({ ... });
Methods
getLoadedFonts()
Synchronously get all the fonts that have been loaded. This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using loadAsync.
Returns:
string[]
Returns array of strings which you can use as fontFamily style prop.
isLoaded(fontFamily)
Parameter	Type	Description
fontFamily	string	The name used to load the FontResource.

Synchronously detect if the font for fontFamily has finished loading.
Returns:
boolean
Returns true if the font has fully loaded.
isLoading(fontFamily)
Parameter	Type	Description
fontFamily	string	The name used to load the FontResource.

Synchronously detect if the font for fontFamily is still being loaded.
Returns:
boolean
Returns true if the font is still loading.
loadAsync(fontFamilyOrFontMap, source)
Parameter	Type	Description
fontFamilyOrFontMap	string | Record<string, FontSource>
String or map of values that can be used as the fontFamily style prop with React Native Text elements.
source(optional)	FontSource
The font asset that should be loaded into the fontFamily namespace.

An efficient method for loading fonts from static or remote resources which can then be used with the platform's native text elements. In the browser, this generates a @font-face block in a shared style sheet for fonts. No CSS is needed to use this method.
Note: We recommend using the config plugin instead whenever possible.
Returns:
Promise<void>
Returns a promise that fulfils when the font has loaded. Often you may want to wrap the method in a try/catch/finally to ensure the app continues if the font fails to load.
renderToImageAsync(glyphs, options)
Only for: 
Android
iOS


Parameter	Type	Description
glyphs	string	Text to be exported.
options(optional)	RenderToImageOptions
RenderToImageOptions.

Creates an image with provided text.
Returns:
Promise<string>
Promise which fulfils with uri to image.
Types
FontResource
An object used to dictate the resource that is loaded into the provided font namespace when used with loadAsync.
Property	Type	Description
default(optional)	string	-
display(optional)	FontDisplay
Only for: 
Web


Sets the font-display property for a given typeface in the browser.

uri(optional)	string | number	-
FontSource
Literal Type: union
The different types of assets you can provide to the loadAsync() function. A font source can be a URI, a module ID, or an Expo Asset.
Acceptable values are: string | number | Asset | FontResource
Enums
FontDisplay
Only for: 
Web


Sets the font-display for a given typeface. The default font value on web is FontDisplay.AUTO. Even though setting the fontDisplay does nothing on native platforms, the default behavior emulates FontDisplay.SWAP on flagship devices like iOS, Samsung, Pixel, etc. Default functionality varies on One Plus devices. In the browser this value is set in the generated @font-face CSS block and not as a style property meaning you cannot dynamically change this value based on the element it's used in.
AUTO
FontDisplay.AUTO ＝ "auto"
(Default) The font display strategy is defined by the user agent or platform. This generally defaults to the text being invisible until the font is loaded. Good for buttons or banners that require a specific treatment.
BLOCK
FontDisplay.BLOCK ＝ "block"
The text will be invisible until the font has loaded. If the font fails to load then nothing will appear - it's best to turn this off when debugging missing text.
FALLBACK
FontDisplay.FALLBACK ＝ "fallback"
Splits the behavior between SWAP and BLOCK. There will be a 100ms timeout where the text with a custom font is invisible, after that the text will either swap to the styled text or it'll show the unstyled text and continue to load the custom font. This is good for buttons that need a custom font but should also be quickly available to screen-readers.
OPTIONAL
FontDisplay.OPTIONAL ＝ "optional"
This works almost identically to FALLBACK, the only difference is that the browser will decide to load the font based on slow connection speed or critical resource demand.
SWAP
FontDisplay.SWAP ＝ "swap"
Fallback text is rendered immediately with a default font while the desired font is loaded. This is good for making the content appear to load instantly and is usually preferred.
Error codes
Code	Description
ERR_FONT_API	If the arguments passed to loadAsync are invalid.
ERR_FONT_SOURCE	The provided resource was of an incorrect type.
ERR_WEB_ENVIRONMENT	The browser's document element doesn't support injecting fonts.
ERR_DOWNLOAD	Failed to download the provided resource.
ERR_FONT_FAMILY	Invalid font family name was provided.
ERR_UNLOAD	Attempting to unload fonts that haven't finished loading yet.

#35

Expo GLView

GitHub

npm

A library that provides GLView that acts as an OpenGL ES render target and provides GLContext. Useful for rendering 2D and 3D graphics.
Android
iOS
Web
Bundled version:
~15.1.6
________________________________________
expo-gl provides a View that acts as an OpenGL ES render target, useful for rendering 2D and 3D graphics. On mounting, an OpenGL ES context is created. Its drawing buffer is presented as the contents of the View every frame.
Installation
Terminal
Copy
- npx expo install expo-gl
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Basic GL usage
Copy
Open in Snack
import { View } from 'react-native';
import { GLView } from 'expo-gl';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />
    </View>
  );
}

function onContextCreate(gl) {
  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  gl.clearColor(0, 1, 1, 1);

  // Create vertex shader (shape & position)
  const vert = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(
    vert,
    `
    void main(void) {
      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);
      gl_PointSize = 150.0;
    }
  `
  );
  gl.compileShader(vert);

  // Create fragment shader (color)
  const frag = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(
    frag,
    `
    void main(void) {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
  `
  );
  gl.compileShader(frag);

  // Link together into a program
  const program = gl.createProgram();
  gl.attachShader(program, vert);
  gl.attachShader(program, frag);
  gl.linkProgram(program);
  gl.useProgram(program);

  gl.clear(gl.COLOR_BUFFER_BIT);
  gl.drawArrays(gl.POINTS, 0, 1);

  gl.flush();
  gl.endFrameEXP();
}
Show More
High-level APIs
Since the WebGL API is quite low-level, it can be helpful to use higher-level graphics APIs rendering through a GLView underneath. The following libraries integrate popular graphics APIs:
•	expo-three for three.js
•	expo-processing for processing.js
Any WebGL-supporting library that expects a WebGLRenderingContext could be used. Some times such libraries assume a web JavaScript context (such as assuming document). Usually this is for resource loading or event handling, with the main rendering logic still only using pure WebGL. So these libraries can usually still be used with a couple workarounds. The Expo-specific integrations above include workarounds for some popular libraries.
Integration with Reanimated worklets
To use this API inside Reanimated worklet, you need to pass the GL context ID to the worklet and recreate the GL object like in the example below.
GL usage in reanimated worklet
Copy
Open in Snack
import { View } from 'react-native';
import { runOnUI } from 'react-native-reanimated';
import { GLView } from 'expo-gl';

function render(gl) {
  'worklet';
  // add your WebGL code here
}

function onContextCreate(gl) {
  runOnUI((contextId: number) => {
    'worklet';
    const gl = GLView.getWorkletContext(contextId);
    render(gl);
  })(gl.contextId);
}

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView
        style={{ width: 300, height: 300 }}
        enableExperimentalWorkletSupport
        onContextCreate={onContextCreate}
      />
    </View>
  );
}
Show More
For more in-depth example on how to use expo-gl with Reanimated and Gesture Handler you can check this example.
Limitations
Worklet runtime is imposing some limitations on the code that runs inside it, so if you have existing WebGL code, it'll likely require some modifications to run inside a worklet thread.
•	Third-party libraries like Pixi.js or Three.js won't work inside the worklet, you can only use functions that have 'worklet' added at the start.
•	If you need to load some assets to pass to the WebGL code, it needs to be done on the main thread and passed via some reference to the worklet. If you are using expo-assets you can just pass asset object returned by Asset.fromModule or from hook useAssets to the runOnUI function.
•	To implement a rendering loop you need to use requestAnimationFrame, APIs like setTimeout are not supported.
•	It's supported only on Android and iOS, it doesn't work on Web.
Check Reanimated documentation to learn more.
Remote debugging and GLView
This API does not function as intended with remote debugging enabled. The React Native debugger runs JavaScript on your computer, not the mobile device. GLView requires synchronous native calls that are not supported in Chrome.
API
import { GLView } from 'expo-gl';
Component
GLView
Type: React.Component<GLViewProps>
A View that acts as an OpenGL ES render target. On mounting, an OpenGL ES context is created. Its drawing buffer is presented as the contents of the View every frame.
GLViewProps
enableExperimentalWorkletSupport
Type: boolean • Default: false
Enables support for interacting with a gl object from code running on the Reanimated worklet thread.
msaaSamples
Only for: 
iOS


Type: number • Default: 4
GLView can enable iOS's built-in multisampling. This prop specifies the number of samples to use. Setting this to 0 turns off multisampling.
onContextCreate
Type: (gl: ExpoWebGLRenderingContext) => void
A function that will be called when the OpenGL ES context is created. The function is passed a single argument gl that extends a WebGLRenderingContext interface.
Inherited Props
•	ViewProps
Static Methods
createContextAsync()
Imperative API that creates headless context which is devoid of underlying view. It's useful for headless rendering or in case you want to keep just one context per application and share it between multiple components. It is slightly faster than usual context as it doesn't swap framebuffers and doesn't present them on the canvas, however it may require you to take a snapshot in order to present its results. Also, keep in mind that you need to set up a viewport and create your own framebuffer and texture that you will be drawing to, before you take a snapshot.
Returns:
Promise<ExpoWebGLRenderingContext>
A promise that resolves to WebGL context object. See WebGL API for more details.
destroyContextAsync(exgl)
Parameter	Type	Description
exgl(optional)	number | ExpoWebGLRenderingContext
WebGL context to destroy.

Destroys given context.
Returns:
Promise<boolean>
A promise that resolves to boolean value that is true if given context existed and has been destroyed successfully.
takeSnapshotAsync(exgl, options)
Parameter	Type	Description
exgl(optional)	number | ExpoWebGLRenderingContext
WebGL context to take a snapshot from.
options(optional)	SnapshotOptions
-

Takes a snapshot of the framebuffer and saves it as a file to app's cache directory.
Returns:
Promise<GLSnapshot>
A promise that resolves to GLSnapshot object.
Component Methods
createCameraTextureAsync(cameraRefOrHandle)
Parameter	Type
cameraRefOrHandle	ComponentOrHandle


Returns:
Promise<WebGLTexture>
destroyObjectAsync(glObject)
Parameter	Type
glObject	WebGLObject


Returns:
Promise<boolean>
startARSessionAsync()
Returns:
Promise<any>
takeSnapshotAsync(options)
Parameter	Type
options(optional)	SnapshotOptions


Same as static takeSnapshotAsync(), but uses WebGL context that is associated with the view on which the method is called.
Returns:
Promise<GLSnapshot>
Methods
GLView.getWorkletContext(contextId)
Parameter	Type
contextId	number

Returns:
ExpoWebGLRenderingContext | undefined
Interfaces
ExpoWebGLRenderingContext
Extends: WebGL2RenderingContext
Property	Type	Description
contextId	number	-
ExpoWebGLRenderingContext Methods
__expoSetLogging(option)
Parameter	Type
option	GLLoggingOption


Returns:
void
_expo_texImage2D(...props)
Parameter	Type
...props	any[]

Returns:
void
_expo_texSubImage2D(...props)
Parameter	Type
...props	any[]

Returns:
void
endFrameEXP()
Returns:
void
flushEXP()
Returns:
void
Types
ComponentOrHandle
Literal Type: union
Acceptable values are: null | number | Component<any, any> | ComponentClass<any>
GLSnapshot
Property	Type	Description
height	number	Height of the snapshot.
localUri	string	Synonym for uri. Makes snapshot object compatible with texImage2D.
uri	string | Blob | null
URI to the snapshot.
width	number	Width of the snapshot.
SnapshotOptions
Property	Type	Description
compress(optional)	number	A value in range 0 to 1.0 specifying compression level of the result image. 1.0 means no compression and 0 the highest compression.
Default:1.0
flip(optional)	boolean	Whether to flip the snapshot vertically.
Default:false
format(optional)	'jpeg' | 'png' | 'webp'	Specifies what type of compression should be used and what is the result file extension. PNG compression is lossless but slower, JPEG is faster but the image has visible artifacts.
Note: When using WebP format, the iOS version will print a warning, and generate a 'png' file instead. It is recommended to use platform-specific code in this case.
Default:'jpeg'
framebuffer(optional)	WebGLFramebuffer
Specify the framebuffer that we will be reading from. Defaults to underlying framebuffer that is presented in the view or the current framebuffer if context is headless.
rect(optional)	{
  height: number, 
  width: number, 
  x: number, 
  y: number
}	Rect to crop the snapshot. It's passed directly to glReadPixels.
SurfaceCreateEvent
Property	Type	Description
nativeEvent	{
  exglCtxId: number
}	-
WebGLObject
Property	Type	Description
id	number	-
Enums
GLLoggingOption
DISABLED
GLLoggingOption.DISABLED ＝ 0
Disables logging entirely.
METHOD_CALLS
GLLoggingOption.METHOD_CALLS ＝ 1
Logs method calls, their parameters and results.
GET_ERRORS
GLLoggingOption.GET_ERRORS ＝ 2
Calls gl.getError() after each other method call and prints an error if any is returned. This option has a significant impact on the performance as this method is blocking.
RESOLVE_CONSTANTS
GLLoggingOption.RESOLVE_CONSTANTS ＝ 4
Resolves parameters of type number to their constant names.
TRUNCATE_STRINGS
GLLoggingOption.TRUNCATE_STRINGS ＝ 8
When this option is enabled, long strings will be truncated. It's useful if your shaders are really big and logging them significantly reduces performance.
ALL
GLLoggingOption.ALL ＝ 15
Enables all other options. It implies GET_ERRORS so be aware of the slowdown.
WebGL API
Once the component is mounted and the OpenGL ES context has been created, the gl object received through the onContextCreate prop becomes the interface to the OpenGL ES context, providing a WebGL API. It resembles a WebGL2RenderingContext in the WebGL 2 spec.
Some older Android devices may not support WebGL2 features. To check whether the device supports WebGL2 it's recommended to use gl instanceof WebGL2RenderingContext.
An additional method gl.endFrameEXP() is present, which notifies the context that the current frame is ready to present. This is similar to a 'swap buffers' API call in other OpenGL platforms.
The following WebGL2RenderingContext methods are currently unimplemented:
•	getFramebufferAttachmentParameter()
•	getRenderbufferParameter()
•	compressedTexImage2D()
•	compressedTexSubImage2D()
•	getTexParameter()
•	getUniform()
•	getVertexAttrib()
•	getVertexAttribOffset()
•	getBufferSubData()
•	getInternalformatParameter()
•	renderbufferStorageMultisample()
•	compressedTexImage3D()
•	compressedTexSubImage3D()
•	fenceSync()
•	isSync()
•	deleteSync()
•	clientWaitSync()
•	waitSync()
•	getSyncParameter()
•	getActiveUniformBlockParameter()
The pixels argument of texImage2D() must be null, an ArrayBuffer with pixel data, or an object of the form { localUri } where localUri is the file:// URI of an image in the device's file system. Thus, an Asset object is used once .downloadAsync() has been called on it (and completed) to fetch the resource.
For efficiency reasons, the current implementations of the methods don't perform type or bounds checking on their arguments. So, passing invalid arguments may cause a native crash. There are plans to update the API to perform argument checking in upcoming SDK versions.
Currently, the priority for error checking is low since engines generally don't rely on the OpenGL API to perform argument checking; otherwise, checks performed by the underlying OpenGL ES implementation are often sufficient.

#36

Expo Gyroscope

GitHub

npm

A library that provides access to the device's gyroscope sensor.
Android
iOS (device only)
Web
Bundled version:
~14.1.4
________________________________________
Gyroscope from expo-sensors provides access to the device's gyroscope sensor to respond to changes in rotation in three-dimensional space.
Installation
Terminal
Copy
- npx expo install expo-sensors
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
Basic Gyroscope usage
Copy
Open in Snack
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Gyroscope } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Gyroscope.setUpdateInterval(1000);
  const _fast = () => Gyroscope.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Gyroscope.addListener(gyroscopeData => {
        setData(gyroscopeData);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Gyroscope:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});
Show More
API
import { Gyroscope } from 'expo-sensors';
Classes
Gyroscope
Type: Class extends DeviceSensor<GyroscopeMeasurement>
A base class for subscribable sensors. The events emitted by this class are measurements specified by the parameter type Measurement.
Gyroscope Methods
addListener(listener)
Parameter	Type	Description
listener	Listener<GyroscopeMeasurement>
A callback that is invoked when a gyroscope update is available. When invoked, the listener is provided a single argument that is an GyroscopeMeasurement object.

Subscribe for updates to the gyroscope.
Returns:
EventSubscription
A subscription that you can call remove() on when you would like to unsubscribe the listener.
getListenerCount()
Returns the registered listeners count.
Returns:
number
getPermissionsAsync()
Checks user's permissions for accessing sensor.
Returns:
Promise<PermissionResponse>
hasListeners()
Returns boolean which signifies if sensor has any listeners registered.
Returns:
boolean
isAvailableAsync()
You should always check the sensor availability before attempting to use it.
Returns whether the gyroscope is enabled on the device.
On mobile web, you must first invoke Gyroscope.requestPermissionsAsync() in a user interaction (i.e. touch event) before you can use this module. If the status is not equal to granted then you should inform the end user that they may have to open settings.
On web this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the device orientation API disabled in Settings > Safari > Motion & Orientation Access. Some devices will also not fire if the site isn't hosted with HTTPS as DeviceMotion is now considered a secure API. There is no formal API for detecting the status of DeviceMotion so this API can sometimes be unreliable on web.
Returns:
Promise<boolean>
A promise that resolves to a boolean denoting the availability of the gyroscope.
removeAllListeners()
Removes all registered listeners.
Returns:
void
removeSubscription(subscription)
Parameter	Type	Description
subscription	EventSubscription	A subscription to remove.

Removes the given subscription.
Returns:
void
requestPermissionsAsync()
Asks the user to grant permissions for accessing sensor.
Returns:
Promise<PermissionResponse>
setUpdateInterval(intervalMs)
Parameter	Type	Description
intervalMs	number	Desired interval in milliseconds between sensor updates.
Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.
If you need an update interval less than 200ms, you should:
•	add android.permission.HIGH_SAMPLING_RATE_SENSORS to app.json permissions field
•	or if you are using bare workflow, add <uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS"/> to AndroidManifest.xml.

Set the sensor update interval.
Returns:
void
Interfaces
Subscription
A subscription object that allows to conveniently remove an event listener from the emitter.
Subscription Methods
remove()
Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.
Returns:
void
Types
GyroscopeMeasurement
Each of these keys represents the rotation along that particular axis measured in radians per second (rad/s).
Property	Type	Description
timestamp	number	Timestamp of the measurement in seconds.
x	number	Value of rotation in radians per second device reported in X axis.
y	number	Value of rotation in radians per second device reported in Y axis.
z	number	Value of rotation in radians per second device reported in Z axis.
PermissionExpiration
Literal Type: union
Permission expiration time. Currently, all permissions are granted permanently.
Acceptable values are: 'never' | number
PermissionResponse
An object obtained by permissions get and request functions.
Property	Type	Description
canAskAgain	boolean	Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.
expires	PermissionExpiration
Determines time when the permission expires.
granted	boolean	A convenience boolean that indicates if the permission is granted.
status	PermissionStatus
Determines the status of the permission.
Enums
PermissionStatus
DENIED
PermissionStatus.DENIED ＝ "denied"
User has denied the permission.
GRANTED
PermissionStatus.GRANTED ＝ "granted"
User has granted the permission.
UNDETERMINED
PermissionStatus.UNDETERMINED ＝ "undetermined"
User hasn't granted or denied the permission yet.

#37

Expo Haptics

GitHub

npm

A library that provides access to the system's vibration effects on Android, the haptics engine on iOS, and the Web Vibration API on web.
Android
iOS
Web
Bundled version:
~14.1.4
________________________________________
expo-haptics provides haptic (touch) feedback for:
•	Android devices using Vibrator system service.
•	iOS 10+ devices using the Taptic Engine.
•	Web platforms using the Web Vibration API.
On iOS, the Taptic engine will do nothing if any of the following conditions are true on a user's device:
•	Low Power Mode is enabled. This can be detected with expo-battery.
•	User disabled the Taptic Engine in settings.
•	iOS Camera is active (to prevent destabilization).
•	iOS dictation is active (to not disturb the microphone input).
On web, the library uses the Web Vibration API. Note the following:
•	The API must be supported by the browser (check browser compatibility)
•	The device must have vibration hardware
•	The user must grant permission to use vibration (usually automatic)
•	Some browsers may ignore vibration in certain contexts (for example, background tabs)
Installation
Terminal
Copy
- npx expo install expo-haptics
If you are installing this in an existing React Native app, make sure to install expo in your project.
Configuration
On Android, this library requires permission to control vibration on the device. The VIBRATE permission is added automatically.
Usage
Haptics usage
Copy
Open in Snack
import { StyleSheet, View, Text, Button } from 'react-native';
import * as Haptics from 'expo-haptics';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Haptics.selectionAsync</Text>
      <View style={styles.buttonContainer}>
        <Button title="Selection" onPress={() => Haptics.selectionAsync()} />
      </View>
      <Text style={styles.text}>Haptics.notificationAsync</Text>
      <View style={styles.buttonContainer}>
        <Button
          title="Success"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Success
              )
          }
        />
        <Button
          title="Error"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Error
              )
          }
        />
        <Button
          title="Warning"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Warning
              )
          }
        />
      </View>
      <Text style={styles.text}>Haptics.impactAsync</Text>
      <View style={styles.buttonContainer}>
        <Button
          title="Light"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)
          }
        />
        <Button
          title="Medium"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)
          }
        />
        <Button
          title="Heavy"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)
          }
        />
        <Button
          title="Rigid"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Rigid)
          }
        />
        <Button
          title="Soft"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Soft)
          }
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 16,
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 10,
    marginBottom: 30,
    justifyContent: 'space-between',
  },
});
Show More
API
import * as Haptics from 'expo-haptics';
Methods
Haptics.impactAsync(style)
Parameter	Type	Description
style(optional)	ImpactFeedbackStyle
A collision indicator that on Android is simulated using Vibrator and on iOS, it is directly mapped to UIImpactFeedbackStyle. You can use one of Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy, Rigid, Soft}.
Default:ImpactFeedbackStyle.Medium

Returns:
Promise<void>
A Promise which fulfils once native size haptics functionality is triggered.
See: Android's Vibrator API is not recommended for implementing haptics feedback. Instead, you should use performAndroidHapticsAsync, which is similar to iOS haptic feedback and does not require VIBRATE permission.
Haptics.notificationAsync(type)
Parameter	Type	Description
type(optional)	NotificationFeedbackType
A notification feedback type that on Android is simulated using Vibrator and iOS is directly mapped to UINotificationFeedbackType. You can use one of Haptics.NotificationFeedbackType.{Success, Warning, Error}.
Default:NotificationFeedbackType.Success

The kind of notification response used in the feedback.
Returns:
Promise<void>
A Promise which fulfils once native size haptics functionality is triggered.
Haptics.performAndroidHapticsAsync(type)
Only for: 
Android


Parameter	Type
type	AndroidHaptics


Use the device haptics engine to provide physical feedback to the user.
Returns:
Promise<void>
Haptics.selectionAsync()
Used to let a user know when a selection change has been registered.
Returns:
Promise<void>
A Promise which fulfils once native size haptics functionality is triggered.
Enums
AndroidHaptics
Only for: 
Android


Clock_Tick
AndroidHaptics.Clock_Tick ＝ "clock-tick"
The user has pressed either an hour or minute tick of a Clock.
Confirm
AndroidHaptics.Confirm ＝ "confirm"
A haptic effect to signal the confirmation or successful completion of a user interaction.
Context_Click
AndroidHaptics.Context_Click ＝ "context-click"
The user has performed a context click on an object.
Drag_Start
AndroidHaptics.Drag_Start ＝ "drag-start"
The user has started a drag-and-drop gesture. The drag target has just been "picked up".
Gesture_End
AndroidHaptics.Gesture_End ＝ "gesture-end"
The user has finished a gesture (for example, on the soft keyboard).
Gesture_Start
AndroidHaptics.Gesture_Start ＝ "gesture-start"
The user has started a gesture (for example, on the soft keyboard).
Keyboard_Press
AndroidHaptics.Keyboard_Press ＝ "keyboard-press"
The user has pressed a virtual or software keyboard key.
Keyboard_Release
AndroidHaptics.Keyboard_Release ＝ "keyboard-release"
The user has released a virtual keyboard key.
Keyboard_Tap
AndroidHaptics.Keyboard_Tap ＝ "keyboard-tap"
The user has pressed a soft keyboard key.
Long_Press
AndroidHaptics.Long_Press ＝ "long-press"
The user has performed a long press on an object that results in an action being performed.
No_Haptics
AndroidHaptics.No_Haptics ＝ "no-haptics"
No haptic feedback should be performed.
Reject
AndroidHaptics.Reject ＝ "reject"
A haptic effect to signal the rejection or failure of a user interaction.
Segment_Frequent_Tick
AndroidHaptics.Segment_Frequent_Tick ＝ "segment-frequent-tick"
The user is switching between a series of many potential choices. For example, minutes on a clock face or individual percentages. This constant is expected to be very soft, so as not to be uncomfortable when performed a lot in quick succession. If the device can't make a suitably soft vibration, then it may not make any vibration.
Segment_Tick
AndroidHaptics.Segment_Tick ＝ "segment-tick"
The user is switching between a series of potential choices. For example, items in a list or discrete points on a slider.
Text_Handle_Move
AndroidHaptics.Text_Handle_Move ＝ "text-handle-move"
The user has performed a selection/insertion handle move on text field.
Toggle_Off
AndroidHaptics.Toggle_Off ＝ "toggle-off"
The user has toggled a switch or button into the off position.
Toggle_On
AndroidHaptics.Toggle_On ＝ "toggle-on"
The user has toggled a switch or button into the on position.
Virtual_Key
AndroidHaptics.Virtual_Key ＝ "virtual-key"
The user has pressed on a virtual on-screen key.
Virtual_Key_Release
AndroidHaptics.Virtual_Key_Release ＝ "virtual-key-release"
The user has released a virtual key.
ImpactFeedbackStyle
The mass of the objects in the collision simulated by a UIImpactFeedbackGenerator object UINotificationFeedbackStyle.
Heavy
ImpactFeedbackStyle.Heavy ＝ "heavy"
A collision between large, heavy user interface elements.
Light
ImpactFeedbackStyle.Light ＝ "light"
A collision between small, light user interface elements.
Medium
ImpactFeedbackStyle.Medium ＝ "medium"
A collision between moderately sized user interface elements.
Rigid
ImpactFeedbackStyle.Rigid ＝ "rigid"
A collision between user interface elements that are rigid, exhibiting a small amount of compression or elasticity.
Soft
ImpactFeedbackStyle.Soft ＝ "soft"
A collision between user interface elements that are soft, exhibiting a large amount of compression or elasticity.
NotificationFeedbackType
The type of notification feedback generated by a UINotificationFeedbackGenerator object. UINotificationFeedbackType.
Error
NotificationFeedbackType.Error ＝ "error"
A notification feedback type indicating that a task has failed.
Success
NotificationFeedbackType.Success ＝ "success"
A notification feedback type indicating that a task has completed successfully.
Warning
NotificationFeedbackType.Warning ＝ "warning"
A notification feedback type indicating that a task has produced a warning.

#38

Expo Image

GitHub

npm

A cross-platform and performant React component that loads and renders images.
Android
iOS
tvOS
Web
Bundled version:
~2.3.0
________________________________________
expo-image is a cross-platform React component that loads and renders images.
Main features:
•	Designed for speed
•	Support for many image formats (including animated ones)
•	Disk and memory caching
•	Supports BlurHash and ThumbHash - compact representations of a placeholder for an image
•	Transitioning between images when the source changes (no more flickering!)
•	Implements the CSS object-fit and object-position properties (see contentFit and contentPosition props)
•	Uses performant SDWebImage and Glide under the hood
Supported image formats
Format	Android	iOS	Web
WebP			
PNG / APNG			
AVIF			
HEIC			 not adopted yet

JPEG			
GIF			
SVG			
ICO			
ICNS			
Installation
Terminal
Copy
- npx expo install expo-image
If you are installing this in an existing React Native app, make sure to install expo in your project.
Usage
import { Image } from 'expo-image';
import { StyleSheet, View } from 'react-native';

const blurhash =
  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';

export default function App() {
  return (
    <View style={styles.container}>
      <Image
        style={styles.image}
        source="https://picsum.photos/seed/696/3000/2000"
        placeholder={{ blurhash }}
        contentFit="cover"
        transition={1000}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    flex: 1,
    width: '100%',
    backgroundColor: '#0553',
  },
});
Show More
API
import { Image } from 'expo-image';
Components
Image
Type: React.PureComponent<ImageProps>
Some props are from React Native Image that Expo Image supports (more or less) for easier migration, but all of them are deprecated and might be removed in the future.
ImageProps
accessibilityLabel
Optional • Type: string • Default: undefined
The text that's read by the screen reader when the user interacts with the image. Sets the the alt tag on web which is used for web crawlers and link traversal.
accessible
Only for: 
Android
iOS


Optional • Type: boolean • Default: false
When true, indicates that the view is an accessibility element. When a view is an accessibility element, it groups its children into a single selectable component.
On Android, the accessible property will be translated into the native isScreenReaderFocusable, so it's only affecting the screen readers behaviour.
allowDownscaling
Optional • Type: boolean • Default: true
Whether the image should be downscaled to match the size of the view container. Turning off this functionality could negatively impact the application's performance, particularly when working with large assets. However, it would result in smoother image resizing, and end-users would always have access to the highest possible asset quality.
Downscaling is never used when the contentFit prop is set to none or fill.
alt
Optional • Type: string • Default: undefined
The text that's read by the screen reader when the user interacts with the image. Sets the the alt tag on web which is used for web crawlers and link traversal. Is an alias for accessibilityLabel.
autoplay
Only for: 
Android
iOS


Optional • Type: boolean • Default: true
Determines if an image should automatically begin playing if it is an animated image.
blurRadius
Optional • Type: number • Default: 0
The radius of the blur in points, 0 means no blur effect. This effect is not applied to placeholders.
cachePolicy
Optional • Literal type: union • Default: 'disk'
Determines whether to cache the image and where: on the disk, in the memory or both.
•	'none' - Image is not cached at all.
•	'disk' - Image is queried from the disk cache if exists, otherwise it's downloaded and then stored on the disk.
•	'memory' - Image is cached in memory. Might be useful when you render a high-resolution picture many times. Memory cache may be purged very quickly to prevent high memory usage and the risk of out of memory exceptions.
•	'memory-disk' - Image is cached in memory, but with a fallback to the disk cache.
Acceptable values are: null | 'none' | 'disk' | 'memory' | 'memory-disk'
contentFit
Optional • Type: ImageContentFit • Default: 'cover'
Determines how the image should be resized to fit its container. This property tells the image to fill the container in a variety of ways; such as "preserve that aspect ratio" or "stretch up and take up as much space as possible". It mirrors the CSS object-fit property.
•	'cover' - The image is sized to maintain its aspect ratio while filling the container box. If the image's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit.
•	'contain' - The image is scaled down or up to maintain its aspect ratio while fitting within the container box.
•	'fill' - The image is sized to entirely fill the container box. If necessary, the image will be stretched or squished to fit.
•	'none' - The image is not resized and is centered by default. When specified, the exact position can be controlled with contentPosition prop.
•	'scale-down' - The image is sized as if none or contain were specified, whichever would result in a smaller concrete image size.
contentPosition
Optional • Type: ImageContentPosition • Default: 'center'
It is used together with contentFit to specify how the image should be positioned with x/y coordinates inside its own container. An equivalent of the CSS object-position property.
decodeFormat
Only for: 
Android


Optional • Type: ImageDecodeFormat • Default: 'argb'
The format in which the image data should be decoded. It's not guaranteed that the platform will use the specified format.
•	'argb' - The image is decoded into a 32-bit color space with alpha channel (https://developer.android.com/reference/android/graphics/Bitmap.Config#ARGB_8888).
•	'rgb' - The image is decoded into a 16-bit color space without alpha channel (https://developer.android.com/reference/android/graphics/Bitmap.Config#RGB_565).
Deprecated Provides compatibility for defaultSource from React Native Image. Use placeholder prop instead.
defaultSource
Optional • Literal type: union
Acceptable values are: null | ImageSource
enableLiveTextInteraction
Only for: 
iOS 16.0+


Optional • Type: boolean • Default: false
Enables Live Text interaction with the image. Check official Apple documentation for more details.
Deprecated Provides compatibility for fadeDuration from React Native Image. Instead use transition with the provided duration.
fadeDuration
Optional • Type: number
focusable
Only for: 
Android


Optional • Type: boolean • Default: false
Whether this View should be focusable with a non-touch input device and receive focus with a hardware keyboard.
Deprecated Provides compatibility for loadingIndicatorSource from React Native Image. Use placeholder prop instead.
loadingIndicatorSource
Optional • Literal type: union
Acceptable values are: null | ImageSource
onDisplay
Optional • Type: () => void
Called when the image view successfully rendered the source image.
onError
Optional • Type: (event: ImageErrorEventData) => void
Called on an image fetching error.
onLoad
Optional • Type: (event: ImageLoadEventData) => void
Called when the image load completes successfully.
onLoadEnd
Optional • Type: () => void
Called when the image load either succeeds or fails.
onLoadStart
Optional • Type: () => void
Called when the image starts to load.
onProgress
Optional • Type: (event: ImageProgressEventData) => void
Called when the image is loading. Can be called multiple times before the image has finished loading. The event object provides details on how many bytes were loaded so far and what's the expected total size.
placeholder
Optional • Literal type: union
An image to display while loading the proper image and no image has been displayed yet or the source is unset.
Note: The default value for placeholder's content fit is 'scale-down', which differs from the source image's default value. Using a lower-resolution placeholder may cause flickering due to scaling differences between it and the final image. To prevent this, you can set the placeholderContentFit to match the contentFit value.
Acceptable values are: null | string | number | ImageSource | SharedRef<'image'> | ImageSource[] | string[]
placeholderContentFit
Optional • Type: ImageContentFit • Default: 'scale-down'
Determines how the placeholder should be resized to fit its container. Available resize modes are the same as for the contentFit prop.
priority
Optional • Literal type: union • Default: 'normal'
Priorities for completing loads. If more than one load is queued at a time, the load with the higher priority will be started first. Priorities are considered best effort, there are no guarantees about the order in which loads will start or finish.
Acceptable values are: null | 'low' | 'normal' | 'high'
recyclingKey
Only for: 
Android
iOS


Optional • Literal type: union • Default: null
Changing this prop resets the image view content to blank or a placeholder before loading and rendering the final image. This is especially useful for any kinds of recycling views like FlashList to prevent showing the previous source before the new one fully loads.
Acceptable values are: null | string
Deprecated Provides compatibility for resizeMode from React Native Image. Note that "repeat" option is not supported at all. Use the more powerful contentFit and contentPosition props instead.
resizeMode
Optional • Literal type: string
Acceptable values are: 'cover' | 'contain' | 'center' | 'stretch' | 'repeat'
responsivePolicy
Only for: 
Web


Optional • Literal type: string • Default: 'static'
Controls the selection of the image source based on the container or viewport size on the web.
If set to 'static', the browser selects the correct source based on user's viewport width. Works with static rendering. Make sure to set the 'webMaxViewportWidth' property on each source for best results. For example, if an image occupies 1/3 of the screen width, set the 'webMaxViewportWidth' to 3x the image width. The source with the largest 'webMaxViewportWidth' is used even for larger viewports.
If set to 'initial', the component will select the correct source during mount based on container size. Does not work with static rendering.
If set to 'live', the component will select the correct source on every resize based on container size. Does not work with static rendering.
Acceptable values are: 'live' | 'initial' | 'static'
source
Optional • Literal type: union
The image source, either a remote URL, a local file resource or a number that is the result of the require() function. When provided as an array of sources, the source that fits best into the container size and is closest to the screen scale will be chosen. In this case it is important to provide width, height and scale properties.
Acceptable values are: null | string | number | ImageSource | SharedRef<'image'> | ImageSource[] | string[]
tintColor
Optional • Literal type: union • Default: null
A color used to tint template images (a bitmap image where only the opacity matters). The color is applied to every non-transparent pixel, causing the image’s shape to adopt that color. This effect is not applied to placeholders.
Acceptable values are: null | string
transition
Optional • Literal type: union
Describes how the image view should transition the contents when switching the image source.
If provided as a number, it is the duration in milliseconds of the 'cross-dissolve' effect.
Acceptable values are: null | number | ImageTransition
useAppleWebpCodec
Only for: 
iOS


Optional • Type: boolean • Default: true
Whether to use the Apple's default WebP codec.
Set this prop to false to use the official standard-compliant libwebp codec for WebP images. The default implementation from Apple is faster and uses less memory but may render animated images with incorrect blending or play them at the wrong framerate.
See: https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#awebp-coder
Inherited Props
•	Omit<ViewProps, 'style' | 'children'>
ImageBackground
Type: React.Element<ImageBackgroundProps>
ImageBackgroundProps
imageStyle
Optional • Type: StyleProp<ImageStyle>
Style object for the image
style
Optional • Type: StyleProp<ViewStyle>
The style of the image container
Inherited Props
•	Omit<ImageProps, 'style'>
Static Methods
clearDiskCache()
Only for: 
Android
iOS


Asynchronously clears all images from the disk cache.
Returns:
Promise<boolean>
A promise resolving to true when the operation succeeds. It may resolve to false on Android when the activity is no longer available. Resolves to false on Web.
clearMemoryCache()
Only for: 
Android
iOS


Asynchronously clears all images stored in memory.
Returns:
Promise<boolean>
A promise resolving to true when the operation succeeds. It may resolve to false on Android when the activity is no longer available. Resolves to false on Web.
generateBlurhashAsync(url, numberOfComponents)
Only for: 
iOS


Parameter	Type	Description
url	string	The URL of the image to generate a blurhash from.
numberOfComponents	[number, number] | {
  height: number, 
  width: number
}	The number of components to encode the blurhash with. Must be between 1 and 9. Defaults to [4, 3].

Asynchronously generates a Blurhash from an image.
Returns:
Promise<null | string>
A promise resolving to the blurhash string.
getCachePathAsync(cacheKey)
Only for: 
Android
iOS


Parameter	Type	Description
cacheKey	string	The cache key for the requested image. Unless you have set a custom cache key, this will be the source URL of the image.

Asynchronously checks if an image exists in the disk cache and resolves to the path of the cached image if it does.
Returns:
Promise<null | string>
A promise resolving to the path of the cached image. It will resolve to null if the image does not exist in the cache.
loadAsync(source, options)
Only for: 
Android
iOS
Web


Parameter	Type
source	string | number | ImageSource

options(optional)	ImageLoadOptions


Loads an image from the given source to memory and resolves to an object that references the native image instance.
Returns:
Promise<ImageRef>
prefetch(urls, cachePolicy)
Parameter	Type	Description
urls	string | string[]	A URL string or an array of URLs of images to prefetch.
cachePolicy(optional)	'disk' | 'memory' | 'memory-disk'	The cache policy for prefetched images.

Preloads images at the given URLs that can be later used in the image view. Preloaded images are cached to the memory and disk by default, so make sure to use disk (default) or memory-disk cache policy.
Returns:
Promise<boolean>
A promise resolving to true as soon as all images have been successfully prefetched. If an image fails to be prefetched, the promise will immediately resolve to false regardless of whether other images have finished prefetching.
prefetch(urls, options)
Parameter	Type	Description
urls	string | string[]	A URL string or an array of URLs of images to prefetch.
options(optional)	ImagePrefetchOptions
Options for prefetching images.

Preloads images at the given URLs that can be later used in the image view. Preloaded images are cached to the memory and disk by default, so make sure to use disk (default) or memory-disk cache policy.
Returns:
Promise<boolean>
A promise resolving to true as soon as all images have been successfully prefetched. If an image fails to be prefetched, the promise will immediately resolve to false regardless of whether other images have finished prefetching.
Component Methods
getAnimatableRef()
Returns:
null | View | Image
lockResourceAsync()
Only for: 
Android
iOS


Prevents the resource from being reloaded by locking it.
Returns:
Promise<void>
reloadAsync()
Only for: 
Android
iOS


Reloads the resource, ignoring lock.
Returns:
Promise<void>
startAnimating()
Only for: 
Android
iOS


Asynchronously starts playback of the view's image if it is animated.
Returns:
Promise<void>
stopAnimating()
Only for: 
Android
iOS


Asynchronously stops the playback of the view's image if it is animated.
Returns:
Promise<void>
unlockResourceAsync()
Only for: 
Android
iOS


Releases the lock on the resource, allowing it to be reloaded.
Returns:
Promise<void>
Hooks
useImage(source, options, dependencies)
Only for: 
Android
iOS
Web


Parameter	Type
source	string | number | ImageSource

options(optional)	ImageLoadOptions

dependencies(optional)	DependencyList


A hook that loads an image from the given source and returns a reference to the native image instance, or null until the first image is successfully loaded.
It loads a new image every time the uri of the provided source changes. To trigger reloads in some other scenarios, you can provide an additional dependency list.
Returns:
ImageRef | null
Example
import { useImage, Image } from 'expo-image';
import { Text } from 'react-native';

export default function MyImage() {
  const image = useImage('https://picsum.photos/1000/800', {
    maxWidth: 800,
    onError(error, retry) {
      console.error('Loading failed:', error.message);
    }
  });

  if (!image) {
    return <Text>Image is loading...</Text>;
  }

  return <Image source={image} style={{ width: image.width / 2, height: image.height / 2 }} />;
}
Classes
ImageRef
Type: Class extends SharedRef<'image'>
An object that is a reference to a native image instance – Drawable on Android and UIImage on iOS. Instances of this class can be passed as a source to the Image component in which case the image is rendered immediately since its native representation is already available in the memory.
ImageRef Properties
height
Read Only • Type: number
Logical height of the image. Multiply it by the value in the scale property to get the height in pixels.
isAnimated
Optional • Read Only • Type: boolean
Whether the referenced image is an animated image.
mediaType
Only for: 
iOS


Read Only • Literal type: union
Media type (also known as MIME type) of the image, based on its format. Returns null when the format is unknown or not supported.
Acceptable values are: null | string
nativeRefType
Type: string
The type of the native reference.
scale
Read Only • Type: number
On iOS, if you load an image from a file whose name includes the @2x modifier, the scale is set to 2.0. All other images are assumed to have a scale factor of 1.0. On Android, it calculates the scale based on the bitmap density divided by screen density.
On all platforms, if you multiply the logical size of the image by this value, you get the dimensions of the image in pixels.
width
Read Only • Type: number
Logical width of the image. Multiply it by the value in the scale property to get the width in pixels.
Types
ImageContentPosition
Specifies the position of the image inside its container. One value controls the x-axis and the second value controls the y-axis.
Additionally, it supports stringified shorthand form that specifies the edges to which to align the image content:
'center', 'top', 'right', 'bottom', 'left', 'top center', 'top right', 'top left', 'right center', 'right top', 'right bottom', 'bottom center', 'bottom right', 'bottom left', 'left center', 'left top', 'left bottom'.
If only one keyword is provided, then the other dimension is set to 'center' ('50%'), so the image is placed in the middle of the specified edge.
As an example, 'top right' is the same as { top: 0, right: 0 } and 'bottom' is the same as { bottom: 0, left: '50%' }.
Type: ImageContentPositionString or object shaped as below:
Property	Type	Description
right(optional)	ImageContentPositionValue
-
top(optional)	ImageContentPositionValue
-
Or object shaped as below:
Property	Type	Description
left(optional)	ImageContentPositionValue
-
top(optional)	ImageContentPositionValue
-
Or object shaped as below:
Property	Type	Description
bottom(optional)	ImageContentPositionValue
-
right(optional)	ImageContentPositionValue
-
Or object shaped as below:
Property	Type	Description
bottom(optional)	ImageContentPositionValue
-
left(optional)	ImageContentPositionValue
-
ImageContentPositionValue
Literal Type: union
A value that represents the relative position of a single axis.
If number, it is a distance in points (logical pixels) from the respective edge.
If string, it must be a percentage value where '100%' is the difference in size between the container and the image along the respective axis, or 'center' which is an alias for '50%' that is the default value. You can read more regarding percentages on the MDN docs for background-position that describes this concept well.
Acceptable values are: number | string | {number}% | {number} | 'center'
ImageErrorEventData
Property	Type	Description
error	string	-
ImageLoadEventData
Property	Type	Description
cacheType	'none' | 'disk' | 'memory'	-
source	{
  height: number, 
  isAnimated: boolean, 
  mediaType: string | null, 
  url: string, 
  width: number
}	-
ImageLoadOptions
An object with options for the useImage hook.
Property	Type	Description
maxHeight(optional)	number	Only for: 
iOS


If provided, the image will be automatically resized to not exceed this height in pixels, preserving its aspect ratio.
maxWidth(optional)	number	Only for: 
iOS


If provided, the image will be automatically resized to not exceed this width in pixels, preserving its aspect ratio.
onError(optional)	(error: Error, retry: () => void) => void	Function to call when the image has failed to load. In addition to the error, it also provides a function that retries loading the image.
ImagePrefetchOptions
Property	Type	Description
cachePolicy(optional)	'disk' | 'memory-disk' | 'memory'	The cache policy for prefetched images.
Default:'memory-disk'
headers(optional)	Record<string, string>	A map of headers to use when prefetching the images.
ImageProgressEventData
Property	Type	Description
loaded	number	-
total	number	-
ImageSource
Property	Type	Description
blurhash(optional)	string	A string used to generate the image placeholder. For example, placeholder={blurhash}. If uri is provided as the value of the source prop, this is ignored since the source can only have blurhash or uri.
When using the blurhash, you should also provide width and height (higher values reduce performance), otherwise their default value is 16. For more information, see woltapp/blurhash repository.

cacheKey(optional)	string	The cache key used to query and store this specific image. If not provided, the uri is used also as the cache key.
headers(optional)	Record<string, string>	An object representing the HTTP headers to send along with the request for a remote image. On web requires the Access-Control-Allow-Origin header returned by the server to include the current domain.
height(optional)	number | null	Can be specified if known at build time, in which case the value will be used to set the default <Image/> component dimension.
isAnimated(optional)	boolean	Only for: 
Android
iOS


Whether the image is animated (an animated GIF or WebP for example).
thumbhash(optional)	string	A string used to generate the image placeholder. For example, placeholder={thumbhash}. If uri is provided as the value of the source prop, this is ignored since the source can only have thumbhash or uri.
For more information, see thumbhash website.

uri(optional)	string	A string representing the resource identifier for the image, which could be an HTTPS address, a local file path, or the name of a static image resource.
webMaxViewportWidth(optional)	number	Only for: 
Web


The max width of the viewport for which this source should be selected. Has no effect if source prop is not an array or has only 1 element. Has no effect if responsivePolicy is not set to static. Ignored if blurhash or thumbhash is provided (image hashes are never selected if passed in an array).
width(optional)	number | null	Can be specified if known at build time, in which case the value will be used to set the default <Image/> component dimension.
ImageTransition
An object that describes the smooth transition when switching the image source.
Property	Type	Description
duration(optional)	number	The duration of the transition in milliseconds.
Default:0
effect(optional)	'cross-dissolve' | 'flip-from-top' | 'flip-from-right' | 'flip-from-bottom' | 'flip-from-left' | 'curl-up' | 'curl-down' | null	An animation effect used for transition.
Default:'cross-dissolve' On Android, only `'cross-dissolve'` is supported. On Web, `'curl-up'` and `'curl-down'` effects are not supported.
timing(optional)	'ease-in-out' | 'ease-in' | 'ease-out' | 'linear'	Specifies the speed curve of the transition effect and how intermediate values are calculated.
Default:'ease-in-out'
Generating a blurhash on a server
Images can significantly improve the visual experience, however, they can also slow down app/page loading times due to their large file sizes. To overcome this, you can create placeholder images using blurhash algorithm that provides an immersive experience while deferring the loading of the actual picture until later.
This guide demonstrates how to create a blurhash of an uploaded image on the backend using JavaScript and Express.js. The same techniques and principles apply to other languages and server technologies.
Start by installing a few dependencies: multer for handling multipart requests, sharp for converting files to a data buffer, and the official blurhash JavaScript package.
Terminal
Copy
- npm install multer sharp blurhash
Next, import all required functions from installed packages and initialize multer:
// Multer is a middleware for handling `multipart/form-data`.
const multer = require('multer');
// Sharp allows you to receive a data buffer from the uploaded image.
const sharp = require('sharp');
// Import the encode function from the blurhash package.
const { encode } = require('blurhash');

// Initialize `multer`.
const upload = multer();
Assuming the app is a variable that holds a reference to the Express server, an endpoint can be created that accepts an image and returns a JSON response containing the generated blurhash.
app.post('/blurhash', upload.single('image'), async (req, res) => {
  const { file } = req;
  // If the file is not available we're returning with error.
  if (file === null) {
    res.status(400).json({ message: 'Image is missing' });
    return;
  }

  // Users can specify number of components in each axes.
  const componentX = req.body.componentX ?? 4;
  const componentY = req.body.componentY ?? 3;

  // We're converting provided image to a byte buffer.
  // Sharp currently supports multiple common formats like JPEG, PNG, WebP, GIF, and AVIF.
  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({
    resolveWithObject: true,
  });

  const blurhash = encode(
    new Uint8ClampedArray(data),
    info.width,
    info.height,
    componentX,
    componentY
  );
  res.json({ blurhash });
});
Show More
Additionally, the request can include two parameters: componentX and componentY, are passed through the algorithm. These values can be calculated or hard-coded on the server or specified by the user. However, they must be within the range of 1 to 9 and have an aspect ratio similar to the uploaded image. A value of 9 will give the best results but may take longer to generate the hash.
The process of generating a blurhash can be accomplished in various languages and server technologies, similar to the one using JavaScript. The key step is to locate an encoder for your chosen language, which can often be found in the woltapp/blurhash repository. Once you have the encoder, you will need to obtain a representation of the image. Some libraries use a default image class (for example, the Swift implementation uses UIImage). In other cases, you will have to provide raw byte data. Make sure to check the encoder's documentation to confirm the expected data format.
When working with raw byte data, ensure that the alpha layer is present (each pixel is represented by red, green, blue, and alpha values). Failing to do so will lead to errors such as "width and height must match the pixels array".

